// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner/src/main/java/com/compi/scanner/SimpleLexer.flex

/* Simple JFlex example to tokenize arithmetic expressions */

package com.compi.scanner;
import static com.compi.scanner.TokenTypes.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class SimpleLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\5\1\10\1\0\2\11\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\7\20\2\21"+
    "\2\11\1\22\1\23\1\24\1\11\1\0\3\25\1\26"+
    "\1\27\1\26\5\30\1\31\13\30\1\32\2\30\1\11"+
    "\1\33\1\11\1\5\1\34\1\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\30\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\30\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\11"+
    "\1\65\2\11\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\5\3\2\6"+
    "\2\3\20\7\1\3\1\6\1\0\1\5\1\6\1\10"+
    "\1\2\1\0\1\6\1\11\1\0\1\6\2\0\1\6"+
    "\2\12\1\6\6\7\1\13\4\7\1\13\13\7\1\0"+
    "\1\10\1\6\1\0\1\14\1\0\1\6\1\15\1\16"+
    "\1\12\1\14\1\12\30\7\1\0\1\2\1\0\4\6"+
    "\1\12\16\7\1\2\1\10\1\6\1\15\1\6\7\7"+
    "\1\15\2\7\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\66"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\66\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u02f4\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\66\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u0948\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\66\0\u15f0\0\u1a5e\0\u1a94\0\u0948\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u0fd2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\11\1\12\1\10\1\13\1\14\2\15"+
    "\1\16\1\4\1\17\6\20\1\2\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\20\1\30\1\20"+
    "\1\31\4\20\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\3\20\1\40\67\0\2\3\1\0\1\3\104\0\1\10"+
    "\42\0\2\5\1\0\3\5\1\41\24\5\1\42\32\5"+
    "\1\43\2\0\1\43\1\0\13\43\2\44\44\43\10\0"+
    "\1\10\12\0\1\10\55\0\1\10\7\0\1\10\56\0"+
    "\1\10\6\0\2\10\53\0\1\45\3\0\1\46\4\0"+
    "\1\10\57\0\1\47\1\0\2\50\1\51\5\0\1\52"+
    "\1\0\1\53\1\54\6\0\1\52\5\0\1\53\12\0"+
    "\1\54\20\0\1\55\1\0\3\56\3\0\2\57\1\60"+
    "\1\57\1\61\1\57\1\0\5\57\1\60\5\57\1\61"+
    "\15\57\23\0\1\4\1\10\65\0\1\10\1\4\60\0"+
    "\3\20\3\0\6\20\1\0\31\20\20\0\3\20\3\0"+
    "\6\20\1\0\23\20\1\62\5\20\20\0\3\20\3\0"+
    "\6\20\1\0\20\20\1\63\10\20\20\0\3\20\3\0"+
    "\6\20\1\0\1\20\1\64\6\20\1\65\5\20\1\66"+
    "\12\20\20\0\3\20\3\0\6\20\1\0\5\20\1\67"+
    "\10\20\1\70\12\20\20\0\3\20\3\0\6\20\1\0"+
    "\13\20\1\64\1\20\1\71\10\20\1\72\2\20\20\0"+
    "\3\20\3\0\6\20\1\0\13\20\1\73\2\20\1\74"+
    "\12\20\20\0\3\20\3\0\6\20\1\0\16\20\1\62"+
    "\12\20\20\0\3\20\3\0\6\20\1\0\6\20\1\75"+
    "\6\20\1\76\13\20\20\0\3\20\3\0\6\20\1\0"+
    "\16\20\1\77\12\20\20\0\3\20\3\0\6\20\1\0"+
    "\5\20\1\100\23\20\20\0\3\20\3\0\6\20\1\0"+
    "\10\20\1\101\1\102\10\20\1\103\2\20\1\104\3\20"+
    "\20\0\3\20\3\0\6\20\1\0\27\20\1\105\1\20"+
    "\20\0\3\20\3\0\6\20\1\0\15\20\1\106\13\20"+
    "\20\0\3\20\3\0\6\20\1\0\16\20\1\107\12\20"+
    "\20\0\3\20\3\0\6\20\1\0\10\20\1\110\20\20"+
    "\24\0\1\10\41\0\1\10\2\5\3\0\61\5\1\43"+
    "\2\0\1\43\1\0\62\43\2\0\1\43\1\0\12\43"+
    "\3\44\44\43\2\45\1\111\1\45\1\111\5\45\1\112"+
    "\53\45\2\46\3\0\61\46\17\0\3\113\61\0\1\47"+
    "\1\0\2\50\1\51\5\0\1\114\1\0\1\53\7\0"+
    "\1\114\5\0\1\53\35\0\3\51\5\0\1\114\11\0"+
    "\1\114\24\0\13\115\2\0\2\115\3\0\44\115\15\0"+
    "\1\47\1\0\3\116\63\0\3\117\3\0\3\117\3\120"+
    "\2\0\6\117\22\120\1\0\17\121\3\113\44\121\15\0"+
    "\1\55\1\0\3\56\3\0\2\57\1\122\1\57\1\61"+
    "\1\57\1\0\5\57\1\122\5\57\1\61\15\57\20\0"+
    "\3\57\3\0\6\57\1\0\31\57\1\0\13\115\2\0"+
    "\2\115\3\57\3\115\6\123\1\115\31\123\1\115\15\0"+
    "\1\47\1\0\3\124\3\0\6\57\1\0\31\57\20\0"+
    "\3\20\3\0\6\20\1\0\22\20\1\125\6\20\20\0"+
    "\3\20\3\0\6\20\1\0\5\20\1\126\23\20\20\0"+
    "\3\20\3\0\6\20\1\0\21\20\1\127\7\20\20\0"+
    "\3\20\3\0\6\20\1\0\1\20\1\74\27\20\20\0"+
    "\3\20\3\0\6\20\1\0\15\20\1\130\13\20\20\0"+
    "\3\20\3\0\6\20\1\0\6\20\1\131\22\20\20\0"+
    "\3\20\3\0\6\20\1\0\23\20\1\132\5\20\20\0"+
    "\3\20\3\0\6\20\1\0\23\20\1\133\5\20\20\0"+
    "\3\20\3\0\6\20\1\0\22\20\1\134\6\20\20\0"+
    "\3\20\3\0\6\20\1\0\16\20\1\135\12\20\20\0"+
    "\3\20\3\0\6\20\1\0\20\20\1\75\10\20\20\0"+
    "\3\20\3\0\6\20\1\0\22\20\1\75\6\20\20\0"+
    "\3\20\3\0\6\20\1\0\15\20\1\136\13\20\20\0"+
    "\3\20\3\0\6\20\1\0\7\20\1\137\12\20\1\140"+
    "\6\20\20\0\3\20\3\0\6\20\1\0\16\20\1\141"+
    "\12\20\20\0\3\20\3\0\6\20\1\0\7\20\1\142"+
    "\20\20\1\143\20\0\3\20\3\0\6\20\1\0\1\20"+
    "\1\144\16\20\1\145\10\20\20\0\3\20\3\0\6\20"+
    "\1\0\11\20\1\146\17\20\20\0\3\20\3\0\6\20"+
    "\1\0\17\20\1\147\11\20\20\0\3\20\3\0\6\20"+
    "\1\0\11\20\1\150\7\20\1\151\7\20\20\0\3\20"+
    "\3\0\6\20\1\0\11\20\1\152\1\20\1\153\15\20"+
    "\20\0\3\20\3\0\6\20\1\0\11\20\1\154\17\20"+
    "\1\0\12\111\1\155\53\111\2\45\1\111\1\45\1\111"+
    "\5\45\1\112\3\45\1\156\47\45\17\0\3\113\4\0"+
    "\1\41\1\114\10\0\1\41\1\114\1\41\36\0\2\157"+
    "\2\0\3\160\63\0\3\116\5\0\1\114\11\0\1\114"+
    "\41\0\1\47\1\0\3\161\3\0\3\117\1\120\1\162"+
    "\1\120\2\0\6\117\4\120\1\162\15\120\20\0\3\120"+
    "\3\0\6\120\2\0\30\120\1\0\17\121\3\0\44\121"+
    "\13\115\2\157\2\115\3\163\3\115\6\123\1\115\31\123"+
    "\1\115\17\0\3\124\3\0\2\57\1\164\3\57\1\0"+
    "\5\57\1\164\23\57\20\0\3\20\3\0\6\20\1\0"+
    "\16\20\1\75\12\20\20\0\3\20\3\0\6\20\1\0"+
    "\1\20\1\165\27\20\20\0\3\20\3\0\6\20\1\0"+
    "\5\20\1\75\23\20\20\0\3\20\3\0\6\20\1\0"+
    "\21\20\1\76\1\166\6\20\20\0\3\20\3\0\6\20"+
    "\1\0\1\20\1\167\27\20\20\0\3\20\3\0\6\20"+
    "\1\0\2\20\1\154\26\20\20\0\3\20\3\0\6\20"+
    "\1\0\14\20\1\75\14\20\20\0\3\20\3\0\6\20"+
    "\1\0\5\20\1\170\23\20\20\0\3\20\3\0\6\20"+
    "\1\0\1\20\1\76\27\20\20\0\3\20\3\0\6\20"+
    "\1\0\7\20\1\75\21\20\20\0\3\20\3\0\6\20"+
    "\1\0\11\20\1\171\17\20\20\0\3\20\3\0\6\20"+
    "\1\0\23\20\1\170\5\20\20\0\3\20\3\0\6\20"+
    "\1\0\20\20\1\76\10\20\20\0\3\20\3\0\6\20"+
    "\1\0\15\20\1\172\13\20\20\0\3\20\3\0\6\20"+
    "\1\0\5\20\1\173\23\20\20\0\3\20\3\0\6\20"+
    "\1\0\22\20\1\174\6\20\20\0\3\20\3\0\6\20"+
    "\1\0\23\20\1\175\5\20\20\0\3\20\3\0\6\20"+
    "\1\0\22\20\1\176\6\20\20\0\3\20\3\0\6\20"+
    "\1\0\5\20\1\177\23\20\20\0\3\20\3\0\6\20"+
    "\1\0\16\20\1\200\12\20\20\0\3\20\3\0\6\20"+
    "\1\0\11\20\1\201\17\20\20\0\3\20\3\0\6\20"+
    "\1\0\4\20\1\75\24\20\20\0\3\20\3\0\6\20"+
    "\1\0\1\20\1\202\27\20\20\0\3\20\3\0\6\20"+
    "\1\0\13\20\1\127\15\20\1\0\12\111\1\155\3\111"+
    "\1\203\47\111\2\204\1\0\1\204\1\0\61\204\17\0"+
    "\3\160\63\0\3\160\4\0\1\41\11\0\1\41\1\0"+
    "\1\41\40\0\1\47\1\0\3\161\3\0\2\117\1\205"+
    "\1\120\1\162\1\120\2\0\4\117\1\205\1\117\4\120"+
    "\1\162\15\120\16\0\1\47\1\0\3\206\3\0\6\120"+
    "\2\0\30\120\20\0\3\163\3\0\1\57\1\207\4\57"+
    "\1\0\4\57\1\207\1\57\1\207\22\57\14\0\2\157"+
    "\2\0\3\163\3\0\6\57\1\0\31\57\20\0\3\20"+
    "\3\0\6\20\1\0\12\20\1\75\16\20\20\0\3\20"+
    "\3\0\6\20\1\0\11\20\1\210\17\20\20\0\3\20"+
    "\3\0\6\20\1\0\23\20\1\211\5\20\20\0\3\20"+
    "\3\0\6\20\1\0\20\20\1\200\10\20\20\0\3\20"+
    "\3\0\6\20\1\0\21\20\1\212\7\20\20\0\3\20"+
    "\3\0\6\20\1\0\5\20\1\152\23\20\20\0\3\20"+
    "\3\0\6\20\1\0\16\20\1\213\12\20\20\0\3\20"+
    "\3\0\6\20\1\0\11\20\1\214\17\20\20\0\3\20"+
    "\3\0\6\20\1\0\3\20\1\76\25\20\20\0\3\20"+
    "\3\0\6\20\1\0\3\20\1\215\25\20\20\0\3\20"+
    "\3\0\6\20\1\0\4\20\1\216\24\20\20\0\3\20"+
    "\3\0\6\20\1\0\15\20\1\75\13\20\20\0\3\20"+
    "\3\0\6\20\1\0\7\20\1\142\21\20\20\0\3\20"+
    "\3\0\6\20\1\0\22\20\1\110\6\20\14\0\2\157"+
    "\1\47\1\0\3\161\3\0\3\117\1\120\1\162\1\120"+
    "\2\0\6\117\4\120\1\162\15\120\20\0\3\206\3\0"+
    "\2\120\1\217\3\120\2\0\4\120\1\217\23\120\20\0"+
    "\3\20\3\0\6\20\1\0\15\20\1\220\13\20\20\0"+
    "\3\20\3\0\6\20\1\0\13\20\1\76\15\20\20\0"+
    "\3\20\3\0\6\20\1\0\22\20\1\221\6\20\20\0"+
    "\3\20\3\0\6\20\1\0\6\20\1\75\22\20\20\0"+
    "\3\20\3\0\6\20\1\0\3\20\1\75\25\20\20\0"+
    "\3\20\3\0\6\20\1\0\10\20\1\75\20\20\20\0"+
    "\3\20\3\0\6\20\1\0\5\20\1\213\23\20\14\0"+
    "\2\157\2\0\3\222\3\0\6\120\2\0\30\120\20\0"+
    "\3\20\3\0\6\20\1\0\23\20\1\127\5\20\20\0"+
    "\3\20\3\0\6\20\1\0\5\20\1\74\23\20\20\0"+
    "\3\222\3\0\1\120\1\223\4\120\2\0\3\120\1\223"+
    "\1\120\1\223\22\120\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\30\1\1\11\1\0\4\1"+
    "\1\0\2\1\1\0\1\1\2\0\33\1\1\0\2\1"+
    "\1\0\1\11\1\0\36\1\1\0\1\1\1\0\23\1"+
    "\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    TokenList tokenList = TokenList.getInstance();
    ErrorList errorList = ErrorList.getInstance();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errorList.insertError(ERROR, "Desconocido -> " + yytext(),  yyline);
            }
            // fall through
          case 15: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 16: break;
          case 3:
            { tokenList.insertToken(OPERADOR, yytext(), yyline);
            }
            // fall through
          case 17: break;
          case 4:
            { errorList.insertError(ERROR, "String no cerrado -> " + yytext(), yyline);
            }
            // fall through
          case 18: break;
          case 5:
            { errorList.insertError(ERROR, "Caracter invalido -> " + yytext(), yyline);
            }
            // fall through
          case 19: break;
          case 6:
            { tokenList.insertToken(LITERAL, yytext(), yyline);
            }
            // fall through
          case 20: break;
          case 7:
            { tokenList.insertToken(IDENTIFICADOR, yytext(),  yyline);
            }
            // fall through
          case 21: break;
          case 8:
            { tokenList.insertToken(ERROR, "Error: Comentario no cerrado -> " + yytext(), yyline);
            }
            // fall through
          case 22: break;
          case 9:
            { errorList.insertError(ERROR, "Octal mal formado -> " + yytext(), yyline);
            }
            // fall through
          case 23: break;
          case 10:
            { errorList.insertError(ERROR,"Identificador no puede empezar con un número -> " + yytext(), yyline);
            }
            // fall through
          case 24: break;
          case 11:
            { tokenList.insertToken(PALABRA_RESERVADA, yytext(), yyline);
            }
            // fall through
          case 25: break;
          case 12:
            { errorList.insertError(ERROR, "Exponente mal formado -> " + yytext(), yyline);
            }
            // fall through
          case 26: break;
          case 13:
            { errorList.insertError(ERROR, "Hexadecimal mal formado -> " + yytext(), yyline);
            }
            // fall through
          case 27: break;
          case 14:
            { errorList.insertError(ERROR, "Flotante mal formado -> " + yytext(), yyline);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
