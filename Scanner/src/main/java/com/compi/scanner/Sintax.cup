/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package com.compi.scanner;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol sym;
    
    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        Symbol errorSym = (Symbol)stack.peek();
        System.err.println("Error sintáctico en línea " + (errorSym.left + 1) + ", columna " + (errorSym.right + 1)  + ": " + message);
    }

    public Symbol getS(){
        return this.sym;
    };
    
:};


/* Terminals (tokens returned by the scanner). */
terminal ID, MOD, GLOBAL, STRING, CONST, TRUE, FALSE, EQ, PLUS, MINUS, TIMES, DIV, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, COLON, EQ_EQ, GT_EQ, GT, LT_EQ, LT, NOT_EQ, PLUS_EQ, MINUS_EQ, TIMES_EQ, DIV_EQ, PLUS_PLUS, MINUS_MINUS, OR, AND, NOT, IF, ELSE, FOR, WHILE, SWITCH, CASE, DEFAULT, TYPE_INT, TYPE_LONG, TYPE_SHORT, TYPE_CHAR, VOID, BREAK, CONTINUE, DO, RETURN, INT , FLOAT, CHAR, ERROR;

/* Non terminals */
non terminal programa, globales, funcion_list, global_decl, variable, constante, tipo_var, tipo_func, expr, id_list, next_id_list;

/* Start with the programa non-terminal */
start with programa;

/* The grammar rule for a simple constant declaration */
programa ::= globales funcion_list
           ;

globales ::= globales constante
           | globales global_decl
           | /* empty */  /* Permite que no haya declaraciones */
           ;

global_decl ::= GLOBAL variable
              | variable
              ;

constante ::= CONST tipo_var ID EQ expr SEMI
            | CONST tipo_var ID EQ expr error {: parser.report_error("Falta un ; al final de la declaración de la constante."); :}
            | CONST tipo_var ID SEMI error {: parser.report_error("Debe asignarle un valor a la constante."); :}
            | CONST ID EQ expr SEMI {: parser.report_error("Debe especificar el tipo de la constante."); :}
            | CONST error {: parser.report_error("Declaración de constante incorrecta."); :}
        ;

variable ::= tipo_var id_list SEMI
           | tipo_var id_list error {: parser.report_error("Falta un ; al final de la declaración de la variable."); :}
           | VOID id_list SEMI error {: parser.report_error("Error declarando variable void."); :}
           | ID SEMI error {: parser.report_error("Debe especificar el tipo de la variable."); :}
           | error {: parser.report_error("Declaración de variable incorrecta."); :}
        ;

// FIXME: Tipos para funciones aparte 
tipo_var ::= TYPE_INT
           | TYPE_LONG
           | TYPE_SHORT
           | TYPE_CHAR
           ;

tipo_func ::= tipo_var
            | VOID
            ;

id_list ::= ID next_id_list
        ;

next_id_list ::= COMMA ID next_id_list
        | /* empty */
        ;