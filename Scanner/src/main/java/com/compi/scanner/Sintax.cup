/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package com.compi.scanner;
import java_cup.runtime.*;

parser code {:
    private Symbol s;
    
    public void syntax_error(Symbol s) {
        System.err.println("Error de sintaxis en l√≠nea " + s.left + ", columna " + s.right + ": " + s.value);
    }

    public Symbol getS(){
        return this.s;
    }
:};

/* define how to connect to the scanner! 
init with {: s.init(); :};
scan with {: return s.next_token(); :}; */

/* Terminals (tokens returned by the scanner). */
terminal    Break, Case, Char, Const, Continue, Default, 
            Do, Else, For, If, Int, Long, Return, Short, 
            Switch, Void, While, Read, Write, Op_aritmetrico, 
            Op_booleano, If_else, Linea, Comillas, Tipo_dato, 
            Cadena, Igual, Parentesis_a, Parentesis_c, 
            Llave_a, Llave_c, Corchete_a, Corchete_c, 
            Main, P_coma, Identificador, ERROR;

/* Non terminals */
non terminal INICIO, GLOBAL, CONSTANTE, FUNCIONES, DECLARACION, ASIGNACION;

/* Precedences */

/* Start with the expr_list non-terminal */
start with INICIO;

/* The grammar rules */
INICIO ::=
    GLOBAL | CONSTANTE | FUNCIONES
;

GLOBAL ::=
    DECLARACION
;

CONSTANTE ::=
    Const Tipo_dato ASIGNACION P_coma
;

DECLARACION ::=
    Tipo_dato Identificador P_coma
;

ASIGNACION ::=
    Comillas
;