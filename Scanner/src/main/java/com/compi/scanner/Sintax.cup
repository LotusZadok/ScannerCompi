/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package com.compi.scanner;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }
        
    public Symbol getS(){
        return this.sym;
    };
:};



/* Terminals (tokens returned by the scanner). */
terminal ID, MOD, STRING, CONST, WRITE, READ, TRUE, FALSE, EQ, PLUS, MINUS, TIMES, DIV, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, COLON, EQ_EQ, GT_EQ, GT, LT_EQ, LT, NOT_EQ, PLUS_EQ, MINUS_EQ, TIMES_EQ, DIV_EQ, PLUS_PLUS, MINUS_MINUS, OR, AND, NOT, IF, ELSE, FOR, WHILE, SWITCH, CASE, DEFAULT, TYPE_INT, TYPE_LONG, TYPE_SHORT, TYPE_CHAR, VOID, BREAK, CONTINUE, DO, RETURN, INT , FLOAT, CHAR;

/* Non terminals */
non terminal programa, read, read_parameter, write_parameter, write, case_end, instruccion , global_decl_list, expr_list, global_decl, globales, bloque, estru_control, funcion, parametro_list, if, else, for, while, switch, case_list, constante, variable, tipo_var, id_list, asignacion, op_asignacion, op_incremento, expr, literal, bool_expr, bool_term, bool_factor, rel_expr, op_relacional, arit_exp, term, factor, number, next_id_list;

/* Precedence and associativity declarations */
precedence left OR, AND;
precedence left EQ_EQ, NOT_EQ;
precedence left GT, LT, GT_EQ, LT_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence right NOT;
precedence left PLUS_PLUS, MINUS_MINUS;
precedence left EQ, PLUS_EQ, MINUS_EQ, TIMES_EQ, DIV_EQ;



/* Start with the programa non-terminal */
start with programa;

/* The grammar rules for C subset */

programa ::= globales
        ;

globales ::= global_decl_list;

global_decl_list ::= global_decl_list global_decl
                   | global_decl
                   ;                 

global_decl ::= variable
              | constante
              | funcion
              | error ID SEMI {: report_error("debe especificar el tipo de variable."); :}
              /*| error {: report_error("declaración global inválida o incompleta."); :} */
	;



instruccion  ::= estru_control
        | constante
        | variable
        | asignacion
        | BREAK SEMI
        | read SEMI
        | write SEMI
        | CONTINUE SEMI
        | DO SEMI 
        | RETURN expr SEMI
        | RETURN SEMI
        ;

read ::= READ LPAREN read_parameter RPAREN 
        | READ LPAREN RPAREN
        | READ error {: report_error("parámetro no válido para la función 'read'."); :}
        ;

read_parameter ::= ID COMMA read_parameter
        | ID
        ;

write ::= WRITE LPAREN write_parameter RPAREN
        | WRITE error {: report_error("parámetro no válido para la función 'write'."); :}
        ;

write_parameter ::= expr COMMA write_parameter
        | expr
        ;

bloque ::= instruccion 
        
		| instruccion bloque
		;


expr_list ::= expr COMMA expr_list
		| expr
		| /* empty */
		;

estru_control ::= if
        | for
        | while
        | switch
        ;


funcion ::= tipo_var ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
        | tipo_var ID error LBRACKET bloque RBRACKET {: report_error("problemas con los parametros de la funcion"); :}
        | tipo_var ID LPAREN parametro_list RPAREN error RBRACKET {: report_error("problemas en el cuerpo de la funcion"); :}
        | VOID ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET
        | VOID ID error LBRACKET bloque RBRACKET {: report_error("problemas con los parametros de la funcion"); :}
        | VOID ID LPAREN parametro_list RPAREN error RBRACKET {: report_error("problemas en el cuerpo de la funcion"); :}
        ;

parametro_list ::= tipo_var ID COMMA parametro_list
        | tipo_var ID
        | /* empty */
        ;


if ::= IF LPAREN expr RPAREN LBRACKET bloque RBRACKET else
        | IF error LBRACKET bloque RBRACKET else {: report_error("problemas en la expresion del 'if'."); :}
        | IF LPAREN expr RPAREN error RBRACKET else {: report_error("problemas en el cuerpo del 'if'."); :}
        ;

else ::= ELSE LBRACKET bloque RBRACKET 
        | ELSE error RBRACKET {: report_error("problemas en el cuerpo del 'else'."); :}
        | /* empty */
        ;


for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET bloque RBRACKET 
        | FOR error LBRACKET bloque RBRACKET {: report_error("problemas en la expresion del bucle 'for'."); :}
        | FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error RBRACKET {: report_error("problemas en el cuerpo del 'for'."); :}
        ;

while ::= WHILE LPAREN expr RPAREN LBRACKET bloque RBRACKET 
        | WHILE error LBRACKET bloque RBRACKET {: report_error("problemas en la expresion del 'while'."); :}
        | WHILE LPAREN expr RPAREN error RBRACKET {: report_error("problemas en el cuerpo del 'while'."); :}
        ;

switch ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list case_end RBRACKET 
        | SWITCH error LBRACKET case_list case_end RBRACKET {: report_error("problemas en la expresion del 'switch'."); :}
        | SWITCH LPAREN arit_exp RPAREN case_list error RBRACKET {: report_error("problemas en el cuerpo del 'switch'."); :}
        ;

case_list ::= CASE arit_exp COLON bloque
        | CASE arit_exp COLON bloque case_list
        ;

case_end ::= DEFAULT COLON bloque
        | /* empty */
        ;

constante ::= CONST tipo_var ID EQ expr SEMI
        | CONST error SEMI {: report_error("error en la declaración de constante."); :}
        ;

variable ::= tipo_var id_list SEMI
        | tipo_var SEMI {: report_error("error en la declaración de variable."); :}
        ;

tipo_var ::= TYPE_INT
        | TYPE_LONG
        | TYPE_SHORT
        | TYPE_CHAR
        ;


id_list ::= ID next_id_list
        ;

next_id_list ::= COMMA ID next_id_list
        | /* empty */
        ;


asignacion ::= ID op_asignacion expr SEMI
        | ID op_incremento SEMI
        ;


op_asignacion ::= EQ
        | PLUS_EQ
        | MINUS_EQ
        | TIMES_EQ
        | DIV_EQ
        ;

op_incremento ::= PLUS_PLUS
        | MINUS_MINUS
        ;

expr ::= expr PLUS expr
       | expr MINUS expr
       | expr TIMES expr
       | expr DIV expr
       | expr MOD expr
       | expr AND expr
       | expr OR expr
       | NOT expr
       | expr op_relacional expr
       | LPAREN expr RPAREN
       | ID
       | literal
       | number
       ;

op_relacional ::= EQ_EQ
                | GT_EQ
                | GT
                | LT_EQ
                | LT
                | NOT_EQ
                ;

literal ::= CHAR
          | STRING
          | TRUE
          | FALSE
          ;

number ::= INT
         | FLOAT
         ;