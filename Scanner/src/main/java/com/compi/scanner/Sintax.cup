/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package com.compi.scanner;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol sym;

	public void report_error(String message, Object info) {
		System.err.println(message);
		if (info instanceof Symbol) {
			Symbol s = (Symbol) info;
			System.err.println(" at line " + (s.left + 1) + ", column " + (s.right + 1) + ": " + s.value);
		}
	}

    public Symbol getS(){
        return this.sym;
    };
:};



/* Terminals (tokens returned by the scanner). */
terminal ID, MOD, GLOBAL, STRING, CONST, TRUE, FALSE, EQ, PLUS, MINUS, TIMES, DIV, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, COLON, EQ_EQ, GT_EQ, GT, LT_EQ, LT, NOT_EQ, PLUS_EQ, MINUS_EQ, TIMES_EQ, DIV_EQ, PLUS_PLUS, MINUS_MINUS, OR, AND, NOT, IF, ELSE, FOR, WHILE, SWITCH, CASE, DEFAULT, TYPE_INT, TYPE_LONG, TYPE_SHORT, TYPE_CHAR, VOID, BREAK, CONTINUE, DO, RETURN, INT , FLOAT, CHAR;

/* Non terminals */
non terminal programa, instruccion , global_decl_list, expr_list, global_decl, globales, global, funcion_list, bloque, estru_control, funcion, parametro_list, if, else, for, while, switch, case_list, constante, variable, tipo, id_list, asignacion, op_asignacion, op_incremento, expr, literal, bool_expr, bool_term, bool_factor, rel_expr, op_relacional, arit_exp, term, factor, number, next_id_list;

/* Precedence and associativity declarations */
precedence left OR, AND;
precedence left EQ_EQ, NOT_EQ;
precedence left GT, LT, GT_EQ, LT_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence right NOT;
precedence left PLUS_PLUS, MINUS_MINUS;
precedence left EQ, PLUS_EQ, MINUS_EQ, TIMES_EQ, DIV_EQ;


/* Start with the programa non-terminal */
start with programa;

/* The grammar rules for C subset */

programa ::= globales funcion_list
        | error funcion_list
        ;

globales ::= global_decl_list;

global_decl_list ::= global_decl_list global_decl
                   | global_decl;

global_decl ::= GLOBAL variable
              | constante
			  ;

funcion_list ::= funcion
        | funcion funcion_list
        ;


instruccion  ::= estru_control
        | constante
        | variable
        | asignacion
        | funcion
	| expr SEMI
        | BREAK SEMI
        | CONTINUE SEMI
        | DO SEMI
        | RETURN expr SEMI
        | RETURN SEMI
        | error SEMI
        ;

bloque ::= instruccion 
		| instruccion bloque
		;


expr_list ::= expr COMMA expr_list
		| expr
		| /* empty */
		;

estru_control ::= if
        | for
        | while
        | switch
        ;


funcion ::= tipo ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
        | tipo ID error LBRACKET bloque RBRACKET
        | tipo ID LPAREN parametro_list RPAREN  error RBRACKET
        ;

parametro_list ::= tipo ID COMMA parametro_list
        | tipo ID
        | /* empty */
        ;


if ::= IF LPAREN expr RPAREN LBRACKET bloque RBRACKET else
        | IF error LBRACKET bloque RBRACKET else
        | IF LPAREN expr RPAREN error RBRACKET else
        ;

else ::= ELSE LBRACKET bloque RBRACKET 
        | ELSE error RBRACKET
        | /* empty */
        ;


for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET bloque RBRACKET 
        | FOR error LBRACKET bloque RBRACKET
        | FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error RBRACKET
        ;

while ::= WHILE LPAREN expr RPAREN LBRACKET bloque RBRACKET 
        | WHILE error LBRACKET bloque RBRACKET
        | WHILE LPAREN expr RPAREN error RBRACKET
        ;

switch ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list RBRACKET 
        | SWITCH error LBRACKET case_list RBRACKET
        | SWITCH LPAREN arit_exp RPAREN error RBRACKET
        ;

case_list ::= CASE arit_exp COLON bloque
        | CASE arit_exp COLON bloque case_list
        | DEFAULT COLON bloque
        ;

constante ::= CONST tipo ID EQ expr SEMI
        ;


variable ::= tipo id_list SEMI
        ;

// FIXME: Tipos para funciones aparte 
tipo ::= TYPE_INT
        | TYPE_LONG
        | TYPE_SHORT
        | TYPE_CHAR
        | VOID
        ;

id_list ::= ID next_id_list
        ;

next_id_list ::= COMMA ID next_id_list
        | /* empty */
        ;


asignacion ::= ID op_asignacion expr SEMI
        | ID op_incremento SEMI
        ;


op_asignacion ::= EQ
        | PLUS_EQ
        | MINUS_EQ
        | TIMES_EQ
        | DIV_EQ
        ;

op_incremento ::= PLUS_PLUS
        | MINUS_MINUS
        ;

expr ::= literal
        | bool_expr
        | arit_exp
        ;

literal ::= CHAR
        | STRING
        ;

bool_expr ::= bool_expr OR bool_term
        | bool_term
        ;

bool_term ::= bool_term AND bool_factor
        | bool_factor
        ;

bool_factor ::= NOT bool_factor
        | LPAREN bool_expr RPAREN
        | rel_expr
        | TRUE
        | FALSE
        ;

rel_expr ::= arit_exp op_relacional arit_exp
        ;

op_relacional ::= EQ_EQ
        | GT_EQ
        | GT
        | LT_EQ
        | LT
        | NOT_EQ
        ;

arit_exp ::= arit_exp PLUS term
        | arit_exp MINUS term   
        | term
        ;

term ::= term TIMES factor
        | term DIV factor
        | term MOD factor
        | factor
        ;

factor ::= LPAREN arit_exp RPAREN
        | number
        | ID
        | ID LPAREN expr_list RPAREN
        ;

number ::= INT
        | FLOAT
        ;

