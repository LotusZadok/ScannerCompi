/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package com.compi.scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.compi.scanner.semantico.*;
import com.compi.scanner.traductor.*;


parser code {:
    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void semantic_error(Symbol sym) {
        System.err.println("Error semántico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }
        
    public Symbol getS(){
        return this.sym;
    };
  public Generador generador = new Generador();

  // Métodos para la tabla de símbolos
  private TablaSimbolos ts = new TablaSimbolos();
  public PilaSemantica pilaSemantica = new PilaSemantica();

  public void imprimirTablasSimbolos() {
    ts.imprimirTablas();
  }

  public String getAmbito() {
    String ambito = "global";
    if (pilaSemantica.get("FUNC") != null) {
      RS_FUNC rs_func = (RS_FUNC) pilaSemantica.get("FUNC");
      ambito = rs_func.getAmbito();
    }
    return ambito;
  }


  // Acciones Semanticas

  public void recuerdaTipo(String tipo) {
    RS_TIPO rs_tipo = new RS_TIPO(tipo);
    pilaSemantica.push(rs_tipo);
  }

  public void recuerdaID(String id) {
    RS_ID rs_id = new RS_ID(id);
    pilaSemantica.push(rs_id);
  }

    public void recuerdaID(String id, String scope) {
        RS_ID rs_id = new RS_ID(id, scope);
        pilaSemantica.push(rs_id);
    }

  public void insertarTS() {
    if (pilaSemantica.top().getTipo() == "FUNC") {
    System.out.println("Funcion encontrada");
      return;
    }
    // buscar RS_TIPO
    RS_TIPO rs_tipo = (RS_TIPO) pilaSemantica.pop();

    // obtener el ámbito
    String ambito = getAmbito();

    // validar que no exista la variable en el ámbito actual

    // agregar a la tabla de símbolos
    while (!pilaSemantica.isEmpty() && pilaSemantica.top().getTipo() ==  "ID") {
      RS_ID rs_id = (RS_ID) pilaSemantica.pop();

      if (ts.contiene(rs_id.getId(), ambito)) {
        semantic_error(cur_token);
        System.err.println("La variable '" + rs_id.getId() + "' ya está definida.");
        return;
      }
      Simbolo simbolo = new Simbolo("VAR", rs_tipo.getTipo_Var(), rs_id.getId(), rs_id.getScope(), ambito);
      ts.insertarVar(simbolo);

      // generar código para la declaración de la variable
      generador.genVar(rs_id.getId(), rs_tipo.getTipo_Var());
    }

  }

  public void recuerdaOP(String op) {
    RS_OP rs_op = new RS_OP(op);
    pilaSemantica.push(rs_op);
  }

  public void recuerdaVAR(String id) {
    // Obtener el ámbito
    String ambito = getAmbito();

    // Verificar si la variable está definida
    if (!ts.contiene(id, ambito)) {
      semantic_error(cur_token);
      System.err.println("La variable '" + id + "' no está definida.");
      return;
    }
    // Obtener el tipo de la variable
    String tipo = ts.getTipo(id, ambito);

    // Agregar a la pila semántica
    RS_DO rs_do = new RS_DO(id, tipo);

    pilaSemantica.push(rs_do);
  }

  public void recuerdaCONST(Object num) {
    // Agregar a la pila semántica
    RS_DO rs_const = new RS_DO(num.toString(), "int", true);
    pilaSemantica.push(rs_const);
  }

  public void evalBinary() {
    RS_DO right = (RS_DO) pilaSemantica.pop();
    RS_OP op = (RS_OP) pilaSemantica.pop();
    RS_DO left = (RS_DO) pilaSemantica.pop();

    // Verificar que los tipos sean compatibles
    if (!left.getTipo().equals(right.getTipo())) {
      semantic_error(cur_token);
      System.err.println("Tipos incompatibles en la operación binaria.");
      return;
    }

    // Los DO son constantes?
    RS_DO rs_result = null;
    if (left.isConstante() && right.isConstante()) {
      // Evaluar la operación
      Object result = null;
      switch (op.getOP()) {
        case "+":
          result = Integer.parseInt(left.getId()) + Integer.parseInt(right.getId());
          break;
        case "-":
          result = Integer.parseInt(left.getId()) - Integer.parseInt(right.getId());
          break;
        case "*":
          result = Integer.parseInt(left.getId()) * Integer.parseInt(right.getId());
          break;
        case "/":
          result = Integer.parseInt(left.getId()) / Integer.parseInt(right.getId());
          break;
      }
      // Agregar el resultado a la pila semántica
      rs_result = new RS_DO(result.toString(), "int", true);
    } else {
      // generar el código para la operación
      String var = generador.genBinary(left, op.getOP(), right);
      // Crear RS_DO de tipo dirección con el lugar donde quedo el resultado, puede
      // ser una variable temporal
      rs_result = new RS_DO(var, "int");
    }

    // Guardar el resultado en la pila semántica
    pilaSemantica.push(rs_result);

  }

  public String generateLabel() {
    return generador.getNextNumLabel();
  }

  public void startIF() {
    RS_IF rs_if = new RS_IF("ELSE" + generateLabel(), "EXITIF" + generateLabel());
    pilaSemantica.push(rs_if);
  }

  public void testIF() {
    RS_DO right = (RS_DO) pilaSemantica.pop();
    RS_OP op = (RS_OP) pilaSemantica.pop();
    RS_DO left = (RS_DO) pilaSemantica.pop();


    RS_IF rs_if = (RS_IF) pilaSemantica.get("IF");
    // Generar código para la condición
    generador.genTest(right, op.getOP(), left, rs_if.getElseLabel());
  }

  public void startELSE() {
    RS_IF rs_if = (RS_IF) pilaSemantica.get("IF");
    generador.genJump(rs_if.getExitLabel());
    generador.genLabel(rs_if.getElseLabel());
  }

  public void endIF() {
    RS_IF rs_if = (RS_IF) pilaSemantica.pop();
    generador.genLabel(rs_if.getExitLabel());
  }

  public void startWHILE() {
    RS_WHILE rs_while = new RS_WHILE("EXITWHILE" + generateLabel(), "STARTWHILE" + generateLabel());
    pilaSemantica.push(rs_while);
    generador.genLabel(rs_while.getStartLabel());
  }

  public void testWHILE() {
        RS_DO right = (RS_DO) pilaSemantica.pop();
        RS_OP op = (RS_OP) pilaSemantica.pop();
        RS_DO left = (RS_DO) pilaSemantica.pop();

        RS_WHILE rs_while = (RS_WHILE) pilaSemantica.get("WHILE");
        // Generar código para la condición
        generador.genTest(left, op.getOP(), right, rs_while.getExitLabel());
    }

  public void endWHILE() {
    RS_WHILE rs_while = (RS_WHILE) pilaSemantica.pop();
    generador.genJump(rs_while.getStartLabel());
    generador.genLabel(rs_while.getExitLabel());
  }

  public void testBreak() {
    // Verificar que esté dentro de un bucle
    RS_WHILE rs_while = (RS_WHILE) pilaSemantica.get("WHILE");
    if (rs_while == null) {
      semantic_error(cur_token);
      System.err.println("'break' fuera de contexto válido (se requiere bucle).");
    }
    // Generar código para el salto
    generador.genJump(rs_while.getExitLabel());
  }

  public void testContinue() {
    // Verificar que esté dentro de un bucle
    RS_WHILE rs_while = (RS_WHILE) pilaSemantica.get("WHILE");
    if (rs_while == null) {
      semantic_error(cur_token);
      System.err.println("'continue' fuera de contexto válido (se requiere bucle).");
    }
    // Generar código para el salto
    generador.genJump(rs_while.getStartLabel());
  }

  public void startFunc() {
    RS_FUNC rs_func = new RS_FUNC("FUNC" + generateLabel());
    RS_ID rs_id = (RS_ID) pilaSemantica.pop();

    ts.insertarFuncion(new Simbolo("FUNCION", rs_id.getId().toString(), "Se cae", "global"));

    pilaSemantica.push(rs_func);
  }

  public void endFunc() {
    pilaSemantica.pop();
  }

  public void incrementarValor(String op) {
    RS_ID rs_do = (RS_ID) pilaSemantica.pop();
    // Verificar que sea una variable
    if (!ts.getTipo(rs_do.getId(), getAmbito()).equals("int")) {
      semantic_error(cur_token);
      System.err.println("El operador '" + op + "' solo se puede aplicar a variables de tipo 'int'.");
      return;
    }
    // Generar código para la operación
    generador.genIncrement(rs_do.getId(), op);
  }

  public void asignarValor() {
    RS_DO rs_do = (RS_DO) pilaSemantica.pop();
    RS_ID rs_id = (RS_ID) pilaSemantica.pop();


    // Obtener el ámbito
    String ambito = getAmbito();

    // Verificar que la variable esté definida
    if (!ts.contiene(rs_id.getId(), ambito)) {
      semantic_error(cur_token);
      System.err.println("La variable '" + rs_id.getId() + "' no está definida.");
      return;
    }
    // Verificar que los tipos sean compatibles
    if (!ts.getTipo(rs_id.getId(), ambito).equals(rs_do.getTipo_Var())) {
      semantic_error(cur_token);
      System.err.println("Tipos incompatibles en la asignación.");
      return;
    }
    // Generar código para la asignación
    generador.genAssign(rs_id.getId(), rs_do.getId());
  }
:};

/* Declaración de terminales*/
terminal ID, TRUE, FALSE, EQ, PLUS, MINUS, TIMES, DIV, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, EQ_EQ, GT, LT, NOT_EQ, PLUS_PLUS, MINUS_MINUS, IF, ELSE, WHILE, TYPE_INT, TYPE_LONG, TYPE_SHORT, TYPE_CHAR, VOID, BREAK, CONTINUE, INT, FLOAT;
/* No terminales con tipos */
non terminal String tipo_var;

/* No terminales sin tipo específico */
non terminal programa, expr_bool, expr_arit, instruccion, global_decl_list, globales, bloque, estru_control, funciones, funcion, parametro_list, if, else, while, while_condition, variable, id_list, asignacion, op_asignacion, op_incremento, literal, op_relacional, number, next_id_list, op_aritmetico, parametros, param_list_elements, param_element, if_condition;


/* Precedence and associativity declarations */
precedence left EQ_EQ, NOT_EQ;
precedence left GT, LT;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left PLUS_PLUS, MINUS_MINUS;
precedence right EQ; // Added precedence for assignment operator

/* Start with the programa non-terminal */
start with programa;

/* The grammar rules for C subset */

programa ::= globales {: generador.generarArchivo(); 
                        ts.imprimirTablas();
  :} 
           ;

globales ::= global_decl_list funciones
           ;


global_decl_list ::= global_decl_list variable 
                   | variable
                   ;                 

funciones ::= funciones funcion
              | funcion 
              ;


tipo_var ::= TYPE_INT {: RESULT = "int"; :}
           | TYPE_LONG {: RESULT = "long"; :}
           | TYPE_SHORT {: RESULT = "short"; :}
           | TYPE_CHAR {: RESULT = "char"; :}
           ;

variable ::= tipo_var:tipo  id_list SEMI {: 
                recuerdaTipo(tipo); 
                insertarTS(); 
            :}
           | tipo_var id_list error {: report_error("Missing semicolon in variable declaration."); :}
           ;

id_list ::= ID:id {: recuerdaID(id.toString()); :} next_id_list
          ;

next_id_list ::= COMMA ID:id {: recuerdaID(id.toString()); :} next_id_list
               | /* empty */
               ;
               
funcion ::= tipo_var:tipo ID:id  {: recuerdaID(id.toString()); :} LPAREN parametros RPAREN LBRACKET bloque RBRACKET {: endFunc(); :}
| VOID ID:id  {: recuerdaID(id.toString()); :} LPAREN parametros RPAREN LBRACKET bloque RBRACKET {: endFunc(); :}
          | tipo_var ID LBRACKET error bloque RBRACKET {: report_error("Invalid function declaration."); :}
          | VOID ID LBRACKET error bloque RBRACKET {: report_error("Invalid function declaration."); :}
          ;

parametros ::= {: startFunc(); :} parametro_list {: insertarTS(); :}
             ;

parametro_list ::= param_list_elements 
                 | /* empty */
                 | error {: report_error("Error in parameter list."); :}
                 ;

param_list_elements ::= param_list_elements COMMA param_element
                      | param_element
                      ;

param_element ::= tipo_var:tipo ID:id {: 
                      
                      recuerdaID(id.toString(), "param"); 
                      recuerdaTipo(tipo);
                      insertarTS(); 
                  :}
                 ;

bloque ::= instruccion
         | instruccion bloque
         ;


instruccion ::= estru_control
              | variable
              | asignacion SEMI
              | BREAK SEMI {: testBreak(); :}
              | CONTINUE SEMI {:testContinue(); :}
              | error {: report_error("Invalid instruction."); :}
              ;

estru_control ::= if
                | while
                ;

if ::= IF if_condition LBRACKET  bloque RBRACKET {: 
                    startELSE(); 
                :} else {:
                    endIF();
                :}
               | IF error bloque RBRACKET else {:
                    report_error("Invalid expression in 'if' condition."); 
                :}
               ;

if_condition ::= {: startIF(); :} LPAREN expr_bool RPAREN {: testIF(); :}
               ;

else ::= ELSE LBRACKET bloque RBRACKET
            | ELSE error {: report_error("Invalid 'else' statement."); :}
            | /* empty */
            ;

while ::= WHILE while_condition LBRACKET bloque RBRACKET {: endWHILE(); :}
        | WHILE error bloque RBRACKET {: report_error("Invalid 'while' loop condition."); :}
        ;

while_condition ::= {: startWHILE(); :} LPAREN expr_bool RPAREN {: testWHILE(); :}
                  ;


asignacion ::= ID:id EQ {: recuerdaID(id.toString()); :} expr_arit {: asignarValor(); :} 

             | ID:id {: recuerdaID(id.toString()); :} op_incremento  
             | ID EQ error {: report_error("Invalid assignment expression."); :}
             ;


op_incremento ::= PLUS_PLUS: op {: incrementarValor(op.toString()); :}
                | MINUS_MINUS:op {: incrementarValor(op.toString()); :}
                ;

expr_arit ::= literal
    | expr_arit op_aritmetico expr_arit {: evalBinary(); :}
    ;

expr_bool ::= literal op_relacional literal 
;
    
literal ::= number
          | ID:id {: recuerdaVAR(id.toString()); :}
          ;

op_relacional ::= EQ_EQ {: recuerdaOP("=="); :}
                | GT {: recuerdaOP(">"); :}
                | LT {: recuerdaOP("<"); :}
                | NOT_EQ {: recuerdaOP("!="); :}
                ;


op_aritmetico ::= PLUS {: recuerdaOP("+"); :}
                | MINUS {: recuerdaOP("-"); :}
                | TIMES {: recuerdaOP("*"); :}
                | DIV {: recuerdaOP("/"); :}
                ;


number ::= INT:num {: recuerdaCONST(num); :}
         | FLOAT:num {: recuerdaCONST(num); :}
         ;