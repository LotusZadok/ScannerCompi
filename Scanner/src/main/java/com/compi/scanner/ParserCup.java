
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi.scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.compi.scanner.semantico.*;
import com.compi.scanner.traductor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\004\003\000\002\017" +
    "\004\000\002\014\004\000\002\014\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\022\004\000" +
    "\002\022\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\005\000\002\013\004\000\002\013\003\000" +
    "\002\006\006\000\002\006\005\000\002\006\004\000\002" +
    "\007\005\000\002\007\003\000\002\011\006\000\002\011" +
    "\004\000\002\010\005\000\002\010\003\000\002\020\003" +
    "\000\002\020\004\000\002\015\005\000\002\015\003\000" +
    "\002\015\002\000\002\015\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\053" +
    "\002\000\002\054\002\000\002\023\014\000\002\055\002" +
    "\000\002\023\013\000\002\023\010\000\002\023\010\000" +
    "\002\024\006\000\002\024\004\000\002\024\002\000\002" +
    "\024\003\000\002\056\002\000\002\025\013\000\002\025" +
    "\007\000\002\025\007\000\002\026\006\000\002\026\004" +
    "\000\002\026\002\000\002\057\002\000\002\027\016\000" +
    "\002\027\006\000\002\027\013\000\002\060\002\000\002" +
    "\030\012\000\002\030\006\000\002\030\007\000\002\031" +
    "\012\000\002\031\007\000\002\031\007\000\002\032\006" +
    "\000\002\032\007\000\002\032\004\000\002\012\005\000" +
    "\002\012\004\000\002\012\002\000\002\033\010\000\002" +
    "\033\010\000\002\034\005\000\002\034\005\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\035\004\000\002\052\005\000\002\052\002\000" +
    "\002\036\005\000\002\036\004\000\002\036\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\003\000\002\003\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\016\003\015\007\020\056\006\057\016\060" +
    "\010\061\014\001\002\000\004\002\374\001\002\000\020" +
    "\003\ufffd\007\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\001\002\000\004\004\uffb1\001\002\000\004\004\373" +
    "\001\002\000\004\004\uffaf\001\002\000\020\003\ufffc\007" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\020\003\ufffb\007\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\004\uffae\001\002\000\020\003\ufffa\007\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\004\004\uffb0" +
    "\001\002\000\020\003\015\007\020\056\006\057\016\060" +
    "\010\061\014\062\105\001\002\000\012\056\006\057\016" +
    "\060\010\061\014\001\002\000\004\004\022\001\002\000" +
    "\004\014\023\001\002\000\024\004\031\006\027\012\026" +
    "\013\030\022\035\046\034\067\024\070\036\071\037\001" +
    "\002\000\046\003\uff80\005\uff80\015\uff80\016\uff80\017\uff80" +
    "\020\uff80\021\uff80\023\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\044\uff80\045\uff80" +
    "\001\002\000\044\003\uff93\005\uff93\015\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\023\uff93\026\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\044\uff93\045\uff93\001" +
    "\002\000\044\003\uff82\005\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\023\uff82\026\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\035\uff82\044\uff82\045\uff82\001\002" +
    "\000\044\003\uff83\005\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\023\uff83\026\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\044\uff83\045\uff83\001\002\000" +
    "\044\003\uff81\005\uff81\015\uff81\016\uff81\017\uff81\020\uff81" +
    "\021\uff81\023\uff81\026\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\044\uff81\045\uff81\001\002\000\046" +
    "\003\uff95\005\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\073\023\uff95\026\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\044\uff95\045\uff95\001\002\000" +
    "\040\003\072\005\044\015\046\016\041\017\053\020\051" +
    "\021\071\030\057\031\042\032\050\033\047\034\055\035" +
    "\045\044\056\045\043\001\002\000\044\003\uff94\005\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\023\uff94\026" +
    "\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94" +
    "\044\uff94\045\uff94\001\002\000\024\004\031\006\027\012" +
    "\026\013\030\022\035\046\034\067\024\070\036\071\037" +
    "\001\002\000\024\004\031\006\027\012\026\013\030\022" +
    "\035\046\034\067\024\070\036\071\037\001\002\000\046" +
    "\003\uff7f\005\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\023\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\044\uff7f\045\uff7f\001\002\000" +
    "\044\003\uff84\005\uff84\015\uff84\016\uff84\017\uff84\020\uff84" +
    "\021\uff84\023\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\044\uff84\045\uff84\001\002\000\036" +
    "\005\044\015\046\016\041\017\053\020\051\023\052\030" +
    "\057\031\042\032\050\033\047\034\055\035\045\044\056" +
    "\045\043\001\002\000\024\004\031\006\027\012\026\013" +
    "\030\022\035\046\034\067\024\070\036\071\037\001\002" +
    "\000\024\004\uff89\006\uff89\012\uff89\013\uff89\022\uff89\046" +
    "\uff89\067\uff89\070\uff89\071\uff89\001\002\000\024\004\031" +
    "\006\027\012\026\013\030\022\035\046\034\067\024\070" +
    "\036\071\037\001\002\000\024\004\031\006\027\012\026" +
    "\013\030\022\035\046\034\067\024\070\036\071\037\001" +
    "\002\000\024\004\uff85\006\uff85\012\uff85\013\uff85\022\uff85" +
    "\046\uff85\067\uff85\070\uff85\071\uff85\001\002\000\024\004" +
    "\031\006\027\012\026\013\030\022\035\046\034\067\024" +
    "\070\036\071\037\001\002\000\024\004\uff87\006\uff87\012" +
    "\uff87\013\uff87\022\uff87\046\uff87\067\uff87\070\uff87\071\uff87" +
    "\001\002\000\024\004\uff88\006\uff88\012\uff88\013\uff88\022" +
    "\uff88\046\uff88\067\uff88\070\uff88\071\uff88\001\002\000\024" +
    "\004\031\006\027\012\026\013\030\022\035\046\034\067" +
    "\024\070\036\071\037\001\002\000\044\003\uff97\005\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97\026" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\044\uff97\045\uff97\001\002\000\024\004\031\006\027\012" +
    "\026\013\030\022\035\046\034\067\024\070\036\071\037" +
    "\001\002\000\024\004\031\006\027\012\026\013\030\022" +
    "\035\046\034\067\024\070\036\071\037\001\002\000\024" +
    "\004\uff86\006\uff86\012\uff86\013\uff86\022\uff86\046\uff86\067" +
    "\uff86\070\uff86\071\uff86\001\002\000\024\004\031\006\027" +
    "\012\026\013\030\022\035\046\034\067\024\070\036\071" +
    "\037\001\002\000\024\004\uff8a\006\uff8a\012\uff8a\013\uff8a" +
    "\022\uff8a\046\uff8a\067\uff8a\070\uff8a\071\uff8a\001\002\000" +
    "\044\003\uff9a\005\044\015\046\016\041\017\053\020\051" +
    "\021\uff9a\023\uff9a\026\uff9a\030\057\031\042\032\050\033" +
    "\047\034\055\035\045\044\uff9a\045\uff9a\001\002\000\044" +
    "\003\uff98\005\044\015\046\016\041\017\053\020\051\021" +
    "\uff98\023\uff98\026\uff98\030\057\031\042\032\050\033\047" +
    "\034\055\035\045\044\056\045\043\001\002\000\044\003" +
    "\uff9e\005\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\023\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\044\uff9e\045\uff9e\001\002\000\044\003\uff9d" +
    "\005\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023" +
    "\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\044\uff9d\045\uff9d\001\002\000\044\003\uffa0\005" +
    "\044\015\uffa0\016\uffa0\017\053\020\051\021\uffa0\023\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\044\uffa0\045\uffa0\001\002\000\044\003\uff9c\005\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c\026" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\044\uff9c\045\uff9c\001\002\000\044\003\uff9b\005\044\015" +
    "\046\016\041\017\053\020\051\021\uff9b\023\uff9b\026\uff9b" +
    "\030\057\031\042\032\050\033\047\034\055\035\045\044" +
    "\uff9b\045\uff9b\001\002\000\044\003\uff9f\005\044\015\uff9f" +
    "\016\uff9f\017\053\020\051\021\uff9f\023\uff9f\026\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\044\uff9f" +
    "\045\uff9f\001\002\000\044\003\uff99\005\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\023\uff99\026\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\044\uff99\045" +
    "\uff99\001\002\000\054\003\uffb5\004\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\025\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\054\003" +
    "\uffb4\004\uffb4\007\uffb4\010\uffb4\011\uffb4\025\uffb4\047\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\001\002\000\030\003\075\004\031\006\027\012" +
    "\026\013\030\022\035\023\uffde\046\034\067\024\070\036" +
    "\071\037\001\002\000\004\023\101\001\002\000\004\023" +
    "\uffdd\001\002\000\040\005\044\015\046\016\041\017\053" +
    "\020\051\023\uffdf\026\077\030\057\031\042\032\050\033" +
    "\047\034\055\035\045\044\056\045\043\001\002\000\030" +
    "\003\075\004\031\006\027\012\026\013\030\022\035\023" +
    "\uffde\046\034\067\024\070\036\071\037\001\002\000\004" +
    "\023\uffe0\001\002\000\044\003\uff96\005\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\023\uff96\026\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\044\uff96\045" +
    "\uff96\001\002\000\020\003\ufffe\007\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\004\363\001" +
    "\002\000\016\002\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\001\002\000\004\004\347\001\002\000\016\002" +
    "\uffff\056\006\057\016\060\010\061\014\062\105\001\002" +
    "\000\004\004\111\001\002\000\016\002\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000\006\022\uffd8" +
    "\024\113\001\002\000\004\022\333\001\002\000\004\003" +
    "\114\001\002\000\044\003\137\004\131\007\020\010\130" +
    "\011\115\047\126\051\144\052\120\053\125\056\006\057" +
    "\016\060\010\061\014\063\135\064\116\065\132\066\121" +
    "\001\002\000\006\003\323\022\324\001\002\000\004\021" +
    "\322\001\002\000\052\003\ufff7\004\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\025\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\001\002\000\006\003\307\022" +
    "\310\001\002\000\026\004\031\006\027\012\026\013\030" +
    "\021\304\022\035\046\034\067\024\070\036\071\037\001" +
    "\002\000\052\003\ufff6\004\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\025\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\001\002\000\052\003\137\004\131\007" +
    "\020\010\130\011\115\025\uffe2\047\126\051\144\052\120" +
    "\053\125\054\uffe2\055\uffe2\056\006\057\016\060\010\061" +
    "\014\063\135\064\116\065\132\066\121\001\002\000\004" +
    "\025\302\001\002\000\006\003\235\022\236\001\002\000" +
    "\006\003\213\022\214\001\002\000\004\021\212\001\002" +
    "\000\006\003\203\022\204\001\002\000\020\014\173\036" +
    "\177\037\175\040\174\041\170\042\176\043\172\001\002" +
    "\000\004\021\167\001\002\000\052\003\uffdc\004\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\025\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\052" +
    "\003\uffda\004\uffda\007\uffda\010\uffda\011\uffda\025\uffda\047" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\001\002\000\004\021\166\001\002\000\052\003\ufff5" +
    "\004\ufff5\007\ufff5\010\ufff5\011\ufff5\025\ufff5\047\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\001" +
    "\002\000\052\003\uffec\004\uffec\007\uffec\010\uffec\011\uffec" +
    "\025\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\001\002\000\004\021\165\001\002\000" +
    "\052\003\uffdb\004\uffdb\007\uffdb\010\uffdb\011\uffdb\025\uffdb" +
    "\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\001\002\000\004\021\164\001\002\000\052\003" +
    "\uffd9\004\uffd9\007\uffd9\010\uffd9\011\uffd9\025\uffd9\047\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\001\002\000\006\003\145\022\146\001\002\000\044\003" +
    "\137\004\131\007\020\010\130\011\115\047\126\051\144" +
    "\052\120\053\125\056\006\057\016\060\010\061\014\063" +
    "\135\064\116\065\132\066\121\001\002\000\004\004\131" +
    "\001\002\000\004\021\150\001\002\000\024\004\031\006" +
    "\027\012\026\013\030\022\035\046\034\067\024\070\036" +
    "\071\037\001\002\000\036\005\044\015\046\016\041\017" +
    "\053\020\051\021\152\030\057\031\042\032\050\033\047" +
    "\034\055\035\045\044\056\045\043\001\002\000\004\004" +
    "\131\001\002\000\004\023\154\001\002\000\006\003\155" +
    "\024\156\001\002\000\052\003\uffc3\004\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\025\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\044\003\uffc6" +
    "\004\uffc6\007\uffc6\010\uffc6\011\uffc6\047\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\001\002\000\044\003\137\004" +
    "\131\007\020\010\130\011\115\047\126\051\144\052\120" +
    "\053\125\056\006\057\016\060\010\061\014\063\135\064" +
    "\116\065\132\066\121\001\002\000\004\025\161\001\002" +
    "\000\052\003\uffc5\004\uffc5\007\uffc5\010\uffc5\011\uffc5\025" +
    "\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\001\002\000\004\025\163\001\002\000\052" +
    "\003\uffc4\004\uffc4\007\uffc4\010\uffc4\011\uffc4\025\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\001\002\000\052\003\ufff1\004\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\025\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\001\002\000\052\003\ufff2\004" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\025\ufff2\047\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002" +
    "\000\052\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\025" +
    "\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\052\003\uffef\004\uffef\007\uffef" +
    "\010\uffef\011\uffef\025\uffef\047\uffef\051\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\001\002\000\026\003" +
    "\uffa3\004\uffa3\006\uffa3\012\uffa3\013\uffa3\022\uffa3\046\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\001\002\000\006\021\uffa9\023" +
    "\uffa9\001\002\000\006\021\uffa1\023\uffa1\001\002\000\026" +
    "\003\uffa7\004\uffa7\006\uffa7\012\uffa7\013\uffa7\022\uffa7\046" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\001\002\000\026\003\uffa4" +
    "\004\uffa4\006\uffa4\012\uffa4\013\uffa4\022\uffa4\046\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\001\002\000\026\003\uffa5\004\uffa5" +
    "\006\uffa5\012\uffa5\013\uffa5\022\uffa5\046\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\001\002\000\006\021\uffa2\023\uffa2\001\002" +
    "\000\026\003\uffa6\004\uffa6\006\uffa6\012\uffa6\013\uffa6\022" +
    "\uffa6\046\uffa6\067\uffa6\070\uffa6\071\uffa6\001\002\000\026" +
    "\003\201\004\031\006\027\012\026\013\030\022\035\046" +
    "\034\067\024\070\036\071\037\001\002\000\006\021\uffa8" +
    "\023\uffa8\001\002\000\040\005\044\015\046\016\041\017" +
    "\053\020\051\021\uffaa\023\uffaa\030\057\031\042\032\050" +
    "\033\047\034\055\035\045\044\056\045\043\001\002\000" +
    "\004\021\uffe5\001\002\000\024\004\031\006\027\012\026" +
    "\013\030\022\035\046\034\067\024\070\036\071\037\001" +
    "\002\000\004\023\211\001\002\000\040\005\044\015\046" +
    "\016\041\017\053\020\051\023\uffe3\026\207\030\057\031" +
    "\042\032\050\033\047\034\055\035\045\044\056\045\043" +
    "\001\002\000\024\004\031\006\027\012\026\013\030\022" +
    "\035\046\034\067\024\070\036\071\037\001\002\000\004" +
    "\023\uffe4\001\002\000\004\021\uffe6\001\002\000\052\003" +
    "\ufff4\004\ufff4\007\ufff4\010\ufff4\011\ufff4\025\ufff4\047\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\001\002\000\044\003\137\004\131\007\020\010\130\011" +
    "\115\047\126\051\144\052\120\053\125\056\006\057\016" +
    "\060\010\061\014\063\135\064\116\065\132\066\121\001" +
    "\002\000\024\004\031\006\027\012\026\013\030\022\035" +
    "\046\034\067\024\070\036\071\037\001\002\000\036\005" +
    "\044\015\046\016\041\017\053\020\051\023\216\030\057" +
    "\031\042\032\050\033\047\034\055\035\045\044\056\045" +
    "\043\001\002\000\006\003\220\024\uffcd\001\002\000\004" +
    "\024\221\001\002\000\052\003\uffca\004\uffca\007\uffca\010" +
    "\uffca\011\uffca\025\uffca\047\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\001\002\000\044\003\137" +
    "\004\131\007\020\010\130\011\115\047\126\051\144\052" +
    "\120\053\125\056\006\057\016\060\010\061\014\063\135" +
    "\064\116\065\132\066\121\001\002\000\004\025\223\001" +
    "\002\000\054\003\uffc7\004\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\025\uffc7\047\uffc7\050\224\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\001\002\000\006\003\226\024" +
    "\227\001\002\000\052\003\uffcc\004\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\025\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\001\002\000\052\003\uffc8\004" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\025\uffc8\047\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002" +
    "\000\044\003\137\004\131\007\020\010\130\011\115\047" +
    "\126\051\144\052\120\053\125\056\006\057\016\060\010" +
    "\061\014\063\135\064\116\065\132\066\121\001\002\000" +
    "\004\025\231\001\002\000\052\003\uffc9\004\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\025\uffc9\047\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\004\025" +
    "\233\001\002\000\054\003\uffc7\004\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\025\uffc7\047\uffc7\050\224\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\001\002\000\052\003" +
    "\uffcb\004\uffcb\007\uffcb\010\uffcb\011\uffcb\025\uffcb\047\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\001\002\000\004\054\260\001\002\000\012\004\237\022" +
    "\241\067\024\070\036\001\002\000\020\005\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\023\uff8c\027\uff8c\001\002\000" +
    "\020\005\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\023\uff8b" +
    "\027\uff8b\001\002\000\012\004\237\022\241\067\024\070" +
    "\036\001\002\000\016\005\243\015\245\016\246\017\250" +
    "\020\247\023\244\001\002\000\012\004\237\022\241\067" +
    "\024\070\036\001\002\000\006\003\255\024\256\001\002" +
    "\000\012\004\237\022\241\067\024\070\036\001\002\000" +
    "\012\004\237\022\241\067\024\070\036\001\002\000\012" +
    "\004\237\022\241\067\024\070\036\001\002\000\012\004" +
    "\237\022\241\067\024\070\036\001\002\000\020\005\uff90" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\023\uff90\027\uff90\001" +
    "\002\000\020\005\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\023\uff8f\027\uff8f\001\002\000\020\005\243\015\uff91\016" +
    "\uff91\017\250\020\247\023\uff91\027\uff91\001\002\000\020" +
    "\005\243\015\uff92\016\uff92\017\250\020\247\023\uff92\027" +
    "\uff92\001\002\000\052\003\uffbc\004\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\025\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\001\002\000\004\054\260\001" +
    "\002\000\006\025\uffb6\055\266\001\002\000\014\003\261" +
    "\004\237\022\241\067\024\070\036\001\002\000\006\025" +
    "\uffb9\055\uffb9\001\002\000\016\005\243\015\245\016\246" +
    "\017\250\020\247\027\263\001\002\000\044\003\137\004" +
    "\131\007\020\010\130\011\115\047\126\051\144\052\120" +
    "\053\125\056\006\057\016\060\010\061\014\063\135\064" +
    "\116\065\132\066\121\001\002\000\010\025\uffbb\054\260" +
    "\055\uffbb\001\002\000\006\025\uffba\055\uffba\001\002\000" +
    "\006\003\271\027\272\001\002\000\004\025\270\001\002" +
    "\000\052\003\uffbe\004\uffbe\007\uffbe\010\uffbe\011\uffbe\025" +
    "\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\001\002\000\004\025\uffb7\001\002\000\044" +
    "\003\137\004\131\007\020\010\130\011\115\047\126\051" +
    "\144\052\120\053\125\056\006\057\016\060\010\061\014" +
    "\063\135\064\116\065\132\066\121\001\002\000\004\025" +
    "\uffb8\001\002\000\020\005\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\023\uff8e\027\uff8e\001\002\000\016\005\243\015" +
    "\245\016\246\017\250\020\247\023\276\001\002\000\020" +
    "\005\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\023\uff8d\027" +
    "\uff8d\001\002\000\006\025\uffb6\055\266\001\002\000\004" +
    "\025\301\001\002\000\052\003\uffbd\004\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\025\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\016\002\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000" +
    "\010\025\uffe1\054\uffe1\055\uffe1\001\002\000\052\003\uffed" +
    "\004\uffed\007\uffed\010\uffed\011\uffed\025\uffed\047\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066\uffed\001" +
    "\002\000\036\005\044\015\046\016\041\017\053\020\051" +
    "\021\306\030\057\031\042\032\050\033\047\034\055\035" +
    "\045\044\056\045\043\001\002\000\052\003\uffee\004\uffee" +
    "\007\uffee\010\uffee\011\uffee\025\uffee\047\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\063\uffee\064\uffee\065\uffee\066\uffee\001\002\000" +
    "\044\003\137\004\131\007\020\010\130\011\115\047\126" +
    "\051\144\052\120\053\125\056\006\057\016\060\010\061" +
    "\014\063\135\064\116\065\132\066\121\001\002\000\024" +
    "\004\031\006\027\012\026\013\030\022\035\046\034\067" +
    "\024\070\036\071\037\001\002\000\036\005\044\015\046" +
    "\016\041\017\053\020\051\023\312\030\057\031\042\032" +
    "\050\033\047\034\055\035\045\044\056\045\043\001\002" +
    "\000\006\003\313\024\314\001\002\000\052\003\uffbf\004" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\025\uffbf\047\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002" +
    "\000\044\003\uffc2\004\uffc2\007\uffc2\010\uffc2\011\uffc2\047" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000" +
    "\044\003\137\004\131\007\020\010\130\011\115\047\126" +
    "\051\144\052\120\053\125\056\006\057\016\060\010\061" +
    "\014\063\135\064\116\065\132\066\121\001\002\000\004" +
    "\025\317\001\002\000\052\003\uffc1\004\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\025\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\004\025\321" +
    "\001\002\000\052\003\uffc0\004\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\025\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\001\002\000\052\003\ufff0\004\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\025\ufff0\047\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002\000" +
    "\004\021\uffe9\001\002\000\006\004\325\023\326\001\002" +
    "\000\006\023\uffe7\026\331\001\002\000\004\021\uffea\001" +
    "\002\000\004\023\330\001\002\000\004\021\uffeb\001\002" +
    "\000\004\004\325\001\002\000\004\023\uffe8\001\002\000" +
    "\016\003\336\023\uffcf\056\006\057\016\060\010\061\014" +
    "\001\002\000\004\004\344\001\002\000\004\023\uffd7\001" +
    "\002\000\004\023\uffce\001\002\000\004\023\340\001\002" +
    "\000\004\024\341\001\002\000\044\003\137\004\131\007" +
    "\020\010\130\011\115\047\126\051\144\052\120\053\125" +
    "\056\006\057\016\060\010\061\014\063\135\064\116\065" +
    "\132\066\121\001\002\000\004\025\343\001\002\000\016" +
    "\002\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\006\023\uffd0\026\345\001\002\000\016\003\336" +
    "\023\uffcf\056\006\057\016\060\010\061\014\001\002\000" +
    "\004\023\uffd1\001\002\000\006\022\350\024\351\001\002" +
    "\000\016\003\336\023\uffcf\056\006\057\016\060\010\061" +
    "\014\001\002\000\004\003\352\001\002\000\044\003\137" +
    "\004\131\007\020\010\130\011\115\047\126\051\144\052" +
    "\120\053\125\056\006\057\016\060\010\061\014\063\135" +
    "\064\116\065\132\066\121\001\002\000\004\025\354\001" +
    "\002\000\016\002\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\001\002\000\004\023\356\001\002\000\004\024" +
    "\uffd5\001\002\000\004\024\360\001\002\000\044\003\137" +
    "\004\131\007\020\010\130\011\115\047\126\051\144\052" +
    "\120\053\125\056\006\057\016\060\010\061\014\063\135" +
    "\064\116\065\132\066\121\001\002\000\004\025\362\001" +
    "\002\000\016\002\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\001\002\000\014\003\uffab\021\uffab\022\uffd8\024" +
    "\113\026\367\001\002\000\006\003\365\021\366\001\002" +
    "\000\054\003\uffb2\004\uffb2\007\uffb2\010\uffb2\011\uffb2\025" +
    "\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\001\002\000\054\003\uffb3\004\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\025\uffb3\047\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\004\004\371\001\002\000\006\003\uffad\021\uffad" +
    "\001\002\000\010\003\uffab\021\uffab\026\367\001\002\000" +
    "\006\003\uffac\021\uffac\001\002\000\010\003\uffab\021\uffab" +
    "\026\367\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\020\002\006\004\003\014\016\016\004\017" +
    "\012\033\011\034\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\102\016\101\022\105\023\103\033\011" +
    "\034\010\001\001\000\004\002\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\031\041\032\051\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\053\001\001\000\002\001\001\000\010\005" +
    "\067\041\032\051\024\001\001\000\010\005\037\041\032" +
    "\051\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\053\001\001\000\010\005\066\041\032\051\024" +
    "\001\001\000\002\001\001\000\010\005\065\041\032\051" +
    "\024\001\001\000\010\005\064\041\032\051\024\001\001" +
    "\000\002\001\001\000\010\005\063\041\032\051\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\062" +
    "\041\032\051\024\001\001\000\002\001\001\000\010\005" +
    "\061\041\032\051\024\001\001\000\010\005\060\041\032" +
    "\051\024\001\001\000\002\001\001\000\010\005\057\041" +
    "\032\051\024\001\001\000\002\001\001\000\004\046\053" +
    "\001\001\000\004\046\053\001\001\000\004\046\053\001" +
    "\001\000\004\046\053\001\001\000\004\046\053\001\001" +
    "\000\004\046\053\001\001\000\004\046\053\001\001\000" +
    "\004\046\053\001\001\000\004\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\075\015\073\041" +
    "\032\051\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\053\001\001\000\012\005\075\015\077\041" +
    "\032\051\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\106\023\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\006" +
    "\006\137\011\141\013\122\020\123\021\116\025\132\027" +
    "\140\030\133\031\142\033\121\034\135\036\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\304\041\032\051\024\001\001" +
    "\000\002\001\001\000\034\002\006\006\137\011\141\013" +
    "\122\020\302\021\116\025\132\027\140\030\133\031\142" +
    "\033\121\034\135\036\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\177\040\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\006\006\137\011\141\013\122\020" +
    "\161\021\116\025\132\027\140\030\133\031\142\033\121" +
    "\034\135\036\126\001\001\000\004\036\146\001\001\000" +
    "\002\001\001\000\010\005\150\041\032\051\024\001\001" +
    "\000\004\046\053\001\001\000\004\036\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\156\001\001\000\034\002\006\006\137\011\141\013" +
    "\122\020\157\021\116\025\132\027\140\030\133\031\142" +
    "\033\121\034\135\036\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\201\041\032" +
    "\051\024\001\001\000\002\001\001\000\004\046\053\001" +
    "\001\000\002\001\001\000\012\005\205\010\204\041\032" +
    "\051\024\001\001\000\002\001\001\000\004\046\053\001" +
    "\001\000\012\005\205\010\207\041\032\051\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\006\006\137\011\141\013\122\020\231\021\116" +
    "\025\132\027\140\030\133\031\142\033\121\034\135\036" +
    "\126\001\001\000\010\005\214\041\032\051\024\001\001" +
    "\000\004\046\053\001\001\000\004\056\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\006\006\137" +
    "\011\141\013\122\020\221\021\116\025\132\027\140\030" +
    "\133\031\142\033\121\034\135\036\126\001\001\000\002" +
    "\001\001\000\004\026\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\006\006\137" +
    "\011\141\013\122\020\227\021\116\025\132\027\140\030" +
    "\133\031\142\033\121\034\135\036\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\233\001\001\000\002\001\001\000\004\032\276\001\001" +
    "\000\006\003\241\051\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\274\051\237\001\001\000\002" +
    "\001\001\000\006\003\273\051\237\001\001\000\002\001" +
    "\001\000\006\003\253\051\237\001\001\000\006\003\252" +
    "\051\237\001\001\000\006\003\251\051\237\001\001\000" +
    "\006\003\250\051\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\256\001\001\000\004\012\266\001\001" +
    "\000\006\003\261\051\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\006\006\137\011\141\013\122" +
    "\020\263\021\116\025\132\027\140\030\133\031\142\033" +
    "\121\034\135\036\126\001\001\000\004\032\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\006\006\137" +
    "\011\141\013\122\020\272\021\116\025\132\027\140\030" +
    "\133\031\142\033\121\034\135\036\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\053\001\001\000\002\001\001\000\034" +
    "\002\006\006\137\011\141\013\122\020\317\021\116\025" +
    "\132\027\140\030\133\031\142\033\121\034\135\036\126" +
    "\001\001\000\010\005\310\041\032\051\024\001\001\000" +
    "\004\046\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\314\001\001\000\034\002\006\006\137\011" +
    "\141\013\122\020\315\021\116\025\132\027\140\030\133" +
    "\031\142\033\121\034\135\036\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\331\001\001\000\002\001" +
    "\001\000\006\002\333\024\334\001\001\000\002\001\001" +
    "\000\004\054\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\006\006\137\011\141" +
    "\013\122\020\341\021\116\025\132\027\140\030\133\031" +
    "\142\033\121\034\135\036\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\333\024" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\333\024\354\001\001\000\002\001\001\000\034\002" +
    "\006\006\137\011\141\013\122\020\352\021\116\025\132" +
    "\027\140\030\133\031\142\033\121\034\135\036\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\356\001\001\000\002\001\001\000\034\002" +
    "\006\006\137\011\141\013\122\020\360\021\116\025\132" +
    "\027\140\030\133\031\142\033\121\034\135\036\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\367" +
    "\053\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\371\001\001\000\002\001\001\000\004\052\367\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void semantic_error(Symbol sym) {
        System.err.println("Error semántico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }
        
    public Symbol getS(){
        return this.sym;
    };

    public Generador generador = new Generador();

    // Para manejo de bucles
    private int contadorBucles = 0;

    public void iniciarBucle() {
        contadorBucles++;
    }

    public void finalizarBucle() {
        contadorBucles--;
    }

    public boolean dentroDeBucle() {
        return contadorBucles > 0;
    }

    // Métodos para la tabla de símbolos
    private TablaSimbolos ts = new TablaSimbolos();
    public PilaSemantica pilaSemantica = new PilaSemantica();
    public PilaSemantica pilaSemantica2 = new PilaSemantica();

    public void imprimirTablasSimbolos() {
        ts.imprimirTablas();
    }

    // Para manejo del ambito
    private String ambito = "global";
    public void setAmbito (String amb){
        //System.out.println("dentro del setAmbito" + amb);
        ambito = amb;
    }

    // Funciones adicionales
    public void insertarConstante (String tipo, String id, Object valor){
        //System.out.println("tipo> "+tipo+", id> "+id+", valor> "+valor);
        String mensaje = ts.insertarConstante(new Simbolo("CONST", tipo, id, valor, ambito));
        if (mensaje != null){
            semantic_error (cur_token);
            System.err.println(mensaje);
        } 
        pilaSemantica.clear ();
        //pilaSemantica.print ();
        //System.out.println("despues del insert constante\n");
    }

    public void insertarVariables (){
        String tipo = pilaSemantica.buscarTipoVar ();
        if (tipo!=null){
            while (!pilaSemantica.isEmpty() && pilaSemantica.get(pilaSemantica.size() - 1).getTipo().equals("")) {
                RegistroSemantico registro = pilaSemantica.pop_end();
                String mensaje = ts.insertarVar (new Simbolo ("VAR", tipo, registro.getId(), ambito));
                if (mensaje != null){
                    semantic_error (cur_token);
                    System.err.println(mensaje);
                } 
            }
        }
        pilaSemantica.pop_end ();
        pilaSemantica.clear ();
        //pilaSemantica.print ();
        //System.out.println("despues del insert variable\n");
    }

    public void insertarFuncion (String tipo, String id){
        if (!ts.existeFuncion (id)){
            ts.insertarFuncion (new Simbolo ("FUNCION", tipo, id));
            setAmbito (id);
        } else {
            semantic_error (cur_token);
            System.err.println("La función'" + id + "' ya está definida.");
            setAmbito (null);
        }
    }

    public void verificarVariableDefinida(String id, Object valor) {
        //System.out.println("dentro del verificar, id>" + id + ", ambito> "+ambito);
        if (!ts.contiene(id, ambito)) {   
            semantic_error (cur_token);
            System.err.println("La variable '" + id + "' no está definida.");
            String tipo = pilaSemantica.buscarTipoVar ();
            if (tipo!=null) {
                if (valor != null) {
                    if (ambito != null)  ts.insertarVar (new Simbolo ("VAR", tipo, id, valor, ambito));
                    else ts.insertarVar (new Simbolo ("VAR", tipo, id, valor));
                } else {
                    if (ambito != null)  ts.insertarVar (new Simbolo ("VAR", tipo, id, ambito));
                    else ts.insertarVar (new Simbolo ("VAR", tipo, id));
                }
            }else System.err.println("La variable '" + id + "' no se pudo insertar a la tabla de simbolos porque no tiene un tipo especificado.");
        } 
    }

    public void insertarParametros (){
        int cantParametros = 0;
        //System.out.println("dentro del insertarParametros, ambito> "+ambito);
        //pilaSemantica.print ();
        while (!pilaSemantica.isEmpty() && pilaSemantica.get(pilaSemantica.size() - 1).getTipo().equals("PARAMETRO")) {
            RegistroSemantico registro = pilaSemantica.pop_end();
            String mensaje = ts.insertarVar (new Simbolo (registro.getTipo(), registro.getTipo_Var(), registro.getId(), ambito));
            if (mensaje != null){
                semantic_error (cur_token);
                System.err.println(mensaje);
            } else cantParametros ++;
        }
        Simbolo funcion = ts.obtenerSimbolo (ambito);
        if (funcion!=null)funcion.setValor (cantParametros);
    }


    public void asignacion (String id, String op, String expr) {
        if (ts.contiene(id, ambito)) {   
            Simbolo simbolo = ts.obtenerSimbolo (id);
            if (expr == null){  // es una op_incremento, se valida que la var este inicializada
                if (simbolo.getValor() != null){  // si esta inicializada
                    generador.opIncremento (id, op);
                } else {
                    semantic_error (cur_token);
                    System.err.println("La variable '" + id + "' no está inicializada por lo que no se puede ejecutar la operación de incremento.");
                }
            } else {

            }
        } else {
            semantic_error (cur_token);
            System.err.println("La variable '" + id + "' no está definida.");
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {


    public class ExprValue {
        public boolean esConstante;
        public Object valor;
        public String tipo; // "int", "float", etc.

        public ExprValue(boolean esConstante, Object valor, String tipo) {
            this.esConstante = esConstante;
            this.valor = valor;
            this.tipo = tipo;
        }
    }

    public class Pair<K, V> {
        private K key;
        private V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() { return key; }
        public V getValue() { return value; }
    }

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= globales 
            {
              Object RESULT =null;
		 imprimirTablasSimbolos(); generador.generarArchivo(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= global_decl_list funciones 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("globales",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_decl ::= variable 
            {
              Object RESULT =null;
		 ts.global (); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_decl ::= constante 
            {
              Object RESULT =null;
		 ts.global (); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_decl ::= error 
            {
              Object RESULT =null;
		 report_error("Error in global declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funciones",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= funcion 
            {
              Object RESULT =null;
		 generador.declararGlobales(ts); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funciones",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= estru_control 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= BREAK SEMI 
            {
              Object RESULT =null;
		 if (!dentroDeBucle()) semantic_error(cur_token); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= read SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= write SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		 if (!dentroDeBucle()) semantic_error(cur_token); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= DO SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error 
            {
              Object RESULT =null;
		 report_error("Invalid instruction."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read ::= READ LPAREN read_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // read ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // read ::= READ error 
            {
              Object RESULT =null;
		 report_error("Invalid 'read' parameters."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // read_parameter ::= ID COMMA read_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // read_parameter ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // write ::= WRITE LPAREN write_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // write ::= WRITE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'write' parameters."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write_parameter ::= expr COMMA write_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write_parameter ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque ::= instruccion bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error in expression list."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estru_control ::= if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estru_control ::= for 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estru_control ::= while 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estru_control ::= switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 insertarFuncion (tipo.toString(), id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
 insertarParametros (); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= tipo_var ID NT$0 LPAREN parametro_list NT$1 RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
 setAmbito (id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcion ::= VOID ID LPAREN parametro_list RPAREN NT$2 LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		
                //pilaSemantica.push_init(new RegistroSemantico ("FUNCION", tipo.toString(), id.toString()));
                // falta meter funcion y sus parametros a ts
                // pilaSemantica.print ();
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcion ::= tipo_var ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid function declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funcion ::= VOID ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid function declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_list ::= tipo_var ID COMMA parametro_list 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 
                    pilaSemantica.push_end (new RegistroSemantico ("PARAMETRO", tipo, id.toString(), ambito)); 
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_list ::= tipo_var ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
                    pilaSemantica.push_end (new RegistroSemantico ("PARAMETRO", tipo, id.toString(), ambito)); 
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error in parameter list."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$3 ::= 
            {
              Object RESULT =null;
 /*System.out.println("getAmbito>"+ambito); */generador.estructuraIf (pilaSemantica); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= IF LPAREN expr RPAREN NT$3 LBRACKET bloque RBRACKET else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if ::= IF error bloque RBRACKET else 
            {
              Object RESULT =null;
		 report_error("Invalid expression in 'if' condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if ::= IF LPAREN expr RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'if' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // else ::= ELSE LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // else ::= ELSE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'else' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // else ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$4 ::= 
            {
              Object RESULT =null;
 iniciarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET NT$4 bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 finalizarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for ::= FOR error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'for' loop condition."); finalizarBucle();  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'for' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$5 ::= 
            {
              Object RESULT =null;
 iniciarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // while ::= WHILE LPAREN expr RPAREN LBRACKET NT$5 bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 finalizarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while ::= WHILE error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'while' loop condition."); finalizarBucle();  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while ::= WHILE LPAREN expr RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'while' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // switch ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // switch ::= SWITCH error case_list case_end RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'switch' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // switch ::= SWITCH LPAREN arit_exp RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'switch' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_list ::= CASE arit_exp COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_list ::= CASE arit_exp COLON bloque case_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case_list ::= CASE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'case' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case_end ::= DEFAULT COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_end ::= DEFAULT error 
            {
              Object RESULT =null;
		 report_error("Invalid 'default' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_end ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // constante ::= CONST tipo_var ID EQ expr SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                insertarConstante(tipo, id.toString(), valor);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constante ::= CONST tipo_var ID EQ expr error 
            {
              Object RESULT =null;
		 report_error("Missing semicolon in constant declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable ::= tipo_var id_list SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
                pilaSemantica.push_init(new RegistroSemantico (tipo));
                insertarVariables ();
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable ::= tipo_var id_list error 
            {
              Object RESULT =null;
		 report_error("Missing semicolon in variable declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_var ::= TYPE_INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_var ::= TYPE_LONG 
            {
              String RESULT =null;
		 RESULT = "long"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_var ::= TYPE_SHORT 
            {
              String RESULT =null;
		 RESULT = "short"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_var ::= TYPE_CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // id_list ::= ID next_id_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                pilaSemantica.push_end (new RegistroSemantico (id.toString()));
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_list",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // next_id_list ::= COMMA ID next_id_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                    pilaSemantica.push_end (new RegistroSemantico (id.toString()));
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // next_id_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignacion ::= ID op_asignacion expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                verificarVariableDefinida(id.toString(), valor);
                // falta código adicional para manejo de asignación
             
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacion ::= ID op_incremento 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                asignacion (id.toString(), op.toString(), null);

                // falta código adicional para manejo de asignación
             
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacion ::= ID op_asignacion error 
            {
              Object RESULT =null;
		 report_error("Invalid assignment expression."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_asignacion ::= EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_asignacion ::= PLUS_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op_asignacion ::= MINUS_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op_asignacion ::= TIMES_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op_asignacion ::= DIV_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op_incremento ::= PLUS_PLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op_incremento ::= MINUS_MINUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr DIV expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= expr MOD expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
            // Implementar lógica para operadores lógicos
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= NOT expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= expr op_relacional expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 /*
            System.out.println("l> "+left);
            System.out.println("operador> "+op);
            System.out.println("r> "+right);*/
            //pilaSemantica.print ();
            //System.out.println("DESPUESITO ");
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= ID LPAREN expr_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 
            // Llamada a función
           
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
            verificarVariableDefinida(id.toString(), null);
            pilaSemantica.push_end (new RegistroSemantico (true, "VAR", id.toString()));
            RESULT = id;
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
            pilaSemantica.push_end (new RegistroSemantico (true, "CONST", lit.toString()));
            RESULT = lit;
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= number 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
            pilaSemantica.push_end (new RegistroSemantico (true, "CONST", num.toString()));
            RESULT = num;
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ExprValue(false, null, null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ExprValue(false, null, null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ExprValue(false, null, null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arit_exp ::= arit_exp DIV arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ExprValue(false, null, null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arit_exp ::= arit_exp MOD arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ExprValue(false, null, null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // arit_exp ::= LPAREN arit_exp RPAREN 
            {
              ExprValue RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ExprValue exp = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = exp; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arit_exp ::= ID 
            {
              ExprValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
                verificarVariableDefinida(id.toString(), null);
                Simbolo simbolo = ts.obtenerSimbolo(id.toString());
                if (simbolo != null && simbolo.esConstante()) {
                    RESULT = new ExprValue(true, simbolo.getValor(), simbolo.getTipo_var());
                } else {
                    RESULT = new ExprValue(false, null, null);
                }
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arit_exp ::= number 
            {
              ExprValue RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ExprValue(true, num, "int"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_relacional ::= EQ_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 pilaSemantica.push_end (new RegistroSemantico (op.toString())); RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_relacional ::= GT_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 pilaSemantica.push_end (new RegistroSemantico (op.toString())); RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_relacional ::= GT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 pilaSemantica.push_end (new RegistroSemantico (op.toString())); RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_relacional ::= LT_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 pilaSemantica.push_end (new RegistroSemantico (op.toString())); RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op_relacional ::= LT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 pilaSemantica.push_end (new RegistroSemantico (op.toString())); RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op_relacional ::= NOT_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 pilaSemantica.push_end (new RegistroSemantico (op.toString())); RESULT = op; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // literal ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s.toString(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // number ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // number ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
