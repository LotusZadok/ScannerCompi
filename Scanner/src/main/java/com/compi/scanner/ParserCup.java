
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi.scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\011\004\000\002\011\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\005\000" +
    "\002\013\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\005\000\002\010\004\000" +
    "\002\003\006\000\002\003\005\000\002\003\004\000\002" +
    "\004\005\000\002\004\003\000\002\006\006\000\002\006" +
    "\004\000\002\005\005\000\002\005\003\000\002\015\003" +
    "\000\002\015\004\000\002\012\005\000\002\012\003\000" +
    "\002\012\002\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\012\000\002\017" +
    "\011\000\002\017\012\000\002\017\012\000\002\017\011" +
    "\000\002\017\012\000\002\020\006\000\002\020\004\000" +
    "\002\020\002\000\002\021\012\000\002\021\010\000\002" +
    "\021\011\000\002\022\006\000\002\022\005\000\002\022" +
    "\002\000\002\023\015\000\002\023\007\000\002\023\014" +
    "\000\002\024\011\000\002\024\007\000\002\024\010\000" +
    "\002\024\011\000\002\025\012\000\002\025\010\000\002" +
    "\025\011\000\002\026\006\000\002\026\007\000\002\007" +
    "\005\000\002\007\002\000\002\027\010\000\002\027\007" +
    "\000\002\030\005\000\002\030\006\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\051\005\000\002\051\002\000\002\033" +
    "\006\000\002\033\005\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\005\000\002\040\003\000\002\041\005" +
    "\000\002\041\003\000\002\042\004\000\002\042\005\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\043\005\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\045\005\000\002\045\005\000\002\045\003\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\047\005\000\002\047\003\000\002\047" +
    "\003\000\002\047\006\000\002\050\003\000\002\050\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\020\003\017\007\022\056\006\057\020\060" +
    "\011\061\015\062\013\001\002\000\004\002\u0104\001\002" +
    "\000\022\002\ufffd\003\ufffd\007\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\001\002\000\004\004\uffb8\001\002" +
    "\000\004\004\357\001\002\000\022\002\ufffa\003\ufffa\007" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002" +
    "\000\004\004\uffb6\001\002\000\022\002\ufffc\003\ufffc\007" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\004\004\123\001\002\000\022\002\ufffb\003\ufffb\007" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002" +
    "\000\004\004\uffb5\001\002\000\004\002\000\001\002\000" +
    "\024\002\ufff8\003\ufff8\004\121\007\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\001\002\000\004\004\uffb7\001" +
    "\002\000\022\002\uffff\003\017\007\022\056\006\057\020" +
    "\060\011\061\015\062\013\001\002\000\012\056\006\057" +
    "\020\060\011\061\015\001\002\000\004\004\024\001\002" +
    "\000\006\003\026\014\025\001\002\000\024\004\041\006" +
    "\044\012\036\013\050\022\037\046\035\067\033\070\045" +
    "\071\034\001\002\000\004\021\027\001\002\000\056\002" +
    "\uffbb\003\uffbb\004\uffbb\007\uffbb\010\uffbb\011\uffbb\025\uffbb" +
    "\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\044\005\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\023\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\044" +
    "\uff8b\045\uff8b\001\002\000\004\021\117\001\002\000\014" +
    "\021\uffa0\023\uffa0\026\uffa0\044\uffa0\045\uffa0\001\002\000" +
    "\044\005\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\023\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033" +
    "\uff88\034\uff88\035\uff88\044\uff88\045\uff88\001\002\000\010" +
    "\021\uffa5\023\uffa5\026\uffa5\001\002\000\020\004\041\012" +
    "\036\013\050\022\037\046\035\067\033\070\045\001\002" +
    "\000\014\021\uff9c\023\uff9c\026\uff9c\044\uff9c\045\uff9c\001" +
    "\002\000\020\004\041\012\036\013\050\022\037\046\035" +
    "\067\033\070\045\001\002\000\014\021\uff9d\023\uff9d\026" +
    "\uff9d\044\uff9d\045\uff9d\001\002\000\046\005\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\105\023\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\044\uff8a\045\uff8a\001\002\000\012\021\uffa7\023" +
    "\uffa7\026\uffa7\044\103\001\002\000\030\015\061\016\056" +
    "\021\uffa6\023\uffa6\026\uffa6\030\066\031\057\032\063\033" +
    "\062\034\065\035\060\001\002\000\010\021\uffa4\023\uffa4" +
    "\026\uffa4\001\002\000\044\005\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\021\uff87\023\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\044\uff87\045" +
    "\uff87\001\002\000\044\005\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\020\uff8d\021\uff8d\023\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\044\uff8d\045\uff8d" +
    "\001\002\000\044\005\074\015\uff91\016\uff91\017\076\020" +
    "\075\021\uff91\023\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\044\uff91\045\uff91\001" +
    "\002\000\014\021\uff9b\023\uff9b\026\uff9b\044\uff9b\045\uff9b" +
    "\001\002\000\010\021\uffa8\023\uffa8\026\uffa8\001\002\000" +
    "\014\021\uffa2\023\uffa2\026\uffa2\044\uffa2\045\053\001\002" +
    "\000\020\004\041\012\036\013\050\022\037\046\035\067" +
    "\033\070\045\001\002\000\022\015\061\016\056\030\066" +
    "\031\057\032\063\033\062\034\065\035\060\001\002\000" +
    "\014\021\uffa1\023\uffa1\026\uffa1\044\uffa1\045\uffa1\001\002" +
    "\000\012\004\041\022\067\067\033\070\045\001\002\000" +
    "\012\004\uff98\022\uff98\067\uff98\070\uff98\001\002\000\012" +
    "\004\uff94\022\uff94\067\uff94\070\uff94\001\002\000\012\004" +
    "\041\022\067\067\033\070\045\001\002\000\012\004\uff96" +
    "\022\uff96\067\uff96\070\uff96\001\002\000\012\004\uff97\022" +
    "\uff97\067\uff97\070\uff97\001\002\000\012\004\041\022\067" +
    "\067\033\070\045\001\002\000\012\004\uff95\022\uff95\067" +
    "\uff95\070\uff95\001\002\000\012\004\uff99\022\uff99\067\uff99" +
    "\070\uff99\001\002\000\012\004\041\022\067\067\033\070" +
    "\045\001\002\000\020\015\061\016\056\021\uff9a\023\uff9a" +
    "\026\uff9a\044\uff9a\045\uff9a\001\002\000\010\015\061\016" +
    "\056\023\072\001\002\000\044\005\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\023\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\044\uff8c" +
    "\045\uff8c\001\002\000\044\005\074\015\uff93\016\uff93\017" +
    "\076\020\075\021\uff93\023\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\044\uff93\045" +
    "\uff93\001\002\000\012\004\041\022\067\067\033\070\045" +
    "\001\002\000\012\004\041\022\067\067\033\070\045\001" +
    "\002\000\012\004\041\022\067\067\033\070\045\001\002" +
    "\000\044\005\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\023\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\035\uff90\044\uff90\045\uff90\001\002\000" +
    "\044\005\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\023\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\044\uff8f\045\uff8f\001\002\000\044" +
    "\005\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\023" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\035\uff8e\044\uff8e\045\uff8e\001\002\000\044\005" +
    "\074\015\uff92\016\uff92\017\076\020\075\021\uff92\023\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\uff92\044\uff92\045\uff92\001\002\000\020\004\041" +
    "\012\036\013\050\022\037\046\035\067\033\070\045\001" +
    "\002\000\014\021\uffa3\023\uffa3\026\uffa3\044\uffa3\045\053" +
    "\001\002\000\026\004\041\006\044\012\036\013\050\022" +
    "\037\023\uffde\046\035\067\033\070\045\071\034\001\002" +
    "\000\006\023\uffdf\026\111\001\002\000\004\023\110\001" +
    "\002\000\044\005\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\023\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\033\uff89\034\uff89\035\uff89\044\uff89\045\uff89\001\002" +
    "\000\026\004\041\006\044\012\036\013\050\022\037\023" +
    "\uffde\046\035\067\033\070\045\071\034\001\002\000\004" +
    "\023\uffe0\001\002\000\024\015\061\016\056\023\072\030" +
    "\066\031\057\032\063\033\062\034\065\035\060\001\002" +
    "\000\006\023\115\044\103\001\002\000\014\021\uff9e\023" +
    "\uff9e\026\uff9e\044\uff9e\045\uff9e\001\002\000\014\021\uff9f" +
    "\023\uff9f\026\uff9f\044\uff9f\045\uff9f\001\002\000\056\002" +
    "\uffbc\003\uffbc\004\uffbc\007\uffbc\010\uffbc\011\uffbc\025\uffbc" +
    "\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\001\002\000\022\002\ufffe\003\ufffe\007" +
    "\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002" +
    "\000\004\021\122\001\002\000\022\002\ufff9\003\ufff9\007" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002" +
    "\000\006\003\124\022\125\001\002\000\016\021\353\024" +
    "\uffd1\056\006\057\020\060\011\061\015\001\002\000\014" +
    "\023\uffd1\056\006\057\020\060\011\061\015\001\002\000" +
    "\004\004\347\001\002\000\004\023\130\001\002\000\006" +
    "\003\131\024\132\001\002\000\044\004\146\007\022\010" +
    "\147\011\133\047\144\051\161\052\136\053\143\056\006" +
    "\057\020\060\011\061\015\062\013\063\153\064\134\065" +
    "\150\066\137\001\002\000\044\004\146\007\022\010\147" +
    "\011\133\047\144\051\161\052\136\053\143\056\006\057" +
    "\020\060\011\061\015\062\013\063\153\064\134\065\150" +
    "\066\137\001\002\000\006\003\335\022\336\001\002\000" +
    "\004\021\334\001\002\000\054\003\ufff7\004\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\025\ufff7\047\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\001\002\000" +
    "\006\003\313\022\314\001\002\000\026\004\041\006\044" +
    "\012\036\013\050\021\311\022\037\046\035\067\033\070" +
    "\045\071\034\001\002\000\054\003\ufff6\004\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\025\ufff6\047\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002\000" +
    "\054\003\uffe2\004\146\007\022\010\147\011\133\025\uffe2" +
    "\047\144\051\161\052\136\053\143\054\uffe2\055\uffe2\056" +
    "\006\057\020\060\011\061\015\062\013\063\153\064\134" +
    "\065\150\066\137\001\002\000\004\025\306\001\002\000" +
    "\006\003\257\022\260\001\002\000\006\003\232\022\233" +
    "\001\002\000\054\003\ufff4\004\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\025\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\001\002\000\020\014\221" +
    "\036\225\037\223\040\222\041\216\042\224\043\220\001" +
    "\002\000\006\003\207\022\210\001\002\000\004\021\206" +
    "\001\002\000\054\003\uffdd\004\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\025\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\001\002\000\054\003\uffdb" +
    "\004\uffdb\007\uffdb\010\uffdb\011\uffdb\025\uffdb\047\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\001\002\000\004\021\205\001\002\000\054\003\ufff5" +
    "\004\ufff5\007\ufff5\010\ufff5\011\ufff5\025\ufff5\047\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\001\002\000\004\021\204\001\002\000\054\003\uffdc" +
    "\004\uffdc\007\uffdc\010\uffdc\011\uffdc\025\uffdc\047\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\001\002\000\004\021\203\001\002\000\054\003\uffda" +
    "\004\uffda\007\uffda\010\uffda\011\uffda\025\uffda\047\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\001\002\000\006\003\163\022\164\001\002\000\054" +
    "\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\025\ufff3\047" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\004\024\200\001\002\000\004" +
    "\004\146\001\002\000\004\021\166\001\002\000\024\004" +
    "\041\006\044\012\036\013\050\022\037\046\035\067\033" +
    "\070\045\071\034\001\002\000\004\021\170\001\002\000" +
    "\004\004\146\001\002\000\004\023\172\001\002\000\006" +
    "\003\173\024\174\001\002\000\004\025\177\001\002\000" +
    "\044\004\146\007\022\010\147\011\133\047\144\051\161" +
    "\052\136\053\143\056\006\057\020\060\011\061\015\062" +
    "\013\063\153\064\134\065\150\066\137\001\002\000\004" +
    "\025\176\001\002\000\054\003\uffca\004\uffca\007\uffca\010" +
    "\uffca\011\uffca\025\uffca\047\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002\000\054" +
    "\003\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8\025\uffc8\047" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\001\002\000\044\004\146\007\022\010\147" +
    "\011\133\047\144\051\161\052\136\053\143\056\006\057" +
    "\020\060\011\061\015\062\013\063\153\064\134\065\150" +
    "\066\137\001\002\000\004\025\202\001\002\000\054\003" +
    "\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\025\uffc9\047\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\001\002\000\054\003\ufff0\004\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\025\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002\000\054" +
    "\003\ufff1\004\ufff1\007\ufff1\010\ufff1\011\ufff1\025\ufff1\047" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\001\002\000\054\003\ufff2\004\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\025\ufff2\047\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002\000" +
    "\054\003\uffee\004\uffee\007\uffee\010\uffee\011\uffee\025\uffee" +
    "\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\001\002\000\004\021\uffe5\001\002\000" +
    "\024\004\041\006\044\012\036\013\050\022\037\046\035" +
    "\067\033\070\045\071\034\001\002\000\006\023\uffe3\026" +
    "\214\001\002\000\004\023\213\001\002\000\004\021\uffe6" +
    "\001\002\000\024\004\041\006\044\012\036\013\050\022" +
    "\037\046\035\067\033\070\045\071\034\001\002\000\004" +
    "\023\uffe4\001\002\000\024\004\uffab\006\uffab\012\uffab\013" +
    "\uffab\022\uffab\046\uffab\067\uffab\070\uffab\071\uffab\001\002" +
    "\000\004\021\231\001\002\000\004\021\uffa9\001\002\000" +
    "\024\004\uffaf\006\uffaf\012\uffaf\013\uffaf\022\uffaf\046\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\001\002\000\024\004\uffac\006" +
    "\uffac\012\uffac\013\uffac\022\uffac\046\uffac\067\uffac\070\uffac" +
    "\071\uffac\001\002\000\024\004\uffad\006\uffad\012\uffad\013" +
    "\uffad\022\uffad\046\uffad\067\uffad\070\uffad\071\uffad\001\002" +
    "\000\004\021\uffaa\001\002\000\024\004\uffae\006\uffae\012" +
    "\uffae\013\uffae\022\uffae\046\uffae\067\uffae\070\uffae\071\uffae" +
    "\001\002\000\024\004\041\006\044\012\036\013\050\022" +
    "\037\046\035\067\033\070\045\071\034\001\002\000\004" +
    "\021\230\001\002\000\060\003\uffb1\004\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\021\uffb1\023\uffb1\025\uffb1\047\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\001\002\000\060\003\uffb0\004\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\021\uffb0\023\uffb0\025\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002" +
    "\000\004\024\253\001\002\000\024\004\041\006\044\012" +
    "\036\013\050\022\037\046\035\067\033\070\045\071\034" +
    "\001\002\000\004\023\235\001\002\000\006\003\236\024" +
    "\237\001\002\000\004\025\251\001\002\000\044\004\146" +
    "\007\022\010\147\011\133\047\144\051\161\052\136\053" +
    "\143\056\006\057\020\060\011\061\015\062\013\063\153" +
    "\064\134\065\150\066\137\001\002\000\004\025\241\001" +
    "\002\000\056\003\uffcb\004\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\025\uffcb\047\uffcb\050\242\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\006\003" +
    "\244\024\245\001\002\000\054\003\uffd0\004\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\025\uffd0\047\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000" +
    "\004\025\250\001\002\000\044\004\146\007\022\010\147" +
    "\011\133\047\144\051\161\052\136\053\143\056\006\057" +
    "\020\060\011\061\015\062\013\063\153\064\134\065\150" +
    "\066\137\001\002\000\004\025\247\001\002\000\054\003" +
    "\uffcd\004\uffcd\007\uffcd\010\uffcd\011\uffcd\025\uffcd\047\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\001\002\000\054\003\uffcc\004\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\025\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000\056" +
    "\003\uffcb\004\uffcb\007\uffcb\010\uffcb\011\uffcb\025\uffcb\047" +
    "\uffcb\050\242\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\001\002\000\054\003\uffce\004\uffce" +
    "\007\uffce\010\uffce\011\uffce\025\uffce\047\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\001" +
    "\002\000\044\004\146\007\022\010\147\011\133\047\144" +
    "\051\161\052\136\053\143\056\006\057\020\060\011\061" +
    "\015\062\013\063\153\064\134\065\150\066\137\001\002" +
    "\000\004\025\255\001\002\000\056\003\uffcb\004\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\025\uffcb\047\uffcb\050\242\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\001\002\000\054\003\uffcf\004\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\025\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\004\024\302" +
    "\001\002\000\012\004\041\022\067\067\033\070\045\001" +
    "\002\000\010\015\061\016\056\023\262\001\002\000\006" +
    "\024\265\054\264\001\002\000\004\003\300\001\002\000" +
    "\012\004\041\022\067\067\033\070\045\001\002\000\004" +
    "\054\264\001\002\000\006\025\uffbd\055\267\001\002\000" +
    "\004\027\272\001\002\000\004\025\271\001\002\000\054" +
    "\003\uffc3\004\uffc3\007\uffc3\010\uffc3\011\uffc3\025\uffc3\047" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\001\002\000\044\004\146\007\022\010\147" +
    "\011\133\047\144\051\161\052\136\053\143\056\006\057" +
    "\020\060\011\061\015\062\013\063\153\064\134\065\150" +
    "\066\137\001\002\000\004\025\uffbe\001\002\000\010\015" +
    "\061\016\056\027\275\001\002\000\044\004\146\007\022" +
    "\010\147\011\133\047\144\051\161\052\136\053\143\056" +
    "\006\057\020\060\011\061\015\062\013\063\153\064\134" +
    "\065\150\066\137\001\002\000\012\003\uffc0\025\uffc0\054" +
    "\264\055\uffc0\001\002\000\010\003\uffbf\025\uffbf\055\uffbf" +
    "\001\002\000\004\025\301\001\002\000\054\003\uffc1\004" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\025\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\001\002\000\004\054\264\001\002\000\006\025\uffbd\055" +
    "\267\001\002\000\004\025\305\001\002\000\054\003\uffc2" +
    "\004\uffc2\007\uffc2\010\uffc2\011\uffc2\025\uffc2\047\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\001\002\000\056\002\uffd6\003\uffd6\004\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\025\uffd6\047\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\012\003\uffe1\025\uffe1\054\uffe1\055\uffe1\001\002\000\004" +
    "\021\312\001\002\000\054\003\uffec\004\uffec\007\uffec\010" +
    "\uffec\011\uffec\025\uffec\047\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\001\002\000\054" +
    "\003\uffed\004\uffed\007\uffed\010\uffed\011\uffed\025\uffed\047" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\001\002\000\004\024\331\001\002\000\026" +
    "\003\316\004\041\006\044\012\036\013\050\022\037\046" +
    "\035\067\033\070\045\071\034\001\002\000\004\023\323" +
    "\001\002\000\004\023\317\001\002\000\004\024\320\001" +
    "\002\000\044\004\146\007\022\010\147\011\133\047\144" +
    "\051\161\052\136\053\143\056\006\057\020\060\011\061" +
    "\015\062\013\063\153\064\134\065\150\066\137\001\002" +
    "\000\004\025\322\001\002\000\054\003\uffc4\004\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\025\uffc4\047\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002" +
    "\000\006\003\324\024\325\001\002\000\004\025\330\001" +
    "\002\000\044\004\146\007\022\010\147\011\133\047\144" +
    "\051\161\052\136\053\143\056\006\057\020\060\011\061" +
    "\015\062\013\063\153\064\134\065\150\066\137\001\002" +
    "\000\004\025\327\001\002\000\054\003\uffc7\004\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\025\uffc7\047\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\001\002" +
    "\000\054\003\uffc5\004\uffc5\007\uffc5\010\uffc5\011\uffc5\025" +
    "\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\001\002\000\044\004\146\007\022" +
    "\010\147\011\133\047\144\051\161\052\136\053\143\056" +
    "\006\057\020\060\011\061\015\062\013\063\153\064\134" +
    "\065\150\066\137\001\002\000\004\025\333\001\002\000" +
    "\054\003\uffc6\004\uffc6\007\uffc6\010\uffc6\011\uffc6\025\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\001\002\000\054\003\uffef\004\uffef\007" +
    "\uffef\010\uffef\011\uffef\025\uffef\047\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\001\002" +
    "\000\004\021\uffe9\001\002\000\006\004\337\023\340\001" +
    "\002\000\006\023\uffe7\026\343\001\002\000\004\021\uffea" +
    "\001\002\000\004\023\342\001\002\000\004\021\uffeb\001" +
    "\002\000\004\004\337\001\002\000\004\023\uffe8\001\002" +
    "\000\004\025\346\001\002\000\056\002\uffd4\003\uffd4\004" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\025\uffd4\047\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\010\023\uffd2\024\uffd2\026\350\001\002\000" +
    "\016\023\uffd1\024\uffd1\056\006\057\020\060\011\061\015" +
    "\001\002\000\006\023\uffd3\024\uffd3\001\002\000\004\024" +
    "\354\001\002\000\056\002\uffb9\003\uffb9\004\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\025\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000" +
    "\044\004\146\007\022\010\147\011\133\047\144\051\161" +
    "\052\136\053\143\056\006\057\020\060\011\061\015\062" +
    "\013\063\153\064\134\065\150\066\137\001\002\000\004" +
    "\025\356\001\002\000\056\002\uffd5\003\uffd5\004\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\025\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\001\002" +
    "\000\012\003\363\021\uffb2\022\365\026\362\001\002\000" +
    "\004\021\361\001\002\000\056\002\uffba\003\uffba\004\uffba" +
    "\007\uffba\010\uffba\011\uffba\025\uffba\047\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001" +
    "\002\000\004\004\u0102\001\002\000\014\024\uffd1\056\006" +
    "\057\020\060\011\061\015\001\002\000\004\021\uffb4\001" +
    "\002\000\014\023\uffd1\056\006\057\020\060\011\061\015" +
    "\001\002\000\004\023\367\001\002\000\006\003\370\024" +
    "\371\001\002\000\044\004\146\007\022\010\147\011\133" +
    "\047\144\051\161\052\136\053\143\056\006\057\020\060" +
    "\011\061\015\062\013\063\153\064\134\065\150\066\137" +
    "\001\002\000\044\004\146\007\022\010\147\011\133\047" +
    "\144\051\161\052\136\053\143\056\006\057\020\060\011" +
    "\061\015\062\013\063\153\064\134\065\150\066\137\001" +
    "\002\000\004\025\373\001\002\000\056\002\uffd9\003\uffd9" +
    "\004\uffd9\007\uffd9\010\uffd9\011\uffd9\025\uffd9\047\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\001\002\000\004\025\375\001\002\000\056\002\uffd7" +
    "\003\uffd7\004\uffd7\007\uffd7\010\uffd7\011\uffd7\025\uffd7\047" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\001\002\000\004\024\377\001\002\000\044" +
    "\004\146\007\022\010\147\011\133\047\144\051\161\052" +
    "\136\053\143\056\006\057\020\060\011\061\015\062\013" +
    "\063\153\064\134\065\150\066\137\001\002\000\004\025" +
    "\u0101\001\002\000\056\002\uffd8\003\uffd8\004\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\025\uffd8\047\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000" +
    "\006\021\uffb2\026\362\001\002\000\004\021\uffb3\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\002\003\011\020\013\004\014\015\017" +
    "\007\027\013\030\011\031\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\117\017\007\027\013\030\011\031\006\001\001\000" +
    "\004\031\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\036\030\037\050\040\041\041\051\042\031\043" +
    "\037\045\042\046\046\047\045\050\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\042\115\043\037\045\053\046\046\047\045\050" +
    "\027\001\001\000\002\001\001\000\022\040\113\041\051" +
    "\042\031\043\037\045\112\046\046\047\045\050\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\042\054\043" +
    "\037\045\053\046\046\047\045\050\027\001\001\000\004" +
    "\044\063\001\001\000\002\001\001\000\010\046\101\047" +
    "\045\050\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\072\047\045\050\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\067\046\046\047\045" +
    "\050\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\070\046\046\047\045\050\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\100\050\027\001\001\000\006\047\077" +
    "\050\027\001\001\000\006\047\076\050\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\041\103\042\031\043\037\045\053\046" +
    "\046\047\045\050\027\001\001\000\002\001\001\000\030" +
    "\012\106\036\105\037\050\040\041\041\051\042\031\043" +
    "\037\045\042\046\046\047\045\050\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\111\036\105\037\050\040\041\041\051\042\031\043\037" +
    "\045\042\046\046\047\045\050\027\001\001\000\002\001" +
    "\001\000\004\044\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\351\031\125\001\001\000\006\020\126\031" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\154\006\156\010\140\015\344\016" +
    "\134\017\161\021\150\023\155\024\151\025\157\027\137" +
    "\030\153\031\006\033\144\001\001\000\036\003\154\006" +
    "\156\010\140\015\141\016\134\017\161\021\150\023\155" +
    "\024\151\025\157\027\137\030\153\031\006\033\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\036\307\037\050\040\041\041" +
    "\051\042\031\043\037\045\042\046\046\047\045\050\027" +
    "\001\001\000\002\001\001\000\036\003\154\006\156\010" +
    "\140\015\306\016\134\017\161\021\150\023\155\024\151" +
    "\025\157\027\137\030\153\031\006\033\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\225\035\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\164\001\001\000\002\001\001\000\026\036\166\037\050" +
    "\040\041\041\051\042\031\043\037\045\042\046\046\047" +
    "\045\050\027\001\001\000\002\001\001\000\004\033\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\154\006\156\010\140\015\174\016\134" +
    "\017\161\021\150\023\155\024\151\025\157\027\137\030" +
    "\153\031\006\033\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\154\006\156\010" +
    "\140\015\200\016\134\017\161\021\150\023\155\024\151" +
    "\025\157\027\137\030\153\031\006\033\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\211\036\210\037\050\040\041\041\051" +
    "\042\031\043\037\045\042\046\046\047\045\050\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\214\036\210\037\050\040\041\041\051\042" +
    "\031\043\037\045\042\046\046\047\045\050\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\036" +
    "\226\037\050\040\041\041\051\042\031\043\037\045\042" +
    "\046\046\047\045\050\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\036\233\037\050\040\041\041\051\042\031\043\037\045" +
    "\042\046\046\047\045\050\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\154\006" +
    "\156\010\140\015\237\016\134\017\161\021\150\023\155" +
    "\024\151\025\157\027\137\030\153\031\006\033\144\001" +
    "\001\000\002\001\001\000\004\022\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\154\006\156\010\140\015\245\016\134\017\161\021\150" +
    "\023\155\024\151\025\157\027\137\030\153\031\006\033" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\251\001\001\000\002\001\001\000" +
    "\036\003\154\006\156\010\140\015\253\016\134\017\161" +
    "\021\150\023\155\024\151\025\157\027\137\030\153\031" +
    "\006\033\144\001\001\000\002\001\001\000\004\022\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\045" +
    "\260\046\046\047\045\050\027\001\001\000\002\001\001" +
    "\000\004\026\262\001\001\000\002\001\001\000\012\045" +
    "\273\046\046\047\045\050\027\001\001\000\004\026\265" +
    "\001\001\000\004\007\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\154\006\156" +
    "\010\140\015\272\016\134\017\161\021\150\023\155\024" +
    "\151\025\157\027\137\030\153\031\006\033\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\154\006" +
    "\156\010\140\015\275\016\134\017\161\021\150\023\155" +
    "\024\151\025\157\027\137\030\153\031\006\033\144\001" +
    "\001\000\004\026\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\302\001\001\000" +
    "\004\007\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\036\314\037\050\040\041\041\051\042\031\043\037\045" +
    "\042\046\046\047\045\050\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\154\006" +
    "\156\010\140\015\320\016\134\017\161\021\150\023\155" +
    "\024\151\025\157\027\137\030\153\031\006\033\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\154\006\156\010\140\015" +
    "\325\016\134\017\161\021\150\023\155\024\151\025\157" +
    "\027\137\030\153\031\006\033\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\154" +
    "\006\156\010\140\015\331\016\134\017\161\021\150\023" +
    "\155\024\151\025\157\027\137\030\153\031\006\033\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\350\031\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\154\006\156\010\140\015" +
    "\354\016\134\017\161\021\150\023\155\024\151\025\157" +
    "\027\137\030\153\031\006\033\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\375\031\125\001\001\000\002\001\001\000\006\020\365" +
    "\031\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\154\006\156\010\140\015\373\016\134\017\161" +
    "\021\150\023\155\024\151\025\157\027\137\030\153\031" +
    "\006\033\144\001\001\000\036\003\154\006\156\010\140" +
    "\015\371\016\134\017\161\021\150\023\155\024\151\025" +
    "\157\027\137\030\153\031\006\033\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\154\006\156\010\140" +
    "\015\377\016\134\017\161\021\150\023\155\024\151\025" +
    "\157\027\137\030\153\031\006\033\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0102\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println();
        System.err.print("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.print("\t" + message);
    }
        
    public Symbol getS(){
        return this.sym;
    };


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= globales 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= global_decl_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("globales",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_decl ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_decl ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_decl ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_decl ::= error ID SEMI 
            {
              Object RESULT =null;
		 report_error("Error: debe especificar el tipo de variable."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global_decl ::= error 
            {
              Object RESULT =null;
		 report_error("Error: declaración global inválida o incompleta."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= estru_control 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= read SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= write SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= DO SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read ::= READ LPAREN read_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // read ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // read ::= READ error 
            {
              Object RESULT =null;
		 report_error("Error: parámetro no válido para la función 'read'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // read_parameter ::= ID COMMA read_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // read_parameter ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // write ::= WRITE LPAREN write_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // write ::= WRITE error 
            {
              Object RESULT =null;
		 report_error("Error: parámetro no válido para la función 'write'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write_parameter ::= expr COMMA write_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write_parameter ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque ::= instruccion bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estru_control ::= if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estru_control ::= for 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estru_control ::= while 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estru_control ::= switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= tipo_var ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= tipo_var ID error parametro_list LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta paréntesis en la declaración de función."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= tipo_var ID LPAREN parametro_list RPAREN error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta llave de apertura en el cuerpo de la función."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= VOID ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcion ::= VOID ID error parametro_list LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta paréntesis en la declaración de función."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcion ::= VOID ID LPAREN parametro_list RPAREN error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta llave de apertura en el cuerpo de la función."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_list ::= tipo_var ID COMMA parametro_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_list ::= tipo_var ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if ::= IF LPAREN expr RPAREN LBRACKET bloque RBRACKET else 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if ::= IF error LBRACKET bloque RBRACKET else 
            {
              Object RESULT =null;
		 report_error("Error: falta paréntesis en la expresión 'if'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if ::= IF LPAREN expr RPAREN error RBRACKET else 
            {
              Object RESULT =null;
		 report_error("Error: falta llave de apertura en el bloque 'if'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else ::= ELSE LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else ::= ELSE error RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: error en el 'else'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for ::= FOR error LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: error en la estructura del bucle 'for'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta llave de apertura en el bloque 'for'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while ::= WHILE LPAREN expr RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILE error LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta paréntesis en la expresión 'while'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while ::= WHILE LPAREN expr RPAREN error RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta llave de apertura en el bloque 'while'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while ::= WHILE LPAREN error RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta la expresión del 'while'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch ::= SWITCH error LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta paréntesis en la expresión 'switch'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch ::= SWITCH LPAREN arit_exp RPAREN case_list error RBRACKET 
            {
              Object RESULT =null;
		 report_error("Error: falta llave de apertura en el bloque 'switch'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_list ::= CASE arit_exp COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_list ::= CASE arit_exp COLON bloque case_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // case_end ::= DEFAULT COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_end ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // constante ::= CONST tipo_var ID EQ expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constante ::= CONST tipo_var ID error SEMI 
            {
              Object RESULT =null;
		 report_error("Error: falta inicializar la constante."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable ::= tipo_var id_list SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable ::= VOID ID error SEMI 
            {
              Object RESULT =null;
		 report_error("Error: no puede declarar variables void."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_var ::= TYPE_INT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_var ::= TYPE_LONG 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_var ::= TYPE_SHORT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_var ::= TYPE_CHAR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // id_list ::= ID next_id_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // next_id_list ::= COMMA ID next_id_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // next_id_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignacion ::= ID op_asignacion expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignacion ::= ID op_incremento SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_asignacion ::= EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_asignacion ::= PLUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_asignacion ::= MINUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_asignacion ::= TIMES_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_asignacion ::= DIV_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_incremento ::= PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_incremento ::= MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= literal 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= bool_expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bool_expr ::= bool_expr OR bool_term 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_expr",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bool_expr ::= bool_term 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_expr",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_term ::= bool_term AND bool_factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_term",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_term ::= bool_factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_term",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bool_factor ::= NOT bool_factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_factor",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bool_factor ::= LPAREN bool_expr RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_factor",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bool_factor ::= rel_expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_factor",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bool_factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_factor",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bool_factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bool_factor",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // rel_expr ::= arit_exp op_relacional arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("rel_expr",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op_relacional ::= EQ_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op_relacional ::= GT_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op_relacional ::= GT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op_relacional ::= LT_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // op_relacional ::= LT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_relacional ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arit_exp ::= arit_exp PLUS term 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arit_exp ::= arit_exp MINUS term 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arit_exp ::= term 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // term ::= term TIMES factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // term ::= term DIV factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // term ::= term MOD factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // term ::= factor 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= LPAREN arit_exp RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= number 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // factor ::= ID LPAREN expr_list RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // number ::= INT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
