
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi.scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.compi.scanner.semantico.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\011\003\000\002\023" +
    "\003\000\002\020\004\000\002\020\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\005" +
    "\000\002\017\004\000\002\017\003\000\002\012\006\000" +
    "\002\012\005\000\002\012\004\000\002\013\005\000\002" +
    "\013\003\000\002\015\006\000\002\015\004\000\002\014" +
    "\005\000\002\014\003\000\002\024\003\000\002\024\004" +
    "\000\002\021\005\000\002\021\003\000\002\021\002\000" +
    "\002\021\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\012\000\002\026" +
    "\012\000\002\026\010\000\002\026\010\000\002\027\006" +
    "\000\002\027\004\000\002\027\002\000\002\027\003\000" +
    "\002\030\012\000\002\030\007\000\002\030\007\000\002" +
    "\031\006\000\002\031\004\000\002\031\002\000\002\044" +
    "\002\000\002\032\016\000\002\032\006\000\002\032\013" +
    "\000\002\045\002\000\002\033\012\000\002\033\006\000" +
    "\002\033\007\000\002\034\012\000\002\034\007\000\002" +
    "\034\007\000\002\035\006\000\002\035\007\000\002\035" +
    "\004\000\002\016\005\000\002\016\004\000\002\016\002" +
    "\000\002\036\010\000\002\036\010\000\002\037\005\000" +
    "\002\037\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\040\005\000\002\040\004" +
    "\000\002\040\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\006\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\020\003\017\012\022\063\006\064\020\065" +
    "\011\066\015\067\013\001\002\000\004\002\356\001\002" +
    "\000\022\002\ufffd\003\ufffd\012\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\001\002\000\004\004\uffb6\001\002" +
    "\000\004\004\343\001\002\000\022\002\ufffa\003\ufffa\012" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001\002" +
    "\000\004\004\uffb4\001\002\000\022\002\ufffc\003\ufffc\012" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\001\002" +
    "\000\004\004\077\001\002\000\022\002\ufffb\003\ufffb\012" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002" +
    "\000\004\004\uffb3\001\002\000\004\002\000\001\002\000" +
    "\022\002\ufff9\003\ufff9\012\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\001\002\000\004\004\uffb5\001\002\000" +
    "\022\002\uffff\003\017\012\022\063\006\064\020\065\011" +
    "\066\015\067\013\001\002\000\012\063\006\064\020\065" +
    "\011\066\015\001\002\000\004\004\024\001\002\000\004" +
    "\021\025\001\002\000\024\004\033\007\026\010\041\011" +
    "\040\014\031\017\027\020\032\027\037\053\036\001\002" +
    "\000\032\003\uff8b\013\uff8b\022\uff8b\023\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\030\uff8b\033\uff8b\034\uff8b\051\uff8b\052\uff8b" +
    "\001\002\000\030\003\uff8d\013\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\030\uff8d\033\uff8d\051\uff8d\052\uff8d" +
    "\001\002\000\030\003\uff98\013\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\030\uff98\033\uff98\051\uff98\052\uff98" +
    "\001\002\000\030\003\uff8e\013\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\030\uff8e\033\uff8e\051\uff8e\052\uff8e" +
    "\001\002\000\030\003\uff8c\013\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\030\uff8c\033\uff8c\051\uff8c\052\uff8c" +
    "\001\002\000\032\003\uff9a\013\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\067\030\uff9a\033\uff9a\051\uff9a" +
    "\052\uff9a\001\002\000\024\003\066\013\045\022\046\023" +
    "\043\024\051\025\047\026\065\051\053\052\044\001\002" +
    "\000\030\003\uff99\013\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\030\uff99\033\uff99\051\uff99\052\uff99\001\002" +
    "\000\024\004\033\007\026\010\041\011\040\014\031\017" +
    "\027\020\032\027\037\053\036\001\002\000\024\004\033" +
    "\007\026\010\041\011\040\014\031\017\027\020\032\027" +
    "\037\053\036\001\002\000\030\003\uff8f\013\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\030\uff8f\033\uff8f\051" +
    "\uff8f\052\uff8f\001\002\000\032\003\uff8a\013\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\030\uff8a\033\uff8a\034" +
    "\uff8a\051\uff8a\052\uff8a\001\002\000\022\013\045\022\046" +
    "\023\043\024\051\025\047\030\050\051\053\052\044\001" +
    "\002\000\024\004\033\007\026\010\041\011\040\014\031" +
    "\017\027\020\032\027\037\053\036\001\002\000\024\004" +
    "\033\007\026\010\041\011\040\014\031\017\027\020\032" +
    "\027\037\053\036\001\002\000\024\004\033\007\026\010" +
    "\041\011\040\014\031\017\027\020\032\027\037\053\036" +
    "\001\002\000\024\004\033\007\026\010\041\011\040\014" +
    "\031\017\027\020\032\027\037\053\036\001\002\000\024" +
    "\004\033\007\026\010\041\011\040\014\031\017\027\020" +
    "\032\027\037\053\036\001\002\000\030\003\uff9c\013\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\033" +
    "\uff9c\051\uff9c\052\uff9c\001\002\000\024\004\033\007\026" +
    "\010\041\011\040\014\031\017\027\020\032\027\037\053" +
    "\036\001\002\000\024\004\033\007\026\010\041\011\040" +
    "\014\031\017\027\020\032\027\037\053\036\001\002\000" +
    "\024\004\033\007\026\010\041\011\040\014\031\017\027" +
    "\020\032\027\037\053\036\001\002\000\030\003\uff9f\013" +
    "\045\022\046\023\043\024\051\025\047\026\uff9f\030\uff9f" +
    "\033\uff9f\051\uff9f\052\uff9f\001\002\000\030\003\uff9d\013" +
    "\045\022\046\023\043\024\051\025\047\026\uff9d\030\uff9d" +
    "\033\uff9d\051\053\052\044\001\002\000\030\003\uffa3\013" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3" +
    "\033\uffa3\051\uffa3\052\uffa3\001\002\000\030\003\uffa2\013" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2" +
    "\033\uffa2\051\uffa2\052\uffa2\001\002\000\030\003\uffa5\013" +
    "\045\022\uffa5\023\uffa5\024\051\025\047\026\uffa5\030\uffa5" +
    "\033\uffa5\051\uffa5\052\uffa5\001\002\000\030\003\uffa1\013" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\030\uffa1" +
    "\033\uffa1\051\uffa1\052\uffa1\001\002\000\030\003\uffa0\013" +
    "\045\022\046\023\043\024\051\025\047\026\uffa0\030\uffa0" +
    "\033\uffa0\051\uffa0\052\uffa0\001\002\000\030\003\uffa4\013" +
    "\045\022\uffa4\023\uffa4\024\051\025\047\026\uffa4\030\uffa4" +
    "\033\uffa4\051\uffa4\052\uffa4\001\002\000\030\003\uff9e\013" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e" +
    "\033\uff9e\051\uff9e\052\uff9e\001\002\000\056\002\uffba\003" +
    "\uffba\004\uffba\005\uffba\006\uffba\012\uffba\015\uffba\016\uffba" +
    "\032\uffba\054\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\001\002\000\056\002\uffb9\003\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\012\uffb9\015\uffb9\016\uffb9\032\uffb9\054\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\001\002" +
    "\000\030\003\071\004\033\007\026\010\041\011\040\014" +
    "\031\017\027\020\032\027\037\030\uffdf\053\036\001\002" +
    "\000\004\030\075\001\002\000\004\030\uffde\001\002\000" +
    "\024\013\045\022\046\023\043\024\051\025\047\030\uffe0" +
    "\033\073\051\053\052\044\001\002\000\030\003\071\004" +
    "\033\007\026\010\041\011\040\014\031\017\027\020\032" +
    "\027\037\030\uffdf\053\036\001\002\000\004\030\uffe1\001" +
    "\002\000\030\003\uff9b\013\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\030\uff9b\033\uff9b\051\uff9b\052\uff9b\001" +
    "\002\000\022\002\ufffe\003\ufffe\012\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\001\002\000\006\027\100\031" +
    "\101\001\002\000\016\003\333\030\uffd3\063\006\064\020" +
    "\065\011\066\015\001\002\000\004\003\102\001\002\000" +
    "\044\003\125\004\121\005\124\006\104\012\022\015\117" +
    "\016\103\054\115\056\133\057\107\060\114\063\006\064" +
    "\020\065\011\066\015\070\122\071\110\001\002\000\006" +
    "\003\321\027\322\001\002\000\004\026\320\001\002\000" +
    "\052\003\uffdb\004\uffdb\005\uffdb\006\uffdb\012\uffdb\015\uffdb" +
    "\016\uffdb\032\uffdb\054\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffdb" +
    "\071\uffdb\001\002\000\052\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\032\ufff8\054\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\070\ufff8\071\ufff8\001\002\000\006\003\305" +
    "\027\306\001\002\000\026\004\033\007\026\010\041\011" +
    "\040\014\031\017\027\020\032\026\302\027\037\053\036" +
    "\001\002\000\052\003\125\004\121\005\124\006\104\012" +
    "\022\015\117\016\103\032\uffe3\054\115\056\133\057\107" +
    "\060\114\061\uffe3\062\uffe3\063\006\064\020\065\011\066" +
    "\015\070\122\071\110\001\002\000\052\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\012\ufff7\015\ufff7\016\ufff7\032\ufff7\054" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071\ufff7\001\002\000" +
    "\004\032\300\001\002\000\006\003\233\027\234\001\002" +
    "\000\006\003\212\027\213\001\002\000\004\004\202\001" +
    "\002\000\006\003\173\027\174\001\002\000\004\026\172" +
    "\001\002\000\020\021\162\043\166\044\164\045\163\046" +
    "\157\047\165\050\161\001\002\000\004\026\156\001\002" +
    "\000\052\003\uffda\004\uffda\005\uffda\006\uffda\012\uffda\015" +
    "\uffda\016\uffda\032\uffda\054\uffda\056\uffda\057\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\070" +
    "\uffda\071\uffda\001\002\000\004\026\155\001\002\000\052" +
    "\003\uffed\004\uffed\005\uffed\006\uffed\012\uffed\015\uffed\016" +
    "\uffed\032\uffed\054\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\070\uffed\071" +
    "\uffed\001\002\000\052\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\012\ufff6\015\ufff6\016\ufff6\032\ufff6\054\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\070\ufff6\071\ufff6\001\002\000\004\026\154\001" +
    "\002\000\052\003\uffdd\004\uffdd\005\uffdd\006\uffdd\012\uffdd" +
    "\015\uffdd\016\uffdd\032\uffdd\054\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\070\uffdd\071\uffdd\001\002\000\052\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\012\uffdc\015\uffdc\016\uffdc\032\uffdc\054\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc\001\002\000\004" +
    "\026\153\001\002\000\006\003\134\027\135\001\002\000" +
    "\044\003\125\004\121\005\124\006\104\012\022\015\117" +
    "\016\103\054\115\056\133\057\107\060\114\063\006\064" +
    "\020\065\011\066\015\070\122\071\110\001\002\000\004" +
    "\004\121\001\002\000\004\026\137\001\002\000\024\004" +
    "\033\007\026\010\041\011\040\014\031\017\027\020\032" +
    "\027\037\053\036\001\002\000\022\013\045\022\046\023" +
    "\043\024\051\025\047\026\141\051\053\052\044\001\002" +
    "\000\004\004\121\001\002\000\004\030\143\001\002\000" +
    "\006\003\144\031\145\001\002\000\052\003\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\012\uffc8\015\uffc8\016\uffc8\032\uffc8\054" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\070\uffc8\071\uffc8\001\002\000" +
    "\044\003\uffcb\004\uffcb\005\uffcb\006\uffcb\012\uffcb\015\uffcb" +
    "\016\uffcb\054\uffcb\056\uffcb\057\uffcb\060\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\001\002\000\044" +
    "\003\125\004\121\005\124\006\104\012\022\015\117\016" +
    "\103\054\115\056\133\057\107\060\114\063\006\064\020" +
    "\065\011\066\015\070\122\071\110\001\002\000\004\032" +
    "\150\001\002\000\052\003\uffca\004\uffca\005\uffca\006\uffca" +
    "\012\uffca\015\uffca\016\uffca\032\uffca\054\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\070\uffca\071\uffca\001\002\000\004\032\152\001" +
    "\002\000\052\003\uffc9\004\uffc9\005\uffc9\006\uffc9\012\uffc9" +
    "\015\uffc9\016\uffc9\032\uffc9\054\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\070\uffc9\071\uffc9\001\002\000\052\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\012\ufff2\015\ufff2\016\ufff2\032\ufff2\054\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\066\ufff2\070\ufff2\071\ufff2\001\002\000\052" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\012\ufff3\015\ufff3\016" +
    "\ufff3\032\ufff3\054\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\070\ufff3\071" +
    "\ufff3\001\002\000\052\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\012\ufff4\015\ufff4\016\ufff4\032\ufff4\054\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\070\ufff4\071\ufff4\001\002\000\052\003\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\012\ufff0\015\ufff0\016\ufff0\032\ufff0" +
    "\054\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\070\ufff0\071\ufff0\001\002" +
    "\000\026\003\uffa8\004\uffa8\007\uffa8\010\uffa8\011\uffa8\014" +
    "\uffa8\017\uffa8\020\uffa8\027\uffa8\053\uffa8\001\002\000\006" +
    "\026\uffae\030\uffae\001\002\000\006\026\uffa6\030\uffa6\001" +
    "\002\000\026\003\uffac\004\uffac\007\uffac\010\uffac\011\uffac" +
    "\014\uffac\017\uffac\020\uffac\027\uffac\053\uffac\001\002\000" +
    "\026\003\uffa9\004\uffa9\007\uffa9\010\uffa9\011\uffa9\014\uffa9" +
    "\017\uffa9\020\uffa9\027\uffa9\053\uffa9\001\002\000\026\003" +
    "\uffaa\004\uffaa\007\uffaa\010\uffaa\011\uffaa\014\uffaa\017\uffaa" +
    "\020\uffaa\027\uffaa\053\uffaa\001\002\000\006\026\uffa7\030" +
    "\uffa7\001\002\000\026\003\uffab\004\uffab\007\uffab\010\uffab" +
    "\011\uffab\014\uffab\017\uffab\020\uffab\027\uffab\053\uffab\001" +
    "\002\000\026\003\170\004\033\007\026\010\041\011\040" +
    "\014\031\017\027\020\032\027\037\053\036\001\002\000" +
    "\006\026\uffad\030\uffad\001\002\000\024\013\045\022\046" +
    "\023\043\024\051\025\047\026\uffaf\030\uffaf\051\053\052" +
    "\044\001\002\000\052\003\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\012\ufff5\015\ufff5\016\ufff5\032\ufff5\054\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\070\ufff5\071\ufff5\001\002\000\004\026\uffe6\001" +
    "\002\000\024\004\033\007\026\010\041\011\040\014\031" +
    "\017\027\020\032\027\037\053\036\001\002\000\004\030" +
    "\201\001\002\000\024\013\045\022\046\023\043\024\051" +
    "\025\047\030\uffe4\033\177\051\053\052\044\001\002\000" +
    "\024\004\033\007\026\010\041\011\040\014\031\017\027" +
    "\020\032\027\037\053\036\001\002\000\004\030\uffe5\001" +
    "\002\000\004\026\uffe7\001\002\000\010\003\uffb0\026\uffb0" +
    "\033\206\001\002\000\006\003\204\026\205\001\002\000" +
    "\056\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\012\uffb7" +
    "\015\uffb7\016\uffb7\032\uffb7\054\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\001\002\000\056\002\uffb8\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\012\uffb8\015\uffb8\016\uffb8" +
    "\032\uffb8\054\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\001\002\000\004\004\210\001\002\000\006\003" +
    "\uffb2\026\uffb2\001\002\000\010\003\uffb0\026\uffb0\033\206" +
    "\001\002\000\006\003\uffb1\026\uffb1\001\002\000\044\003" +
    "\125\004\121\005\124\006\104\012\022\015\117\016\103" +
    "\054\115\056\133\057\107\060\114\063\006\064\020\065" +
    "\011\066\015\070\122\071\110\001\002\000\024\004\033" +
    "\007\026\010\041\011\040\014\031\017\027\020\032\027" +
    "\037\053\036\001\002\000\022\013\045\022\046\023\043" +
    "\024\051\025\047\030\215\051\053\052\044\001\002\000" +
    "\006\003\216\031\217\001\002\000\052\003\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\012\uffcf\015\uffcf\016\uffcf\032\uffcf\054" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\070\uffcf\071\uffcf\001\002\000" +
    "\044\003\125\004\121\005\124\006\104\012\022\015\117" +
    "\016\103\054\115\056\133\057\107\060\114\063\006\064" +
    "\020\065\011\066\015\070\122\071\110\001\002\000\004" +
    "\032\221\001\002\000\054\003\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\012\uffcc\015\uffcc\016\uffcc\032\uffcc\054\uffcc\055\223" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\001\002\000\052" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\012\uffd1\015\uffd1\016" +
    "\uffd1\032\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071" +
    "\uffd1\001\002\000\006\003\224\031\225\001\002\000\052" +
    "\003\uffcd\004\uffcd\005\uffcd\006\uffcd\012\uffcd\015\uffcd\016" +
    "\uffcd\032\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd\071" +
    "\uffcd\001\002\000\044\003\125\004\121\005\124\006\104" +
    "\012\022\015\117\016\103\054\115\056\133\057\107\060" +
    "\114\063\006\064\020\065\011\066\015\070\122\071\110" +
    "\001\002\000\004\032\227\001\002\000\052\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\012\uffce\015\uffce\016\uffce\032\uffce" +
    "\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\070\uffce\071\uffce\001\002" +
    "\000\004\032\231\001\002\000\054\003\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\012\uffcc\015\uffcc\016\uffcc\032\uffcc\054\uffcc" +
    "\055\223\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\001\002" +
    "\000\052\003\uffd0\004\uffd0\005\uffd0\006\uffd0\012\uffd0\015" +
    "\uffd0\016\uffd0\032\uffd0\054\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070" +
    "\uffd0\071\uffd0\001\002\000\004\061\256\001\002\000\012" +
    "\004\235\007\026\010\041\027\237\001\002\000\020\013" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\030\uff91\034\uff91" +
    "\001\002\000\020\013\uff90\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\030\uff90\034\uff90\001\002\000\012\004\235\007\026" +
    "\010\041\027\237\001\002\000\016\013\241\022\243\023" +
    "\244\024\246\025\245\030\242\001\002\000\012\004\235" +
    "\007\026\010\041\027\237\001\002\000\006\003\253\031" +
    "\254\001\002\000\012\004\235\007\026\010\041\027\237" +
    "\001\002\000\012\004\235\007\026\010\041\027\237\001" +
    "\002\000\012\004\235\007\026\010\041\027\237\001\002" +
    "\000\012\004\235\007\026\010\041\027\237\001\002\000" +
    "\020\013\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95" +
    "\034\uff95\001\002\000\020\013\uff94\022\uff94\023\uff94\024" +
    "\uff94\025\uff94\030\uff94\034\uff94\001\002\000\020\013\241" +
    "\022\uff96\023\uff96\024\246\025\245\030\uff96\034\uff96\001" +
    "\002\000\020\013\241\022\uff97\023\uff97\024\246\025\245" +
    "\030\uff97\034\uff97\001\002\000\052\003\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\012\uffc1\015\uffc1\016\uffc1\032\uffc1\054\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\001\002\000\004" +
    "\061\256\001\002\000\006\032\uffbb\062\264\001\002\000" +
    "\014\003\257\004\235\007\026\010\041\027\237\001\002" +
    "\000\006\032\uffbe\062\uffbe\001\002\000\016\013\241\022" +
    "\243\023\244\024\246\025\245\034\261\001\002\000\044" +
    "\003\125\004\121\005\124\006\104\012\022\015\117\016" +
    "\103\054\115\056\133\057\107\060\114\063\006\064\020" +
    "\065\011\066\015\070\122\071\110\001\002\000\010\032" +
    "\uffc0\061\256\062\uffc0\001\002\000\006\032\uffbf\062\uffbf" +
    "\001\002\000\006\003\267\034\270\001\002\000\004\032" +
    "\266\001\002\000\052\003\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\012\uffc3\015\uffc3\016\uffc3\032\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\070\uffc3\071\uffc3\001\002\000\004\032\uffbc\001" +
    "\002\000\044\003\125\004\121\005\124\006\104\012\022" +
    "\015\117\016\103\054\115\056\133\057\107\060\114\063" +
    "\006\064\020\065\011\066\015\070\122\071\110\001\002" +
    "\000\004\032\uffbd\001\002\000\020\013\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\030\uff93\034\uff93\001\002\000\016" +
    "\013\241\022\243\023\244\024\246\025\245\030\274\001" +
    "\002\000\020\013\uff92\022\uff92\023\uff92\024\uff92\025\uff92" +
    "\030\uff92\034\uff92\001\002\000\006\032\uffbb\062\264\001" +
    "\002\000\004\032\277\001\002\000\052\003\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\012\uffc2\015\uffc2\016\uffc2\032\uffc2\054" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2\001\002\000" +
    "\022\002\uffd6\003\uffd6\012\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\001\002\000\010\032\uffe2\061\uffe2\062" +
    "\uffe2\001\002\000\052\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\012\uffee\015\uffee\016\uffee\032\uffee\054\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\070\uffee\071\uffee\001\002\000\022\013\045\022" +
    "\046\023\043\024\051\025\047\026\304\051\053\052\044" +
    "\001\002\000\052\003\uffef\004\uffef\005\uffef\006\uffef\012" +
    "\uffef\015\uffef\016\uffef\032\uffef\054\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\070\uffef\071\uffef\001\002\000\044\003\125\004\121" +
    "\005\124\006\104\012\022\015\117\016\103\054\115\056" +
    "\133\057\107\060\114\063\006\064\020\065\011\066\015" +
    "\070\122\071\110\001\002\000\024\004\033\007\026\010" +
    "\041\011\040\014\031\017\027\020\032\027\037\053\036" +
    "\001\002\000\022\013\045\022\046\023\043\024\051\025" +
    "\047\030\310\051\053\052\044\001\002\000\006\003\311" +
    "\031\312\001\002\000\052\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\012\uffc4\015\uffc4\016\uffc4\032\uffc4\054\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\070\uffc4\071\uffc4\001\002\000\044\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\012\uffc7\015\uffc7\016\uffc7\054" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\070\uffc7\071\uffc7\001\002\000\044\003\125\004" +
    "\121\005\124\006\104\012\022\015\117\016\103\054\115" +
    "\056\133\057\107\060\114\063\006\064\020\065\011\066" +
    "\015\070\122\071\110\001\002\000\004\032\315\001\002" +
    "\000\052\003\uffc6\004\uffc6\005\uffc6\006\uffc6\012\uffc6\015" +
    "\uffc6\016\uffc6\032\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\070" +
    "\uffc6\071\uffc6\001\002\000\004\032\317\001\002\000\052" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\012\uffc5\015\uffc5\016" +
    "\uffc5\032\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5\071" +
    "\uffc5\001\002\000\052\003\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\012\ufff1\015\ufff1\016\ufff1\032\ufff1\054\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\070\ufff1\071\ufff1\001\002\000\004\026\uffea\001" +
    "\002\000\006\004\323\030\324\001\002\000\006\030\uffe8" +
    "\033\327\001\002\000\004\026\uffeb\001\002\000\004\030" +
    "\326\001\002\000\004\026\uffec\001\002\000\004\004\323" +
    "\001\002\000\004\030\uffe9\001\002\000\004\004\340\001" +
    "\002\000\004\030\334\001\002\000\004\030\uffd2\001\002" +
    "\000\004\031\335\001\002\000\044\003\125\004\121\005" +
    "\124\006\104\012\022\015\117\016\103\054\115\056\133" +
    "\057\107\060\114\063\006\064\020\065\011\066\015\070" +
    "\122\071\110\001\002\000\004\032\337\001\002\000\022" +
    "\002\uffd8\003\uffd8\012\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\001\002\000\006\030\uffd4\033\341\001\002" +
    "\000\016\003\333\030\uffd3\063\006\064\020\065\011\066" +
    "\015\001\002\000\004\030\uffd5\001\002\000\014\003\uffb0" +
    "\026\uffb0\027\344\031\345\033\206\001\002\000\016\003" +
    "\333\030\uffd3\063\006\064\020\065\011\066\015\001\002" +
    "\000\004\003\346\001\002\000\044\003\125\004\121\005" +
    "\124\006\104\012\022\015\117\016\103\054\115\056\133" +
    "\057\107\060\114\063\006\064\020\065\011\066\015\070" +
    "\122\071\110\001\002\000\004\032\350\001\002\000\022" +
    "\002\uffd7\003\uffd7\012\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\067\uffd7\001\002\000\004\030\352\001\002\000\004" +
    "\031\353\001\002\000\044\003\125\004\121\005\124\006" +
    "\104\012\022\015\117\016\103\054\115\056\133\057\107" +
    "\060\114\063\006\064\020\065\011\066\015\070\122\071" +
    "\110\001\002\000\004\032\355\001\002\000\022\002\uffd9" +
    "\003\uffd9\012\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\022\004\006\011\003\020\020\022\004\023" +
    "\015\026\007\036\013\037\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\006\022\075\026\007\036\013\037\011\001\001\000" +
    "\004\004\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\033\007\034\010\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\051\001" +
    "\001\000\002\001\001\000\010\005\063\007\034\010\027" +
    "\001\001\000\010\005\041\007\034\010\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\051\001\001" +
    "\000\010\005\062\007\034\010\027\001\001\000\010\005" +
    "\061\007\034\010\027\001\001\000\010\005\060\007\034" +
    "\010\027\001\001\000\010\005\057\007\034\010\027\001" +
    "\001\000\010\005\056\007\034\010\027\001\001\000\002" +
    "\001\001\000\010\005\055\007\034\010\027\001\001\000" +
    "\010\005\054\007\034\010\027\001\001\000\010\005\053" +
    "\007\034\010\027\001\001\000\004\043\051\001\001\000" +
    "\004\043\051\001\001\000\004\043\051\001\001\000\004" +
    "\043\051\001\001\000\004\043\051\001\001\000\004\043" +
    "\051\001\001\000\004\043\051\001\001\000\004\043\051" +
    "\001\001\000\004\043\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\071\007\034\010\027\021\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\051\001\001\000\012\005\071\007\034\010\027\021\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\330\027\331\001\001" +
    "\000\002\001\001\000\034\004\115\012\126\015\131\017" +
    "\110\024\112\025\105\030\127\032\130\033\104\034\122" +
    "\036\111\037\125\040\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\302\007\034\010\027\001\001\000" +
    "\034\004\115\012\126\015\131\017\110\024\300\025\105" +
    "\030\127\032\130\033\104\034\122\036\111\037\125\040" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\166\042\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\115\012\126\015\131\017\110" +
    "\024\150\025\105\030\127\032\130\033\104\034\122\036" +
    "\111\037\125\040\117\001\001\000\004\040\135\001\001" +
    "\000\002\001\001\000\010\005\137\007\034\010\027\001" +
    "\001\000\004\043\051\001\001\000\004\040\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\145\001\001\000\034\004\115\012\126\015\131" +
    "\017\110\024\146\025\105\030\127\032\130\033\104\034" +
    "\122\036\111\037\125\040\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\170\007" +
    "\034\010\027\001\001\000\002\001\001\000\004\043\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\175\007\034\010\027\014\174\001\001\000\002\001\001" +
    "\000\004\043\051\001\001\000\012\005\175\007\034\010" +
    "\027\014\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\210\001\001\000\002\001\001\000\034\004" +
    "\115\012\126\015\131\017\110\024\227\025\105\030\127" +
    "\032\130\033\104\034\122\036\111\037\125\040\117\001" +
    "\001\000\010\005\213\007\034\010\027\001\001\000\004" +
    "\043\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\115\012\126\015\131\017\110\024\217\025\105" +
    "\030\127\032\130\033\104\034\122\036\111\037\125\040" +
    "\117\001\001\000\002\001\001\000\004\031\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\115\012\126\015\131\017\110\024\225\025\105" +
    "\030\127\032\130\033\104\034\122\036\111\037\125\040" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\231\001\001\000\002\001\001\000" +
    "\004\035\274\001\001\000\006\006\237\010\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\272\010" +
    "\235\001\001\000\002\001\001\000\006\006\271\010\235" +
    "\001\001\000\002\001\001\000\006\006\251\010\235\001" +
    "\001\000\006\006\250\010\235\001\001\000\006\006\247" +
    "\010\235\001\001\000\006\006\246\010\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\254\001\001\000" +
    "\004\016\264\001\001\000\006\006\257\010\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\115\012" +
    "\126\015\131\017\110\024\261\025\105\030\127\032\130" +
    "\033\104\034\122\036\111\037\125\040\117\001\001\000" +
    "\004\035\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\115\012\126\015\131\017\110\024\270\025\105" +
    "\030\127\032\130\033\104\034\122\036\111\037\125\040" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\051\001\001\000" +
    "\002\001\001\000\034\004\115\012\126\015\131\017\110" +
    "\024\315\025\105\030\127\032\130\033\104\034\122\036" +
    "\111\037\125\040\117\001\001\000\010\005\306\007\034" +
    "\010\027\001\001\000\004\043\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\312\001\001\000\034" +
    "\004\115\012\126\015\131\017\110\024\313\025\105\030" +
    "\127\032\130\033\104\034\122\036\111\037\125\040\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\115" +
    "\012\126\015\131\017\110\024\335\025\105\030\127\032" +
    "\130\033\104\034\122\036\111\037\125\040\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\330\027\341\001\001\000\002\001\001\000\004" +
    "\003\206\001\001\000\006\004\330\027\350\001\001\000" +
    "\002\001\001\000\034\004\115\012\126\015\131\017\110" +
    "\024\346\025\105\030\127\032\130\033\104\034\122\036" +
    "\111\037\125\040\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\115\012\126\015\131\017\110\024\353\025\105\030\127" +
    "\032\130\033\104\034\122\036\111\037\125\040\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    // Manejo de errores
    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }

    public void semantic_error(Symbol sym, String message) {
        System.err.println("Error semántico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + message);
    }

    public Symbol getS() {
        return this.sym;
    }

    private TablaSimbolos ts = new TablaSimbolos();

    // Para manejo de bucles
    private int contadorBucles = 0;

    public void iniciarBucle() {
        contadorBucles++;
    }

    public void finalizarBucle() {
        contadorBucles--;
    }

    public boolean dentroDeBucle() {
        return contadorBucles > 0;
    }

    // Métodos para la tabla de símbolos
    public void imprimirTablasSimbolos() {
        ts.imprimirTablas();
    }

    public void insertarVar(String tipo, String id, int linea) {
        String mensaje = ts.insertarVar(new Simbolo(tipo, id));
        if (mensaje != null) {
            System.err.println("Error semántico en línea " + linea + ": " + mensaje);
        }
    }

    public void insertarConstante(String tipo, String id, Object valor, int linea) {
        String mensaje = ts.insertarConstante(new Simbolo(tipo, id, true, valor));
        if (mensaje != null) {
            System.err.println("Error semántico en línea " + linea + ": " + mensaje);
        }
    }

    public void verificarVariableDefinida(String id, int linea) {
        if (!ts.contiene(id)) {
            System.err.println("Error semántico en línea " + linea + ": La variable '" + id + "' no está definida.");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {


    public class ExprValue {
        public boolean esConstante;
        public Object valor;
        public String tipo; // "int", "float", etc.

        public ExprValue(boolean esConstante, Object valor, String tipo) {
            this.esConstante = esConstante;
            this.valor = valor;
            this.tipo = tipo;
        }
    }

    public class Pair<K, V> {
        private K key;
        private V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() { return key; }
        public V getValue() { return value; }
    }

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= globales 
            {
              Object RESULT =null;
		 imprimirTablasSimbolos(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= global_decl_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("globales",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_decl ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_decl ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_decl ::= funcion 
            {
              Object RESULT =null;
		 ts.globales(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_decl ::= error 
            {
              Object RESULT =null;
		 report_error("Error en declaración global."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= estru_control 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= BREAK SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                  if (!dentroDeBucle()) {
                      int linea = s.left + 1;
                      System.err.println("Error semántico en línea " + linea + ": 'break' fuera de un bucle.");
                  }
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= read SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= write SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                  if (!dentroDeBucle()) {
                      int linea = s.left + 1;
                      System.err.println("Error semántico en línea " + linea + ": 'continue' fuera de un bucle.");
                  }
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= DO SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error 
            {
              Object RESULT =null;
		 report_error("Instrucción inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // read ::= READ LPAREN read_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // read ::= READ error 
            {
              Object RESULT =null;
		 report_error("Parámetros inválidos en 'read'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // read_parameter ::= ID COMMA read_parameter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // read_parameter ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // write ::= WRITE LPAREN write_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // write ::= WRITE error 
            {
              Object RESULT =null;
		 report_error("Parámetros inválidos en 'write'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // write_parameter ::= expr COMMA write_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write_parameter ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque ::= instruccion bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error en la lista de expresiones."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estru_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estru_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estru_control ::= while_stmt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estru_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= tipo_var ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 ts.globales(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= VOID ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 ts.globales(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= tipo_var ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Declaración de función inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= VOID ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Declaración de función inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro_list ::= tipo_var ID COMMA parametro_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro_list ::= tipo_var ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error en la lista de parámetros."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_stmt ::= IF LPAREN expr RPAREN LBRACKET bloque RBRACKET else_stmt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_stmt",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_stmt ::= IF error bloque RBRACKET else_stmt 
            {
              Object RESULT =null;
		 report_error("Expresión inválida en la condición 'if'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_stmt",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_stmt ::= IF LPAREN expr RPAREN error 
            {
              Object RESULT =null;
		 report_error("Estructura 'if' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_stmt",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_stmt ::= ELSE LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else_stmt",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_stmt ::= ELSE error 
            {
              Object RESULT =null;
		 report_error("Estructura 'else' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else_stmt",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else_stmt",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$0 ::= 
            {
              Object RESULT =null;
 iniciarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_stmt ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET NT$0 bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 finalizarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_stmt",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_stmt ::= FOR error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Condición inválida en el ciclo 'for'."); finalizarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_stmt",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_stmt ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error 
            {
              Object RESULT =null;
		 report_error("Estructura del ciclo 'for' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_stmt",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$1 ::= 
            {
              Object RESULT =null;
 iniciarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while_stmt ::= WHILE LPAREN expr RPAREN LBRACKET NT$1 bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 finalizarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_stmt",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while_stmt ::= WHILE error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Condición inválida en el ciclo 'while'."); finalizarBucle(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_stmt",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while_stmt ::= WHILE LPAREN expr RPAREN error 
            {
              Object RESULT =null;
		 report_error("Estructura del ciclo 'while' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_stmt",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch_stmt ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch_stmt",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch_stmt ::= SWITCH error case_list case_end RBRACKET 
            {
              Object RESULT =null;
		 report_error("Estructura 'switch' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch_stmt",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_stmt ::= SWITCH LPAREN arit_exp RPAREN error 
            {
              Object RESULT =null;
		 report_error("Estructura 'switch' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch_stmt",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_list ::= CASE arit_exp COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_list ::= CASE arit_exp COLON bloque case_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // case_list ::= CASE error 
            {
              Object RESULT =null;
		 report_error("Estructura 'case' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_end ::= DEFAULT COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_end ::= DEFAULT error 
            {
              Object RESULT =null;
		 report_error("Estructura 'default' inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_end ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constante ::= CONST tipo_var ID EQ expr SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ExprValue valor = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                String idStr = id.value.toString();
                int linea = id.left + 1;
                insertarConstante(tipo, idStr, valor.valor, linea);
             
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constante ::= CONST tipo_var ID EQ expr error 
            {
              Object RESULT =null;
		 report_error("Falta punto y coma en la declaración de constante."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable ::= tipo_var id_list SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Pair<String,Integer>> ids = (List<Pair<String,Integer>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                String tipoStr = tipo.toString();
                for (Pair<String, Integer> pair : ids) {
                    String idStr = pair.getKey();
                    int linea = pair.getValue();
                    insertarVar(tipoStr, idStr, linea);
                }
             
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable ::= tipo_var id_list error 
            {
              Object RESULT =null;
		 report_error("Falta punto y coma en la declaración de variable."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_var ::= TYPE_INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_var ::= TYPE_LONG 
            {
              String RESULT =null;
		 RESULT = "long"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_var ::= TYPE_SHORT 
            {
              String RESULT =null;
		 RESULT = "short"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_var ::= TYPE_CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // id_list ::= ID next_id_list 
            {
              List<Pair<String,Integer>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rest_idsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rest_idsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Pair<String,Integer>> rest_ids = (List<Pair<String,Integer>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                List<Pair<String, Integer>> ids = new ArrayList<>();
                ids.add(new Pair<>(id.value.toString(), id.left + 1));
                ids.addAll(rest_ids);
                RESULT = ids;
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_list",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // next_id_list ::= COMMA ID next_id_list 
            {
              List<Pair<String,Integer>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rest_idsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rest_idsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Pair<String,Integer>> rest_ids = (List<Pair<String,Integer>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                    List<Pair<String, Integer>> ids = new ArrayList<>();
                    ids.add(new Pair<>(id.value.toString(), id.left + 1));
                    ids.addAll(rest_ids);
                    RESULT = ids;
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // next_id_list ::= 
            {
              List<Pair<String,Integer>> RESULT =null;
		 RESULT = new ArrayList<Pair<String, Integer>>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignacion ::= ID op_asignacion expr 
            {
              Object RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		java_cup.runtime.Symbol var_id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
                    String id = var_id.value.toString();
                    int linea = var_id.left + 1;
                    verificarVariableDefinida(id, linea);
                    // Código adicional para manejo de asignación
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignacion ::= ID op_incremento 
            {
              Object RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		java_cup.runtime.Symbol var_id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                    String id = var_id.value.toString();
                    int linea = var_id.left + 1;
                    verificarVariableDefinida(id, linea);
                    // Código adicional para incremento/decremento
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion ::= ID op_asignacion error 
            {
              Object RESULT =null;
		 report_error("Expresión de asignación inválida."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_asignacion ::= EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_asignacion ::= PLUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_asignacion ::= MINUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_asignacion ::= TIMES_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_asignacion ::= DIV_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_incremento ::= PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_incremento ::= MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr PLUS expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            if (left.esConstante && right.esConstante) {
                if (left.tipo.equals("int") && right.tipo.equals("int")) {
                    int valor = ((Integer) left.valor) + ((Integer) right.valor);
                    RESULT = new ExprValue(true, valor, "int");
                } else {
                    // Manejo de otros tipos
                    RESULT = new ExprValue(false, null, null);
                }
            } else {
                RESULT = new ExprValue(false, null, null);
            }
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr MINUS expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            if (left.esConstante && right.esConstante) {
                if (left.tipo.equals("int") && right.tipo.equals("int")) {
                    int valor = ((Integer) left.valor) - ((Integer) right.valor);
                    RESULT = new ExprValue(true, valor, "int");
                } else {
                    RESULT = new ExprValue(false, null, null);
                }
            } else {
                RESULT = new ExprValue(false, null, null);
            }
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr TIMES expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            if (left.esConstante && right.esConstante) {
                if (left.tipo.equals("int") && right.tipo.equals("int")) {
                    int valor = ((Integer) left.valor) * ((Integer) right.valor);
                    RESULT = new ExprValue(true, valor, "int");
                } else {
                    RESULT = new ExprValue(false, null, null);
                }
            } else {
                RESULT = new ExprValue(false, null, null);
            }
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr DIV expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            if (left.esConstante && right.esConstante) {
                if (left.tipo.equals("int") && right.tipo.equals("int")) {
                    int valor = ((Integer) left.valor) / ((Integer) right.valor);
                    RESULT = new ExprValue(true, valor, "int");
                } else {
                    RESULT = new ExprValue(false, null, null);
                }
            } else {
                RESULT = new ExprValue(false, null, null);
            }
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr MOD expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            if (left.esConstante && right.esConstante) {
                if (left.tipo.equals("int") && right.tipo.equals("int")) {
                    int valor = ((Integer) left.valor) % ((Integer) right.valor);
                    RESULT = new ExprValue(true, valor, "int");
                } else {
                    RESULT = new ExprValue(false, null, null);
                }
            } else {
                RESULT = new ExprValue(false, null, null);
            }
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr AND expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            // Implementar lógica para operadores lógicos
            RESULT = new ExprValue(false, null, null);
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= expr OR expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            RESULT = new ExprValue(false, null, null);
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= NOT expr 
            {
              ExprValue RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue exp = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            RESULT = new ExprValue(false, null, null);
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr op_relacional expr 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            RESULT = new ExprValue(false, null, null);
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= LPAREN expr RPAREN 
            {
              ExprValue RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ExprValue exp = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
            RESULT = exp;
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= ID LPAREN expr_list RPAREN 
            {
              ExprValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		
            // Llamada a función
            RESULT = new ExprValue(false, null, null);
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= ID 
            {
              ExprValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            String idStr = id.value.toString();
            int linea = id.left + 1;
            verificarVariableDefinida(idStr, linea);
            Simbolo simbolo = ts.obtenerSimbolo(idStr);
            if (simbolo != null && simbolo.isEsConstante()) {
                RESULT = new ExprValue(true, simbolo.getValor(), simbolo.getTipo_var());
            } else {
                RESULT = new ExprValue(false, null, null);
            }
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= literal 
            {
              ExprValue RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            RESULT = new ExprValue(true, lit, "char");
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= number 
            {
              ExprValue RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
            RESULT = new ExprValue(true, num, "int");
        
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                // Implementar lógica similar a 'expr' para constant folding
                RESULT = new ExprValue(false, null, null);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = new ExprValue(false, null, null);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = new ExprValue(false, null, null);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arit_exp ::= arit_exp DIV arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = new ExprValue(false, null, null);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arit_exp ::= arit_exp MOD arit_exp 
            {
              ExprValue RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprValue left = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprValue right = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = new ExprValue(false, null, null);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arit_exp ::= LPAREN arit_exp RPAREN 
            {
              ExprValue RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ExprValue exp = (ExprValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                RESULT = exp;
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arit_exp ::= ID 
            {
              ExprValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol id = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                String idStr = id.value.toString();
                int linea = id.left + 1;
                verificarVariableDefinida(idStr, linea);
                Simbolo simbolo = ts.obtenerSimbolo(idStr);
                if (simbolo != null && simbolo.isEsConstante()) {
                    RESULT = new ExprValue(true, simbolo.getValor(), simbolo.getTipo_var());
                } else {
                    RESULT = new ExprValue(false, null, null);
                }
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arit_exp ::= number 
            {
              ExprValue RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = new ExprValue(true, num, "int");
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // literal ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol c = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = c.value;
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal ::= STRING 
            {
              Object RESULT =null;
		
                RESULT = "";
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal ::= TRUE 
            {
              Object RESULT =null;
		
                RESULT = true;
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal ::= FALSE 
            {
              Object RESULT =null;
		
                RESULT = false;
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // number ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol n = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = Integer.parseInt(n.value.toString());
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // number ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java_cup.runtime.Symbol n = (java_cup.runtime.Symbol)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                RESULT = Float.parseFloat(n.value.toString());
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
