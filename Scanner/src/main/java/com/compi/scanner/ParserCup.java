
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi.scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.compi.scanner.semantico.*;
import com.compi.scanner.traductor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\003\003\000\002\010" +
    "\004\000\002\007\004\000\002\007\003\000\002\013\004" +
    "\000\002\013\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\022\005\000\002" +
    "\022\005\000\002\040\002\000\002\023\005\000\002\041" +
    "\002\000\002\032\006\000\002\032\002\000\002\042\002" +
    "\000\002\014\013\000\002\014\010\000\002\014\010\000" +
    "\002\043\002\000\002\034\004\000\002\015\003\000\002" +
    "\015\002\000\002\015\003\000\002\035\005\000\002\035" +
    "\003\000\002\036\004\000\002\011\003\000\002\011\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\012\003\000\002\012\003\000\002\044\002\000\002\016" +
    "\011\000\002\016\007\000\002\045\002\000\002\037\006" +
    "\000\002\017\006\000\002\017\004\000\002\017\002\000" +
    "\002\020\007\000\002\020\006\000\002\046\002\000\002" +
    "\021\006\000\002\047\002\000\002\024\006\000\002\050" +
    "\002\000\002\024\005\000\002\024\005\000\002\026\003" +
    "\000\002\026\003\000\002\005\003\000\002\005\005\000" +
    "\002\004\005\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\012\033\005\034\013\035\007\036\012\001" +
    "\002\000\004\002\201\001\002\000\004\004\ufffa\001\002" +
    "\000\004\004\200\001\002\000\004\004\ufff8\001\002\000" +
    "\014\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\001\002" +
    "\000\004\002\000\001\002\000\004\004\ufff7\001\002\000" +
    "\004\004\ufff9\001\002\000\014\033\005\034\013\035\007" +
    "\036\012\037\020\001\002\000\004\004\166\001\002\000" +
    "\016\002\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\001\002\000\014\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\001\002\000\004\004\161\001\002\000\016\002\uffff" +
    "\033\005\034\013\035\007\036\012\037\020\001\002\000" +
    "\004\004\024\001\002\000\016\002\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\001\002\000\006\015\uffef\017" +
    "\026\001\002\000\004\015\142\001\002\000\004\003\027" +
    "\001\002\000\026\003\043\004\036\030\035\032\032\033" +
    "\005\034\013\035\007\036\012\040\042\041\030\001\002" +
    "\000\004\014\141\001\002\000\030\003\uffe1\004\uffe1\020" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\040\uffe1\041\uffe1\001\002\000\006\003\126\015\uffcf\001" +
    "\002\000\030\003\043\004\036\020\uffe3\030\035\032\032" +
    "\033\005\034\013\035\007\036\012\040\042\041\030\001" +
    "\002\000\004\020\124\001\002\000\006\003\073\015\uffd6" +
    "\001\002\000\010\007\047\026\uffcb\027\uffcb\001\002\000" +
    "\004\014\046\001\002\000\030\003\uffdb\004\uffdb\020\uffdb" +
    "\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040" +
    "\uffdb\041\uffdb\001\002\000\030\003\uffda\004\uffda\020\uffda" +
    "\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\040" +
    "\uffda\041\uffda\001\002\000\004\014\045\001\002\000\030" +
    "\003\uffdc\004\uffdc\020\uffdc\030\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\001\002\000\030" +
    "\003\uffe0\004\uffe0\020\uffe0\030\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\040\uffe0\041\uffe0\001\002\000\030" +
    "\003\uffde\004\uffde\020\uffde\030\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\040\uffde\041\uffde\001\002\000\030" +
    "\003\uffdf\004\uffdf\020\uffdf\030\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\001\002\000\012" +
    "\003\054\004\uffcd\042\uffcd\043\uffcd\001\002\000\006\026" +
    "\051\027\053\001\002\000\004\014\uffc8\001\002\000\004" +
    "\014\uffca\001\002\000\004\014\uffc7\001\002\000\004\014" +
    "\uffc9\001\002\000\010\004\056\042\063\043\062\001\002" +
    "\000\026\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\001\002\000\014" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\001\002\000" +
    "\026\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\001\002\000\014\010" +
    "\065\011\066\012\070\013\067\014\uffcc\001\002\000\026" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\001\002\000\026\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\001\002\000\010\004\056\042\063" +
    "\043\062\001\002\000\010\004\uffbd\042\uffbd\043\uffbd\001" +
    "\002\000\010\004\uffbc\042\uffbc\043\uffbc\001\002\000\010" +
    "\004\uffba\042\uffba\043\uffba\001\002\000\010\004\uffbb\042" +
    "\uffbb\043\uffbb\001\002\000\014\010\065\011\066\012\070" +
    "\013\067\014\uffc5\001\002\000\004\017\117\001\002\000" +
    "\026\003\043\004\036\030\035\032\032\033\005\034\013" +
    "\035\007\036\012\040\042\041\030\001\002\000\004\015" +
    "\075\001\002\000\010\004\056\042\063\043\062\001\002" +
    "\000\004\016\106\001\002\000\012\022\101\023\102\024" +
    "\100\025\104\001\002\000\010\004\uffbf\042\uffbf\043\uffbf" +
    "\001\002\000\010\004\uffc1\042\uffc1\043\uffc1\001\002\000" +
    "\010\004\uffc0\042\uffc0\043\uffc0\001\002\000\010\004\056" +
    "\042\063\043\062\001\002\000\010\004\uffbe\042\uffbe\043" +
    "\uffbe\001\002\000\004\016\uffc4\001\002\000\004\017\uffd5" +
    "\001\002\000\004\020\110\001\002\000\032\003\uffd2\004" +
    "\uffd2\020\uffd2\030\uffd2\031\111\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\040\uffd2\041\uffd2\001\002\000\006\003" +
    "\113\017\114\001\002\000\030\003\uffd7\004\uffd7\020\uffd7" +
    "\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\001\002\000\030\003\uffd3\004\uffd3\020\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040" +
    "\uffd3\041\uffd3\001\002\000\026\003\043\004\036\030\035" +
    "\032\032\033\005\034\013\035\007\036\012\040\042\041" +
    "\030\001\002\000\004\020\116\001\002\000\030\003\uffd4" +
    "\004\uffd4\020\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\041\uffd4\001\002\000\026\003\043" +
    "\004\036\030\035\032\032\033\005\034\013\035\007\036" +
    "\012\040\042\041\030\001\002\000\004\020\121\001\002" +
    "\000\032\003\uffd9\004\uffd9\020\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9" +
    "\001\002\000\032\003\uffd2\004\uffd2\020\uffd2\030\uffd2\031" +
    "\111\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2" +
    "\041\uffd2\001\002\000\030\003\uffd8\004\uffd8\020\uffd8\030" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\001\002\000\016\002\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\001\002\000\004\020\uffe2\001\002" +
    "\000\026\003\043\004\036\030\035\032\032\033\005\034" +
    "\013\035\007\036\012\040\042\041\030\001\002\000\004" +
    "\015\134\001\002\000\004\017\131\001\002\000\026\003" +
    "\043\004\036\030\035\032\032\033\005\034\013\035\007" +
    "\036\012\040\042\041\030\001\002\000\004\020\133\001" +
    "\002\000\030\003\uffd1\004\uffd1\020\uffd1\030\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\001" +
    "\002\000\010\004\056\042\063\043\062\001\002\000\004" +
    "\016\136\001\002\000\004\017\uffce\001\002\000\004\020" +
    "\140\001\002\000\030\003\uffd0\004\uffd0\020\uffd0\030\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041" +
    "\uffd0\001\002\000\030\003\uffdd\004\uffdd\020\uffdd\030\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041" +
    "\uffdd\001\002\000\016\003\uffeb\016\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\001\002\000\016\003\154\016\uffe8\033" +
    "\005\034\013\035\007\036\012\001\002\000\004\016\145" +
    "\001\002\000\004\017\146\001\002\000\026\003\043\004" +
    "\036\030\035\032\032\033\005\034\013\035\007\036\012" +
    "\040\042\041\030\001\002\000\004\020\150\001\002\000" +
    "\016\002\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\001\002\000\004\016\uffea\001\002\000\004\004\160\001" +
    "\002\000\006\016\uffe9\021\156\001\002\000\004\016\uffe7" +
    "\001\002\000\006\016\uffe5\021\uffe5\001\002\000\012\033" +
    "\005\034\013\035\007\036\012\001\002\000\006\016\uffe6" +
    "\021\uffe6\001\002\000\006\016\uffe4\021\uffe4\001\002\000" +
    "\004\017\162\001\002\000\004\003\163\001\002\000\026" +
    "\003\043\004\036\030\035\032\032\033\005\034\013\035" +
    "\007\036\012\040\042\041\030\001\002\000\004\020\165" +
    "\001\002\000\016\002\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\001\002\000\014\003\ufff4\014\ufff4\015\uffef" +
    "\017\026\021\ufff4\001\002\000\006\003\170\014\171\001" +
    "\002\000\032\003\ufff5\004\ufff5\020\ufff5\030\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\001\002\000\032\003\ufff6\004\ufff6\020\ufff6\030\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\001\002\000\010\003\ufff0\014\ufff0\021\173" +
    "\001\002\000\004\004\175\001\002\000\006\003\ufff3\014" +
    "\ufff3\001\002\000\010\003\ufff2\014\ufff2\021\ufff2\001\002" +
    "\000\010\003\ufff0\014\ufff0\021\173\001\002\000\006\003" +
    "\ufff1\014\ufff1\001\002\000\010\003\ufff4\014\ufff4\021\ufff4" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\014\002\005\003\003\007\013\010\010\022" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\014\013\020\014\015\022\016\001\001\000\004\023" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\021\014\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\005\006\032\011" +
    "\033\012\030\016\037\020\040\022\043\024\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\127\046" +
    "\126\001\001\000\022\002\005\006\032\011\124\012\030" +
    "\016\037\020\040\022\043\024\036\001\001\000\002\001" +
    "\001\000\006\037\071\045\073\001\001\000\004\050\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\054\001" +
    "\001\000\004\026\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\060\027\056\031\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\070\027\056" +
    "\031\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\063\001\001" +
    "\000\002\001\001\000\022\002\005\006\032\011\106\012" +
    "\030\016\037\020\040\022\043\024\036\001\001\000\002" +
    "\001\001\000\010\004\075\027\076\031\057\001\001\000" +
    "\002\001\001\000\004\030\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\104\031" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\005\006\032\011\114\012\030\016\037\020\040\022" +
    "\043\024\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\005\006\032\011\117\012\030\016\037\020" +
    "\040\022\043\024\036\001\001\000\002\001\001\000\004" +
    "\044\121\001\001\000\004\017\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\005" +
    "\006\032\011\136\012\030\016\037\020\040\022\043\024" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\005\006\032\011\131\012\030\016\037\020\040\022" +
    "\043\024\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\134\027\076\031\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\143\043\142\001\001\000" +
    "\012\002\151\015\150\035\152\036\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\005\006\032\011" +
    "\146\012\030\016\037\020\040\022\043\024\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\151\036\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\005\006\032\011\163\012\030\016\037\020" +
    "\040\022\043\024\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\171\042\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\175\001\001\000\004\032\176\001\001\000\002\001\001" +
    "\000\004\040\171\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void semantic_error(Symbol sym) {
        System.err.println("Error semántico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }
        
    public Symbol getS(){
        return this.sym;
    };
  public Generador generador = new Generador();

  // Métodos para la tabla de símbolos
  private TablaSimbolos ts = new TablaSimbolos();
  public PilaSemantica pilaSemantica = new PilaSemantica();

  public void imprimirTablasSimbolos() {
    ts.imprimirTablas();
  }

  public String getAmbito() {
    String ambito = "global";
    if (pilaSemantica.get("FUNCION") != null) {
      RS_FUNC rs_func = (RS_FUNC) pilaSemantica.get("FUNCION");
      ambito = rs_func.getAmbito();
    }
    return ambito;
  }


  // Acciones Semanticas

  public void recuerdaTipo(String tipo) {
    RS_TIPO rs_tipo = new RS_TIPO(tipo);
    pilaSemantica.push(rs_tipo);
  }

  public void recuerdaID(String id) {
    RS_ID rs_id = new RS_ID(id);
    pilaSemantica.push(rs_id);
  }

  public void insertarTS() {
    if (pilaSemantica.top().getTipo() == "FUNC") {
    System.out.println("Funcion encontrada");
      return;
    }
    // buscar RS_TIPO
    RS_TIPO rs_tipo = (RS_TIPO) pilaSemantica.pop();

    // obtener el ámbito
    String ambito = getAmbito();

    // validar que no exista la variable en el ámbito actual

    // agregar a la tabla de símbolos
    while (!pilaSemantica.isEmpty() && pilaSemantica.top().getTipo() ==  "ID") {
      RS_ID rs_id = (RS_ID) pilaSemantica.pop();

      if (ts.contiene(rs_id.getId(), ambito)) {
        semantic_error(cur_token);
        System.err.println("La variable '" + rs_id.getId() + "' ya está definida.");
        return;
      }

      Simbolo simbolo = new Simbolo("VAR", rs_tipo.getTipo_Var(), rs_id.getId(), ambito);
      ts.insertarVar(simbolo);

      // generar código para la declaración de la variable
      generador.genVar(rs_id.getId(), rs_tipo.getTipo_Var());
    }

  }

  public void recuerdaOP(String op) {
    RS_OP rs_op = new RS_OP(op);
    pilaSemantica.push(rs_op);
  }

  public void recuerdaVAR(String id) {
    // Obtener el ámbito
    String ambito = getAmbito();

    // Verificar si la variable está definida
    if (!ts.contiene(id, ambito)) {
      semantic_error(cur_token);
      System.err.println("La variable '" + id + "' no está definida.");
      return;
    }
    // Obtener el tipo de la variable
    String tipo = ts.getTipo(id, ambito);

    // Agregar a la pila semántica
    RS_DO rs_do = new RS_DO(id, tipo);

    pilaSemantica.push(rs_do);
  }

  public void recuerdaCONST(Object num) {
    // Agregar a la pila semántica
    RS_DO rs_const = new RS_DO(num.toString(), "int", true);
    pilaSemantica.push(rs_const);
  }

  public void evalBinary() {
    RS_DO right = (RS_DO) pilaSemantica.pop();
    RS_OP op = (RS_OP) pilaSemantica.pop();
    RS_DO left = (RS_DO) pilaSemantica.pop();

    // Verificar que los tipos sean compatibles
    if (!left.getTipo().equals(right.getTipo())) {
      semantic_error(cur_token);
      System.err.println("Tipos incompatibles en la operación binaria.");
      return;
    }

    // Los DO son constantes?
    RS_DO rs_result = null;
    if (left.isConstante() && right.isConstante()) {
      // Evaluar la operación
      Object result = null;
      switch (op.getOP()) {
        case "+":
          result = Integer.parseInt(left.getId()) + Integer.parseInt(right.getId());
          break;
        case "-":
          result = Integer.parseInt(left.getId()) - Integer.parseInt(right.getId());
          break;
        case "*":
          result = Integer.parseInt(left.getId()) * Integer.parseInt(right.getId());
          break;
        case "/":
          result = Integer.parseInt(left.getId()) / Integer.parseInt(right.getId());
          break;
      }
      // Agregar el resultado a la pila semántica
      rs_result = new RS_DO(result.toString(), "int", true);
    } else {
      // generar el código para la operación
      String var = generador.genBinary(left, op.getOP(), right);
      // Crear RS_DO de tipo dirección con el lugar donde quedo el resultado, puede
      // ser una variable temporal
      rs_result = new RS_DO(var, "int");
    }

    // Guardar el resultado en la pila semántica
    pilaSemantica.push(rs_result);

  }

  public String generateLabel() {
    return generador.getNextNumLabel();
  }

  public void startIF() {
    RS_IF rs_if = new RS_IF("ELSE" + generateLabel(), "EXITIF" + generateLabel());
    pilaSemantica.push(rs_if);
  }

  public void testIF() {
    RS_DO right = (RS_DO) pilaSemantica.pop();
    RS_OP op = (RS_OP) pilaSemantica.pop();
    RS_DO left = (RS_DO) pilaSemantica.pop();


    RS_IF rs_if = (RS_IF) pilaSemantica.get("IF");
    // Generar código para la condición
    generador.genTest(right, op.getOP(), left, rs_if.getElseLabel());
  }

  public void startELSE() {
    RS_IF rs_if = (RS_IF) pilaSemantica.get("IF");
    generador.genJump(rs_if.getExitLabel());
    generador.genLabel(rs_if.getElseLabel());
  }

  public void endIF() {
    RS_IF rs_if = (RS_IF) pilaSemantica.pop();
    generador.genLabel(rs_if.getExitLabel());
  }

  public void startWHILE() {
    RS_WHILE rs_while = new RS_WHILE("EXITWHILE" + generateLabel(), "STARTWHILE" + generateLabel());
    pilaSemantica.push(rs_while);
    generador.genLabel(rs_while.getStartLabel());
  }

  public void testWHILE() {
        RS_DO right = (RS_DO) pilaSemantica.pop();
        RS_OP op = (RS_OP) pilaSemantica.pop();
        RS_DO left = (RS_DO) pilaSemantica.pop();

        RS_WHILE rs_while = (RS_WHILE) pilaSemantica.get("WHILE");
        // Generar código para la condición
        generador.genTest(left, op.getOP(), right, rs_while.getExitLabel());
    }

  public void endWHILE() {
    RS_WHILE rs_while = (RS_WHILE) pilaSemantica.pop();
    generador.genJump(rs_while.getStartLabel());
    generador.genLabel(rs_while.getExitLabel());
  }

  public void testBreak() {
    // Verificar que esté dentro de un bucle
    RS_WHILE rs_while = (RS_WHILE) pilaSemantica.get("WHILE");
    if (rs_while == null) {
      semantic_error(cur_token);
      System.err.println("'break' fuera de contexto válido (se requiere bucle).");
    }
    // Generar código para el salto
    generador.genJump(rs_while.getExitLabel());
  }

  public void testContinue() {
    // Verificar que esté dentro de un bucle
    RS_WHILE rs_while = (RS_WHILE) pilaSemantica.get("WHILE");
    if (rs_while == null) {
      semantic_error(cur_token);
      System.err.println("'continue' fuera de contexto válido (se requiere bucle).");
    }
    // Generar código para el salto
    generador.genJump(rs_while.getStartLabel());
  }

  public void startFunc() {
    RS_FUNC rs_func = new RS_FUNC("FUNC" + generateLabel());
    RS_ID rs_id = (RS_ID) pilaSemantica.pop();

    ts.insertarFuncion(new Simbolo("FUNCION", rs_id.getId().toString(), "Se cae", "global"));

    pilaSemantica.push(rs_func);
  }

  public void endFunc() {
    pilaSemantica.pop();
  }

  public void incrementarValor(String op) {
    RS_ID rs_do = (RS_ID) pilaSemantica.pop();
    // Verificar que sea una variable
    if (!ts.getTipo(rs_do.getId(), getAmbito()).equals("int")) {
      semantic_error(cur_token);
      System.err.println("El operador '" + op + "' solo se puede aplicar a variables de tipo 'int'.");
      return;
    }
    // Generar código para la operación
    generador.genIncrement(rs_do.getId(), op);
  }

  public void asignarValor() {
    RS_DO rs_do = (RS_DO) pilaSemantica.pop();
    RS_ID rs_id = (RS_ID) pilaSemantica.pop();

    // Obtener el ámbito
    String ambito = getAmbito();

    // Verificar que la variable esté definida
    if (!ts.contiene(rs_id.getId(), ambito)) {
      semantic_error(cur_token);
      System.err.println("La variable '" + rs_id.getId() + "' no está definida.");
      return;
    }
    // Verificar que los tipos sean compatibles
    if (!ts.getTipo(rs_id.getId(), ambito).equals(rs_do.getTipo_Var())) {
      semantic_error(cur_token);
      System.err.println("Tipos incompatibles en la asignación.");
      return;
    }
    // Generar código para la asignación
    generador.genAssign(rs_id.getId(), rs_do.getId());
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= globales 
            {
              Object RESULT =null;
		 generador.generarArchivo(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= global_decl_list funciones 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("globales",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= global_decl_list variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl_list ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_var ::= TYPE_INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_var ::= TYPE_LONG 
            {
              String RESULT =null;
		 RESULT = "long"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_var ::= TYPE_SHORT 
            {
              String RESULT =null;
		 RESULT = "short"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_var ::= TYPE_CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= tipo_var id_list SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 
                recuerdaTipo(tipo); 
                insertarTS(); 
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= tipo_var id_list error 
            {
              Object RESULT =null;
		 report_error("Missing semicolon in variable declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 recuerdaID(id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_list ::= ID NT$0 next_id_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_list",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 recuerdaID(id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // next_id_list ::= COMMA ID NT$1 next_id_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // next_id_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 recuerdaID(id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= tipo_var ID NT$2 LPAREN parametros RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		 endFunc(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= tipo_var ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid function declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= VOID ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid function declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
 startFunc(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= NT$3 parametro_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 insertarTS(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro_list ::= param_list_elements 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametro_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error in parameter list."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list_elements ::= param_list_elements COMMA param_element 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param_list_elements",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list_elements ::= param_element 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param_list_elements",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param_element ::= tipo_var ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
                      recuerdaTipo(tipo); 
                      recuerdaID(id.toString()); 
                      insertarTS(); 
                  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param_element",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque ::= instruccion bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= estru_control 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= asignacion SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= BREAK SEMI 
            {
              Object RESULT =null;
		 testBreak(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		testContinue(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= error 
            {
              Object RESULT =null;
		 report_error("Invalid instruction."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estru_control ::= if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estru_control ::= while 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =null;
 
                    startELSE(); 
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF if_condition LBRACKET bloque RBRACKET NT$4 else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                    endIF();
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IF error bloque RBRACKET else 
            {
              Object RESULT =null;
		
                    report_error("Invalid expression in 'if' condition."); 
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {
              Object RESULT =null;
 startIF(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_condition ::= NT$5 LPAREN expr_bool RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 testIF(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_condition",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else ::= ELSE LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else ::= ELSE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'else' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // while ::= WHILE while_condition LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 endWHILE(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // while ::= WHILE error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'while' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$6 ::= 
            {
              Object RESULT =null;
 startWHILE(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_condition ::= NT$6 LPAREN expr_bool RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 testWHILE(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_condition",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 recuerdaID(id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion ::= ID EQ NT$7 expr_arit 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 asignarValor(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 recuerdaID(id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= ID NT$8 op_incremento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion ::= ID EQ error 
            {
              Object RESULT =null;
		 report_error("Invalid assignment expression."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op_incremento ::= PLUS_PLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 incrementarValor(op.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op_incremento ::= MINUS_MINUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 incrementarValor(op.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_arit ::= literal 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_arit",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_arit ::= expr_arit op_aritmetico expr_arit 
            {
              Object RESULT =null;
		 evalBinary(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_arit",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_bool ::= literal op_relacional literal 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_bool",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= number 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 recuerdaVAR(id.toString()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_relacional ::= EQ_EQ 
            {
              Object RESULT =null;
		 recuerdaOP("=="); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_relacional ::= GT 
            {
              Object RESULT =null;
		 recuerdaOP(">"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_relacional ::= LT 
            {
              Object RESULT =null;
		 recuerdaOP("<"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_relacional ::= NOT_EQ 
            {
              Object RESULT =null;
		 recuerdaOP("!="); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_aritmetico ::= PLUS 
            {
              Object RESULT =null;
		 recuerdaOP("+"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_aritmetico",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_aritmetico ::= MINUS 
            {
              Object RESULT =null;
		 recuerdaOP("-"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_aritmetico",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_aritmetico ::= TIMES 
            {
              Object RESULT =null;
		 recuerdaOP("*"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_aritmetico",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_aritmetico ::= DIV 
            {
              Object RESULT =null;
		 recuerdaOP("/"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_aritmetico",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // number ::= INT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 recuerdaCONST(num); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // number ::= FLOAT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 recuerdaCONST(num); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
