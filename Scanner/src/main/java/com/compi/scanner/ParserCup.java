
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi.scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.compi.scanner.semantico.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\005\003\000\002\020" +
    "\004\000\002\015\004\000\002\015\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\023\004\000" +
    "\002\023\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\005\000\002\014\004\000\002\014\003\000" +
    "\002\007\006\000\002\007\005\000\002\007\004\000\002" +
    "\010\005\000\002\010\003\000\002\012\006\000\002\012" +
    "\004\000\002\011\005\000\002\011\003\000\002\021\003" +
    "\000\002\021\004\000\002\016\005\000\002\016\003\000" +
    "\002\016\002\000\002\016\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\024" +
    "\012\000\002\024\012\000\002\024\010\000\002\024\010" +
    "\000\002\025\006\000\002\025\004\000\002\025\002\000" +
    "\002\025\003\000\002\026\012\000\002\026\007\000\002" +
    "\026\007\000\002\027\006\000\002\027\004\000\002\027" +
    "\002\000\002\030\015\000\002\030\006\000\002\030\013" +
    "\000\002\031\011\000\002\031\006\000\002\031\007\000" +
    "\002\032\012\000\002\032\007\000\002\032\007\000\002" +
    "\033\006\000\002\033\007\000\002\033\004\000\002\013" +
    "\005\000\002\013\004\000\002\013\002\000\002\034\010" +
    "\000\002\034\010\000\002\035\005\000\002\035\005\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\036\004\000\002\053\005\000\002\053" +
    "\002\000\002\037\005\000\002\037\004\000\002\037\005" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\006\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\016\003\015\007\020\056\006\057\016\060" +
    "\010\061\014\001\002\000\004\002\366\001\002\000\020" +
    "\003\ufffd\007\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\001\002\000\004\004\uffb7\001\002\000\004\004\365" +
    "\001\002\000\004\004\uffb5\001\002\000\020\003\ufffc\007" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\020\003\ufffb\007\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\004\uffb4\001\002\000\020\003\ufffa\007\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\004\004\uffb6" +
    "\001\002\000\020\003\015\007\020\056\006\057\016\060" +
    "\010\061\014\062\105\001\002\000\012\056\006\057\016" +
    "\060\010\061\014\001\002\000\004\004\022\001\002\000" +
    "\004\014\023\001\002\000\024\004\031\006\027\012\025" +
    "\013\030\022\035\046\033\067\024\070\037\071\036\001" +
    "\002\000\046\003\uff86\005\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\023\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\044\uff86\045\uff86" +
    "\001\002\000\044\003\uff88\005\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\023\uff88\026\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\044\uff88\045\uff88\001" +
    "\002\000\044\003\uff99\005\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\023\uff99\026\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\044\uff99\045\uff99\001\002" +
    "\000\044\003\uff89\005\uff89\015\uff89\016\uff89\017\uff89\020" +
    "\uff89\021\uff89\023\uff89\026\uff89\030\uff89\031\uff89\032\uff89" +
    "\033\uff89\034\uff89\035\uff89\044\uff89\045\uff89\001\002\000" +
    "\044\003\uff87\005\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\023\uff87\026\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\034\uff87\035\uff87\044\uff87\045\uff87\001\002\000\046" +
    "\003\uff9b\005\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\073\023\uff9b\026\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\044\uff9b\045\uff9b\001\002\000" +
    "\044\003\uff9a\005\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\023\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\044\uff9a\045\uff9a\001\002\000\024" +
    "\004\031\006\027\012\025\013\030\022\035\046\033\067" +
    "\024\070\037\071\036\001\002\000\040\003\071\005\044" +
    "\015\046\016\041\017\053\020\051\021\070\030\057\031" +
    "\042\032\050\033\047\034\055\035\045\044\056\045\043" +
    "\001\002\000\024\004\031\006\027\012\025\013\030\022" +
    "\035\046\033\067\024\070\037\071\036\001\002\000\044" +
    "\003\uff8a\005\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021" +
    "\uff8a\023\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\044\uff8a\045\uff8a\001\002\000\046\003" +
    "\uff85\005\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\023\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\044\uff85\045\uff85\001\002\000\036" +
    "\005\044\015\046\016\041\017\053\020\051\023\052\030" +
    "\057\031\042\032\050\033\047\034\055\035\045\044\056" +
    "\045\043\001\002\000\024\004\031\006\027\012\025\013" +
    "\030\022\035\046\033\067\024\070\037\071\036\001\002" +
    "\000\024\004\uff8f\006\uff8f\012\uff8f\013\uff8f\022\uff8f\046" +
    "\uff8f\067\uff8f\070\uff8f\071\uff8f\001\002\000\024\004\031" +
    "\006\027\012\025\013\030\022\035\046\033\067\024\070" +
    "\037\071\036\001\002\000\024\004\031\006\027\012\025" +
    "\013\030\022\035\046\033\067\024\070\037\071\036\001" +
    "\002\000\024\004\uff8b\006\uff8b\012\uff8b\013\uff8b\022\uff8b" +
    "\046\uff8b\067\uff8b\070\uff8b\071\uff8b\001\002\000\024\004" +
    "\031\006\027\012\025\013\030\022\035\046\033\067\024" +
    "\070\037\071\036\001\002\000\024\004\uff8d\006\uff8d\012" +
    "\uff8d\013\uff8d\022\uff8d\046\uff8d\067\uff8d\070\uff8d\071\uff8d" +
    "\001\002\000\024\004\uff8e\006\uff8e\012\uff8e\013\uff8e\022" +
    "\uff8e\046\uff8e\067\uff8e\070\uff8e\071\uff8e\001\002\000\024" +
    "\004\031\006\027\012\025\013\030\022\035\046\033\067" +
    "\024\070\037\071\036\001\002\000\044\003\uff9d\005\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023\uff9d\026" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\044\uff9d\045\uff9d\001\002\000\024\004\031\006\027\012" +
    "\025\013\030\022\035\046\033\067\024\070\037\071\036" +
    "\001\002\000\024\004\031\006\027\012\025\013\030\022" +
    "\035\046\033\067\024\070\037\071\036\001\002\000\024" +
    "\004\uff8c\006\uff8c\012\uff8c\013\uff8c\022\uff8c\046\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\001\002\000\024\004\031\006\027" +
    "\012\025\013\030\022\035\046\033\067\024\070\037\071" +
    "\036\001\002\000\024\004\uff90\006\uff90\012\uff90\013\uff90" +
    "\022\uff90\046\uff90\067\uff90\070\uff90\071\uff90\001\002\000" +
    "\044\003\uffa0\005\044\015\046\016\041\017\053\020\051" +
    "\021\uffa0\023\uffa0\026\uffa0\030\057\031\042\032\050\033" +
    "\047\034\055\035\045\044\uffa0\045\uffa0\001\002\000\044" +
    "\003\uff9e\005\044\015\046\016\041\017\053\020\051\021" +
    "\uff9e\023\uff9e\026\uff9e\030\057\031\042\032\050\033\047" +
    "\034\055\035\045\044\056\045\043\001\002\000\044\003" +
    "\uffa4\005\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\023\uffa4\026\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\044\uffa4\045\uffa4\001\002\000\044\003\uffa3" +
    "\005\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023" +
    "\uffa3\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\044\uffa3\045\uffa3\001\002\000\044\003\uffa6\005" +
    "\044\015\uffa6\016\uffa6\017\053\020\051\021\uffa6\023\uffa6" +
    "\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\044\uffa6\045\uffa6\001\002\000\044\003\uffa2\005\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\023\uffa2\026" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\044\uffa2\045\uffa2\001\002\000\044\003\uffa1\005\044\015" +
    "\046\016\041\017\053\020\051\021\uffa1\023\uffa1\026\uffa1" +
    "\030\057\031\042\032\050\033\047\034\055\035\045\044" +
    "\uffa1\045\uffa1\001\002\000\044\003\uffa5\005\044\015\uffa5" +
    "\016\uffa5\017\053\020\051\021\uffa5\023\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\044\uffa5" +
    "\045\uffa5\001\002\000\054\003\uffbb\004\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\025\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\054" +
    "\003\uffba\004\uffba\007\uffba\010\uffba\011\uffba\025\uffba\047" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\001\002\000\044\003\uff9f\005\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023\uff9f\026\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\044\uff9f" +
    "\045\uff9f\001\002\000\030\003\075\004\031\006\027\012" +
    "\025\013\030\022\035\023\uffde\046\033\067\024\070\037" +
    "\071\036\001\002\000\004\023\101\001\002\000\004\023" +
    "\uffdd\001\002\000\040\005\044\015\046\016\041\017\053" +
    "\020\051\023\uffdf\026\077\030\057\031\042\032\050\033" +
    "\047\034\055\035\045\044\056\045\043\001\002\000\030" +
    "\003\075\004\031\006\027\012\025\013\030\022\035\023" +
    "\uffde\046\033\067\024\070\037\071\036\001\002\000\004" +
    "\023\uffe0\001\002\000\044\003\uff9c\005\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c\026\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\044\uff9c\045" +
    "\uff9c\001\002\000\020\003\ufffe\007\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\004\355\001" +
    "\002\000\016\002\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\001\002\000\004\004\342\001\002\000\016\002" +
    "\uffff\056\006\057\016\060\010\061\014\062\105\001\002" +
    "\000\004\004\111\001\002\000\016\002\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000\006\022\112" +
    "\024\113\001\002\000\016\003\332\023\uffd2\056\006\057" +
    "\016\060\010\061\014\001\002\000\004\003\114\001\002" +
    "\000\044\003\137\004\131\007\020\010\130\011\115\047" +
    "\126\051\144\052\120\053\125\056\006\057\016\060\010" +
    "\061\014\063\135\064\116\065\132\066\121\001\002\000" +
    "\006\003\320\022\321\001\002\000\004\021\317\001\002" +
    "\000\052\003\ufff7\004\ufff7\007\ufff7\010\ufff7\011\ufff7\025" +
    "\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\001\002\000\006\003\305\022\306\001\002" +
    "\000\026\004\031\006\027\012\025\013\030\021\302\022" +
    "\035\046\033\067\024\070\037\071\036\001\002\000\052" +
    "\003\ufff6\004\ufff6\007\ufff6\010\ufff6\011\ufff6\025\ufff6\047" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\001\002\000\052\003\137\004\131\007\020\010\130" +
    "\011\115\025\uffe2\047\126\051\144\052\120\053\125\054" +
    "\uffe2\055\uffe2\056\006\057\016\060\010\061\014\063\135" +
    "\064\116\065\132\066\121\001\002\000\004\025\300\001" +
    "\002\000\006\003\233\022\234\001\002\000\006\003\212" +
    "\022\213\001\002\000\004\021\211\001\002\000\006\003" +
    "\202\022\203\001\002\000\020\014\172\036\176\037\174" +
    "\040\173\041\167\042\175\043\171\001\002\000\004\021" +
    "\166\001\002\000\052\003\uffdc\004\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\025\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\001\002\000\052\003\uffda\004" +
    "\uffda\007\uffda\010\uffda\011\uffda\025\uffda\047\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\063\uffda\064\uffda\065\uffda\066\uffda\001\002" +
    "\000\004\021\165\001\002\000\052\003\ufff5\004\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\025\ufff5\047\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\001\002\000\052" +
    "\003\uffec\004\uffec\007\uffec\010\uffec\011\uffec\025\uffec\047" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\001\002\000\004\021\164\001\002\000\052\003\uffdb" +
    "\004\uffdb\007\uffdb\010\uffdb\011\uffdb\025\uffdb\047\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001" +
    "\002\000\004\021\163\001\002\000\052\003\uffd9\004\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\025\uffd9\047\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\001\002\000" +
    "\006\003\145\022\146\001\002\000\044\003\137\004\131" +
    "\007\020\010\130\011\115\047\126\051\144\052\120\053" +
    "\125\056\006\057\016\060\010\061\014\063\135\064\116" +
    "\065\132\066\121\001\002\000\004\004\131\001\002\000" +
    "\004\021\150\001\002\000\024\004\031\006\027\012\025" +
    "\013\030\022\035\046\033\067\024\070\037\071\036\001" +
    "\002\000\036\005\044\015\046\016\041\017\053\020\051" +
    "\021\152\030\057\031\042\032\050\033\047\034\055\035" +
    "\045\044\056\045\043\001\002\000\004\004\131\001\002" +
    "\000\004\023\154\001\002\000\006\003\155\024\156\001" +
    "\002\000\052\003\uffc8\004\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\025\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\001\002\000\044\003\137\004\131\007" +
    "\020\010\130\011\115\047\126\051\144\052\120\053\125" +
    "\056\006\057\016\060\010\061\014\063\135\064\116\065" +
    "\132\066\121\001\002\000\004\025\160\001\002\000\052" +
    "\003\uffca\004\uffca\007\uffca\010\uffca\011\uffca\025\uffca\047" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\001\002\000\004\025\162\001\002\000\052\003\uffc9" +
    "\004\uffc9\007\uffc9\010\uffc9\011\uffc9\025\uffc9\047\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\052\003\ufff1\004\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\025\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\001\002\000\052\003\ufff2\004\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\025\ufff2\047\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002\000\052" +
    "\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\025\ufff3\047" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\001\002\000\052\003\uffef\004\uffef\007\uffef\010\uffef" +
    "\011\uffef\025\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\001\002\000\026\003\uffa9\004" +
    "\uffa9\006\uffa9\012\uffa9\013\uffa9\022\uffa9\046\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\001\002\000\006\021\uffaf\023\uffaf\001" +
    "\002\000\006\021\uffa7\023\uffa7\001\002\000\026\003\uffad" +
    "\004\uffad\006\uffad\012\uffad\013\uffad\022\uffad\046\uffad\067" +
    "\uffad\070\uffad\071\uffad\001\002\000\026\003\uffaa\004\uffaa" +
    "\006\uffaa\012\uffaa\013\uffaa\022\uffaa\046\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\001\002\000\026\003\uffab\004\uffab\006\uffab" +
    "\012\uffab\013\uffab\022\uffab\046\uffab\067\uffab\070\uffab\071" +
    "\uffab\001\002\000\006\021\uffa8\023\uffa8\001\002\000\026" +
    "\003\uffac\004\uffac\006\uffac\012\uffac\013\uffac\022\uffac\046" +
    "\uffac\067\uffac\070\uffac\071\uffac\001\002\000\026\003\200" +
    "\004\031\006\027\012\025\013\030\022\035\046\033\067" +
    "\024\070\037\071\036\001\002\000\006\021\uffae\023\uffae" +
    "\001\002\000\040\005\044\015\046\016\041\017\053\020" +
    "\051\021\uffb0\023\uffb0\030\057\031\042\032\050\033\047" +
    "\034\055\035\045\044\056\045\043\001\002\000\004\021" +
    "\uffe5\001\002\000\024\004\031\006\027\012\025\013\030" +
    "\022\035\046\033\067\024\070\037\071\036\001\002\000" +
    "\004\023\210\001\002\000\040\005\044\015\046\016\041" +
    "\017\053\020\051\023\uffe3\026\206\030\057\031\042\032" +
    "\050\033\047\034\055\035\045\044\056\045\043\001\002" +
    "\000\024\004\031\006\027\012\025\013\030\022\035\046" +
    "\033\067\024\070\037\071\036\001\002\000\004\023\uffe4" +
    "\001\002\000\004\021\uffe6\001\002\000\052\003\ufff4\004" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\025\ufff4\047\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\001\002" +
    "\000\044\003\137\004\131\007\020\010\130\011\115\047" +
    "\126\051\144\052\120\053\125\056\006\057\016\060\010" +
    "\061\014\063\135\064\116\065\132\066\121\001\002\000" +
    "\024\004\031\006\027\012\025\013\030\022\035\046\033" +
    "\067\024\070\037\071\036\001\002\000\036\005\044\015" +
    "\046\016\041\017\053\020\051\023\215\030\057\031\042" +
    "\032\050\033\047\034\055\035\045\044\056\045\043\001" +
    "\002\000\006\003\216\024\217\001\002\000\052\003\uffce" +
    "\004\uffce\007\uffce\010\uffce\011\uffce\025\uffce\047\uffce\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\063\uffce\064\uffce\065\uffce\066\uffce\001" +
    "\002\000\044\003\137\004\131\007\020\010\130\011\115" +
    "\047\126\051\144\052\120\053\125\056\006\057\016\060" +
    "\010\061\014\063\135\064\116\065\132\066\121\001\002" +
    "\000\004\025\221\001\002\000\054\003\uffcb\004\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\025\uffcb\047\uffcb\050\222\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002" +
    "\000\006\003\224\024\225\001\002\000\052\003\uffd0\004" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\025\uffd0\047\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002" +
    "\000\052\003\uffcc\004\uffcc\007\uffcc\010\uffcc\011\uffcc\025" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\001\002\000\044\003\137\004\131\007\020" +
    "\010\130\011\115\047\126\051\144\052\120\053\125\056" +
    "\006\057\016\060\010\061\014\063\135\064\116\065\132" +
    "\066\121\001\002\000\004\025\227\001\002\000\052\003" +
    "\uffcd\004\uffcd\007\uffcd\010\uffcd\011\uffcd\025\uffcd\047\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\001\002\000\004\025\231\001\002\000\054\003\uffcb\004" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\025\uffcb\047\uffcb\050\222" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\001\002\000\052\003\uffcf\004\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\025\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\001\002\000\004\054\256\001\002" +
    "\000\012\004\235\022\237\067\024\070\037\001\002\000" +
    "\020\005\uff92\015\uff92\016\uff92\017\uff92\020\uff92\023\uff92" +
    "\027\uff92\001\002\000\020\005\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\023\uff91\027\uff91\001\002\000\012\004\235" +
    "\022\237\067\024\070\037\001\002\000\016\005\241\015" +
    "\243\016\244\017\246\020\245\023\242\001\002\000\012" +
    "\004\235\022\237\067\024\070\037\001\002\000\006\003" +
    "\253\024\254\001\002\000\012\004\235\022\237\067\024" +
    "\070\037\001\002\000\012\004\235\022\237\067\024\070" +
    "\037\001\002\000\012\004\235\022\237\067\024\070\037" +
    "\001\002\000\012\004\235\022\237\067\024\070\037\001" +
    "\002\000\020\005\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\023\uff96\027\uff96\001\002\000\020\005\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\023\uff95\027\uff95\001\002\000\020" +
    "\005\241\015\uff97\016\uff97\017\246\020\245\023\uff97\027" +
    "\uff97\001\002\000\020\005\241\015\uff98\016\uff98\017\246" +
    "\020\245\023\uff98\027\uff98\001\002\000\052\003\uffc2\004" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\025\uffc2\047\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002" +
    "\000\004\054\256\001\002\000\006\025\uffbc\055\264\001" +
    "\002\000\014\003\257\004\235\022\237\067\024\070\037" +
    "\001\002\000\006\025\uffbf\055\uffbf\001\002\000\016\005" +
    "\241\015\243\016\244\017\246\020\245\027\261\001\002" +
    "\000\044\003\137\004\131\007\020\010\130\011\115\047" +
    "\126\051\144\052\120\053\125\056\006\057\016\060\010" +
    "\061\014\063\135\064\116\065\132\066\121\001\002\000" +
    "\010\025\uffc1\054\256\055\uffc1\001\002\000\006\025\uffc0" +
    "\055\uffc0\001\002\000\006\003\267\027\270\001\002\000" +
    "\004\025\266\001\002\000\052\003\uffc4\004\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\025\uffc4\047\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002\000\004\025" +
    "\uffbd\001\002\000\044\003\137\004\131\007\020\010\130" +
    "\011\115\047\126\051\144\052\120\053\125\056\006\057" +
    "\016\060\010\061\014\063\135\064\116\065\132\066\121" +
    "\001\002\000\004\025\uffbe\001\002\000\020\005\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\023\uff94\027\uff94\001\002" +
    "\000\016\005\241\015\243\016\244\017\246\020\245\023" +
    "\274\001\002\000\020\005\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\023\uff93\027\uff93\001\002\000\006\025\uffbc\055" +
    "\264\001\002\000\004\025\277\001\002\000\052\003\uffc3" +
    "\004\uffc3\007\uffc3\010\uffc3\011\uffc3\025\uffc3\047\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001" +
    "\002\000\016\002\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\001\002\000\010\025\uffe1\054\uffe1\055\uffe1\001" +
    "\002\000\052\003\uffed\004\uffed\007\uffed\010\uffed\011\uffed" +
    "\025\uffed\047\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\001\002\000\036\005\044\015\046\016" +
    "\041\017\053\020\051\021\304\030\057\031\042\032\050" +
    "\033\047\034\055\035\045\044\056\045\043\001\002\000" +
    "\052\003\uffee\004\uffee\007\uffee\010\uffee\011\uffee\025\uffee" +
    "\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\001\002\000\044\003\137\004\131\007\020\010" +
    "\130\011\115\047\126\051\144\052\120\053\125\056\006" +
    "\057\016\060\010\061\014\063\135\064\116\065\132\066" +
    "\121\001\002\000\024\004\031\006\027\012\025\013\030" +
    "\022\035\046\033\067\024\070\037\071\036\001\002\000" +
    "\036\005\044\015\046\016\041\017\053\020\051\023\310" +
    "\030\057\031\042\032\050\033\047\034\055\035\045\044" +
    "\056\045\043\001\002\000\006\003\311\024\312\001\002" +
    "\000\052\003\uffc5\004\uffc5\007\uffc5\010\uffc5\011\uffc5\025" +
    "\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\001\002\000\044\003\137\004\131\007\020" +
    "\010\130\011\115\047\126\051\144\052\120\053\125\056" +
    "\006\057\016\060\010\061\014\063\135\064\116\065\132" +
    "\066\121\001\002\000\004\025\314\001\002\000\052\003" +
    "\uffc7\004\uffc7\007\uffc7\010\uffc7\011\uffc7\025\uffc7\047\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\001\002\000\004\025\316\001\002\000\052\003\uffc6\004" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\025\uffc6\047\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002" +
    "\000\052\003\ufff0\004\ufff0\007\ufff0\010\ufff0\011\ufff0\025" +
    "\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\001\002\000\004\021\uffe9\001\002\000\006" +
    "\004\322\023\323\001\002\000\006\023\uffe7\026\326\001" +
    "\002\000\004\021\uffea\001\002\000\004\023\325\001\002" +
    "\000\004\021\uffeb\001\002\000\004\004\322\001\002\000" +
    "\004\023\uffe8\001\002\000\004\004\337\001\002\000\004" +
    "\023\333\001\002\000\004\023\uffd1\001\002\000\004\024" +
    "\334\001\002\000\044\003\137\004\131\007\020\010\130" +
    "\011\115\047\126\051\144\052\120\053\125\056\006\057" +
    "\016\060\010\061\014\063\135\064\116\065\132\066\121" +
    "\001\002\000\004\025\336\001\002\000\016\002\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\001\002\000\006" +
    "\023\uffd3\026\340\001\002\000\016\003\332\023\uffd2\056" +
    "\006\057\016\060\010\061\014\001\002\000\004\023\uffd4" +
    "\001\002\000\006\022\343\024\344\001\002\000\016\003" +
    "\332\023\uffd2\056\006\057\016\060\010\061\014\001\002" +
    "\000\004\003\345\001\002\000\044\003\137\004\131\007" +
    "\020\010\130\011\115\047\126\051\144\052\120\053\125" +
    "\056\006\057\016\060\010\061\014\063\135\064\116\065" +
    "\132\066\121\001\002\000\004\025\347\001\002\000\016" +
    "\002\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\001" +
    "\002\000\004\023\351\001\002\000\004\024\352\001\002" +
    "\000\044\003\137\004\131\007\020\010\130\011\115\047" +
    "\126\051\144\052\120\053\125\056\006\057\016\060\010" +
    "\061\014\063\135\064\116\065\132\066\121\001\002\000" +
    "\004\025\354\001\002\000\016\002\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\001\002\000\014\003\uffb1\021" +
    "\uffb1\022\112\024\113\026\361\001\002\000\006\003\357" +
    "\021\360\001\002\000\054\003\uffb8\004\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\025\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\054" +
    "\003\uffb9\004\uffb9\007\uffb9\010\uffb9\011\uffb9\025\uffb9\047" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\001\002\000\004\004\363\001\002\000\006" +
    "\003\uffb3\021\uffb3\001\002\000\010\003\uffb1\021\uffb1\026" +
    "\361\001\002\000\006\003\uffb2\021\uffb2\001\002\000\010" +
    "\003\uffb1\021\uffb1\026\361\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\020\002\006\005\003\015\016\017\004\020" +
    "\012\034\011\035\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\102\017\101\023\105\024\103\034\011" +
    "\035\010\001\001\000\004\002\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\033\042\031\052\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\071\042\031\052\025\001" +
    "\001\000\004\047\053\001\001\000\010\006\037\042\031" +
    "\052\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\053\001\001\000\010\006\066\042\031\052\025" +
    "\001\001\000\002\001\001\000\010\006\065\042\031\052" +
    "\025\001\001\000\010\006\064\042\031\052\025\001\001" +
    "\000\002\001\001\000\010\006\063\042\031\052\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\062" +
    "\042\031\052\025\001\001\000\002\001\001\000\010\006" +
    "\061\042\031\052\025\001\001\000\010\006\060\042\031" +
    "\052\025\001\001\000\002\001\001\000\010\006\057\042" +
    "\031\052\025\001\001\000\002\001\001\000\004\047\053" +
    "\001\001\000\004\047\053\001\001\000\004\047\053\001" +
    "\001\000\004\047\053\001\001\000\004\047\053\001\001" +
    "\000\004\047\053\001\001\000\004\047\053\001\001\000" +
    "\004\047\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\053\001\001\000\012\006\075\016\073\042" +
    "\031\052\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\053\001\001\000\012\006\075\016\077\042" +
    "\031\052\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\106\024\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\327\025\330\001\001\000\002\001\001\000\034" +
    "\002\006\007\137\012\141\014\122\021\123\022\116\026" +
    "\132\030\140\031\133\032\142\034\121\035\135\037\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\302\042\031\052\025" +
    "\001\001\000\002\001\001\000\034\002\006\007\137\012" +
    "\141\014\122\021\300\022\116\026\132\030\140\031\133" +
    "\032\142\034\121\035\135\037\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\176\041\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\006\007\137\012\141\014" +
    "\122\021\160\022\116\026\132\030\140\031\133\032\142" +
    "\034\121\035\135\037\126\001\001\000\004\037\146\001" +
    "\001\000\002\001\001\000\010\006\150\042\031\052\025" +
    "\001\001\000\004\047\053\001\001\000\004\037\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\006\007\137\012\141\014\122\021\156\022" +
    "\116\026\132\030\140\031\133\032\142\034\121\035\135" +
    "\037\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\200\042\031\052\025\001\001" +
    "\000\002\001\001\000\004\047\053\001\001\000\002\001" +
    "\001\000\012\006\204\011\203\042\031\052\025\001\001" +
    "\000\002\001\001\000\004\047\053\001\001\000\012\006" +
    "\204\011\206\042\031\052\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\006\007" +
    "\137\012\141\014\122\021\227\022\116\026\132\030\140" +
    "\031\133\032\142\034\121\035\135\037\126\001\001\000" +
    "\010\006\213\042\031\052\025\001\001\000\004\047\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\006\007\137\012\141\014\122\021\217\022\116\026\132" +
    "\030\140\031\133\032\142\034\121\035\135\037\126\001" +
    "\001\000\002\001\001\000\004\027\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\006\007\137\012\141\014\122\021\225\022\116\026\132" +
    "\030\140\031\133\032\142\034\121\035\135\037\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\231\001\001\000\002\001\001\000\004\033" +
    "\274\001\001\000\006\004\237\052\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\272\052\235\001" +
    "\001\000\002\001\001\000\006\004\271\052\235\001\001" +
    "\000\002\001\001\000\006\004\251\052\235\001\001\000" +
    "\006\004\250\052\235\001\001\000\006\004\247\052\235" +
    "\001\001\000\006\004\246\052\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\254\001\001\000\004\013" +
    "\264\001\001\000\006\004\257\052\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\006\007\137\012" +
    "\141\014\122\021\261\022\116\026\132\030\140\031\133" +
    "\032\142\034\121\035\135\037\126\001\001\000\004\033" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\006\007\137\012\141\014\122\021\270\022\116\026\132" +
    "\030\140\031\133\032\142\034\121\035\135\037\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\053\001\001\000\002\001" +
    "\001\000\034\002\006\007\137\012\141\014\122\021\314" +
    "\022\116\026\132\030\140\031\133\032\142\034\121\035" +
    "\135\037\126\001\001\000\010\006\306\042\031\052\025" +
    "\001\001\000\004\047\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\006\007\137\012\141\014\122" +
    "\021\312\022\116\026\132\030\140\031\133\032\142\034" +
    "\121\035\135\037\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\006\007\137\012\141\014\122\021\334" +
    "\022\116\026\132\030\140\031\133\032\142\034\121\035" +
    "\135\037\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\327\025\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\327\025\347" +
    "\001\001\000\002\001\001\000\034\002\006\007\137\012" +
    "\141\014\122\021\345\022\116\026\132\030\140\031\133" +
    "\032\142\034\121\035\135\037\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\006\007\137\012\141\014\122\021\352\022" +
    "\116\026\132\030\140\031\133\032\142\034\121\035\135" +
    "\037\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\363\001\001\000\002\001\001\000\004\053\361" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void semantic_error(Symbol sym) {
        System.err.println("Error semántico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }
        
    public Symbol getS(){
        return this.sym;
    };

    private TablaSimbolos ts = new TablaSimbolos();
    public PilaSemantica pilaSemantica = new PilaSemantica();

    public void imprimirTablasSimbolos() {
        ts.imprimirTablas();
    }

    public void insertarConstante (String tipo, String id, Object valor){
        //System.out.println("tipo> "+tipo+", id> "+id+", valor> "+valor);
        String mensaje = ts.insertarConstante(new Simbolo(tipo, id, true, valor));
        if (mensaje != null){
            semantic_error (cur_token);
            System.err.println(mensaje);
        } 
    }

    public void insertarVariables (){
        String tipo = pilaSemantica.buscarTipo ();
        if (tipo!=null){
            while (!pilaSemantica.isEmpty() && pilaSemantica.get(pilaSemantica.size() - 1).getTipo().equals("")) {
                RegistroSemantico registro = pilaSemantica.pop_end();
                String mensaje = ts.insertarVar (new Simbolo (tipo, registro.getId()));
                if (mensaje != null){
                    semantic_error (cur_token);
                    System.err.println(mensaje);
                } 
            }
        }
        pilaSemantica.pop_end ();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {


    public class ExprValue {
        public boolean esConstante;
        public Object valor;
        public String tipo; // "int", "float", etc.

        public ExprValue(boolean esConstante, Object valor, String tipo) {
            this.esConstante = esConstante;
            this.valor = valor;
            this.tipo = tipo;
        }
    }

    public class Pair<K, V> {
        private K key;
        private V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() { return key; }
        public V getValue() { return value; }
    }

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= globales 
            {
              Object RESULT =null;
		 imprimirTablasSimbolos(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programa",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= global_decl_list funciones 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("globales",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_decl ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_decl ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_decl ::= error 
            {
              Object RESULT =null;
		 report_error("Error in global declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funciones",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= funcion 
            {
              Object RESULT =null;
		 ts.globales(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funciones",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= estru_control 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= read SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= write SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= DO SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error 
            {
              Object RESULT =null;
		 report_error("Invalid instruction."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read ::= READ LPAREN read_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // read ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // read ::= READ error 
            {
              Object RESULT =null;
		 report_error("Invalid 'read' parameters."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // read_parameter ::= ID COMMA read_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // read_parameter ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // write ::= WRITE LPAREN write_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // write ::= WRITE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'write' parameters."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write_parameter ::= expr COMMA write_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write_parameter ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloque ::= instruccion bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error in expression list."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estru_control ::= if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estru_control ::= for 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estru_control ::= while 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estru_control ::= switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= tipo_var ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= VOID ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= tipo_var ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid function declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcion ::= VOID ID LBRACKET error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid function declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro_list ::= tipo_var ID COMMA parametro_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_list ::= tipo_var ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_list ::= error 
            {
              Object RESULT =null;
		 report_error("Error in parameter list."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if ::= IF LPAREN expr RPAREN LBRACKET bloque RBRACKET else 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if ::= IF error bloque RBRACKET else 
            {
              Object RESULT =null;
		 report_error("Invalid expression in 'if' condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if ::= IF LPAREN expr RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'if' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else ::= ELSE LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else ::= ELSE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'else' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for ::= FOR error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'for' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'for' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while ::= WHILE LPAREN expr RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILE error bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'while' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while ::= WHILE LPAREN expr RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'while' loop condition."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch ::= SWITCH error case_list case_end RBRACKET 
            {
              Object RESULT =null;
		 report_error("Invalid 'switch' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // switch ::= SWITCH LPAREN arit_exp RPAREN error 
            {
              Object RESULT =null;
		 report_error("Invalid 'switch' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case_list ::= CASE arit_exp COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_list ::= CASE arit_exp COLON bloque case_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_list ::= CASE error 
            {
              Object RESULT =null;
		 report_error("Invalid 'case' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // case_end ::= DEFAULT COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_end ::= DEFAULT error 
            {
              Object RESULT =null;
		 report_error("Invalid 'default' statement."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_end ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constante ::= CONST tipo_var ID EQ expr SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                insertarConstante(tipo, id.toString(), valor);
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constante ::= CONST tipo_var ID EQ expr error 
            {
              Object RESULT =null;
		 report_error("Missing semicolon in constant declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable ::= tipo_var id_list SEMI 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
                pilaSemantica.push_init(new RegistroSemantico (tipo));
                insertarVariables ();
            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable ::= tipo_var id_list error 
            {
              Object RESULT =null;
		 report_error("Missing semicolon in variable declaration."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_var ::= TYPE_INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_var ::= TYPE_LONG 
            {
              String RESULT =null;
		 RESULT = "long"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_var ::= TYPE_SHORT 
            {
              String RESULT =null;
		 RESULT = "short"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_var ::= TYPE_CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // id_list ::= ID next_id_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                pilaSemantica.push_end (new RegistroSemantico (id.toString()));
          
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_list",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // next_id_list ::= COMMA ID next_id_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                    pilaSemantica.push_end (new RegistroSemantico (id.toString()));
                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // next_id_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignacion ::= ID op_asignacion expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignacion ::= ID op_incremento 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignacion ::= ID op_asignacion error 
            {
              Object RESULT =null;
		 report_error("Invalid assignment expression."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_asignacion ::= EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_asignacion ::= PLUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_asignacion ::= MINUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_asignacion ::= TIMES_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_asignacion ::= DIV_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_incremento ::= PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_incremento ::= MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr MOD expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr op_relacional expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= ID LPAREN expr_list RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = lit; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= number 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = num; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arit_exp ::= LPAREN arit_exp RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arit_exp ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arit_exp ::= number 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arit_exp",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_relacional ::= EQ_EQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_relacional ::= GT_EQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op_relacional ::= GT 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // op_relacional ::= LT_EQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op_relacional ::= LT 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op_relacional ::= NOT_EQ 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // literal ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s.toString(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // literal ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // literal ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // number ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // number ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
