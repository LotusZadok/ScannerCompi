
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi.scanner;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\011\004\000\002\011\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\005" +
    "\000\002\010\004\000\002\003\006\000\002\003\005\000" +
    "\002\003\004\000\002\004\005\000\002\004\003\000\002" +
    "\006\006\000\002\006\004\000\002\005\005\000\002\005" +
    "\003\000\002\015\003\000\002\015\004\000\002\012\005" +
    "\000\002\012\003\000\002\012\002\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\012\000\002\017\010\000\002\017\011\000\002\017" +
    "\012\000\002\017\010\000\002\017\011\000\002\020\006" +
    "\000\002\020\004\000\002\020\002\000\002\021\012\000" +
    "\002\021\010\000\002\021\011\000\002\022\006\000\002" +
    "\022\005\000\002\022\002\000\002\023\015\000\002\023" +
    "\007\000\002\023\014\000\002\024\011\000\002\024\007" +
    "\000\002\024\010\000\002\025\012\000\002\025\010\000" +
    "\002\025\011\000\002\026\006\000\002\026\007\000\002" +
    "\007\005\000\002\007\002\000\002\027\010\000\002\030" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\004\000\002\051\005\000" +
    "\002\051\002\000\002\033\006\000\002\033\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\036\005\000\002\036" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\020\003\017\007\022\056\006\057\020\060" +
    "\011\061\015\062\013\001\002\000\004\002\347\001\002" +
    "\000\022\002\ufffd\003\ufffd\007\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\001\002\000\004\004\uffbd\001\002" +
    "\000\004\004\332\001\002\000\022\002\ufffa\003\ufffa\007" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002" +
    "\000\004\004\uffbb\001\002\000\022\002\ufffc\003\ufffc\007" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\004\004\077\001\002\000\022\002\ufffb\003\ufffb\007" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002" +
    "\000\004\004\uffba\001\002\000\004\002\000\001\002\000" +
    "\004\004\075\001\002\000\004\004\uffbc\001\002\000\022" +
    "\002\uffff\003\017\007\022\056\006\057\020\060\011\061" +
    "\015\062\013\001\002\000\012\056\006\057\020\060\011" +
    "\061\015\001\002\000\004\004\024\001\002\000\004\014" +
    "\025\001\002\000\024\004\033\006\031\012\030\013\032" +
    "\022\037\046\034\067\026\070\041\071\040\001\002\000" +
    "\042\005\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\023\uff96\026\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\035\uff96\044\uff96\045\uff96\001\002\000\042\005\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\023\uffa1\026" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\044\uffa1\045\uffa1\001\002\000\042\005\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\023\uff98\026\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\044\uff98\045" +
    "\uff98\001\002\000\042\005\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\023\uff99\026\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\044\uff99\045\uff99\001\002" +
    "\000\042\005\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\023\uff97\026\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\044\uff97\045\uff97\001\002\000\042\005" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023\uffa3" +
    "\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\044\uffa3\045\uffa3\001\002\000\024\004\033\006\031" +
    "\012\030\013\032\022\037\046\034\067\026\070\041\071" +
    "\040\001\002\000\036\005\046\015\050\016\045\017\055" +
    "\020\052\021\072\030\061\031\044\032\053\033\051\034" +
    "\057\035\047\044\060\045\043\001\002\000\042\005\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\023\uffa2\026" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\044\uffa2\045\uffa2\001\002\000\024\004\033\006\031\012" +
    "\030\013\032\022\037\046\034\067\026\070\041\071\040" +
    "\001\002\000\042\005\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\023\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\044\uff9a\045\uff9a\001\002\000" +
    "\042\005\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\023\uff95\026\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034" +
    "\uff95\035\uff95\044\uff95\045\uff95\001\002\000\036\005\046" +
    "\015\050\016\045\017\055\020\052\023\054\030\061\031" +
    "\044\032\053\033\051\034\057\035\047\044\060\045\043" +
    "\001\002\000\024\004\033\006\031\012\030\013\032\022" +
    "\037\046\034\067\026\070\041\071\040\001\002\000\024" +
    "\004\uff9f\006\uff9f\012\uff9f\013\uff9f\022\uff9f\046\uff9f\067" +
    "\uff9f\070\uff9f\071\uff9f\001\002\000\024\004\033\006\031" +
    "\012\030\013\032\022\037\046\034\067\026\070\041\071" +
    "\040\001\002\000\024\004\033\006\031\012\030\013\032" +
    "\022\037\046\034\067\026\070\041\071\040\001\002\000" +
    "\024\004\uff9b\006\uff9b\012\uff9b\013\uff9b\022\uff9b\046\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\001\002\000\024\004\033\006" +
    "\031\012\030\013\032\022\037\046\034\067\026\070\041" +
    "\071\040\001\002\000\024\004\uff9d\006\uff9d\012\uff9d\013" +
    "\uff9d\022\uff9d\046\uff9d\067\uff9d\070\uff9d\071\uff9d\001\002" +
    "\000\024\004\033\006\031\012\030\013\032\022\037\046" +
    "\034\067\026\070\041\071\040\001\002\000\024\004\uff9e" +
    "\006\uff9e\012\uff9e\013\uff9e\022\uff9e\046\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\001\002\000\042\005\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\023\uffa4\026\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\044\uffa4\045\uffa4" +
    "\001\002\000\024\004\033\006\031\012\030\013\032\022" +
    "\037\046\034\067\026\070\041\071\040\001\002\000\024" +
    "\004\033\006\031\012\030\013\032\022\037\046\034\067" +
    "\026\070\041\071\040\001\002\000\024\004\uff9c\006\uff9c" +
    "\012\uff9c\013\uff9c\022\uff9c\046\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\001\002\000\024\004\033\006\031\012\030\013\032" +
    "\022\037\046\034\067\026\070\041\071\040\001\002\000" +
    "\024\004\uffa0\006\uffa0\012\uffa0\013\uffa0\022\uffa0\046\uffa0" +
    "\067\uffa0\070\uffa0\071\uffa0\001\002\000\042\005\046\015" +
    "\050\016\045\017\055\020\052\021\uffa7\023\uffa7\026\uffa7" +
    "\030\061\031\044\032\053\033\051\034\057\035\047\044" +
    "\uffa7\045\uffa7\001\002\000\042\005\046\015\050\016\045" +
    "\017\055\020\052\021\uffa5\023\uffa5\026\uffa5\030\061\031" +
    "\044\032\053\033\051\034\057\035\047\044\060\045\043" +
    "\001\002\000\042\005\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\023\uffab\026\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\044\uffab\045\uffab\001\002\000" +
    "\042\005\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\023\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\044\uffaa\045\uffaa\001\002\000\042\005\046" +
    "\015\uffad\016\uffad\017\055\020\052\021\uffad\023\uffad\026" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad" +
    "\044\uffad\045\uffad\001\002\000\042\005\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\026\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\044\uffa9\045" +
    "\uffa9\001\002\000\042\005\046\015\uffac\016\uffac\017\055" +
    "\020\052\021\uffac\023\uffac\026\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\044\uffac\045\uffac\001\002" +
    "\000\042\005\046\015\050\016\045\017\055\020\052\021" +
    "\uffa8\023\uffa8\026\uffa8\030\061\031\044\032\053\033\051" +
    "\034\057\035\047\044\uffa8\045\uffa8\001\002\000\056\002" +
    "\uffbf\003\uffbf\004\uffbf\007\uffbf\010\uffbf\011\uffbf\025\uffbf" +
    "\047\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\001\002\000\042\005\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\023\uffa6\026\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\044\uffa6\045" +
    "\uffa6\001\002\000\022\002\ufffe\003\ufffe\007\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\021" +
    "\076\001\002\000\022\002\ufff9\003\ufff9\007\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000\006\003" +
    "\100\022\101\001\002\000\004\024\327\001\002\000\014" +
    "\023\uffd3\056\006\057\020\060\011\061\015\001\002\000" +
    "\004\004\324\001\002\000\004\023\104\001\002\000\006" +
    "\003\105\024\106\001\002\000\004\025\323\001\002\000" +
    "\042\004\123\007\022\010\124\011\107\047\120\051\136" +
    "\052\112\053\117\056\006\057\020\060\011\061\015\063" +
    "\130\064\110\065\125\066\113\001\002\000\006\003\313" +
    "\022\314\001\002\000\004\021\312\001\002\000\052\003" +
    "\ufff8\004\ufff8\007\ufff8\010\ufff8\011\ufff8\025\ufff8\047\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\001\002\000\006\003\276\022\277\001\002\000\026\004" +
    "\033\006\031\012\030\013\032\021\273\022\037\046\034" +
    "\067\026\070\041\071\040\001\002\000\052\003\ufff7\004" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\025\ufff7\047\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\001\002" +
    "\000\052\003\uffe4\004\123\007\022\010\124\011\107\025" +
    "\uffe4\047\120\051\136\052\112\053\117\054\uffe4\055\uffe4" +
    "\056\006\057\020\060\011\061\015\063\130\064\110\065" +
    "\125\066\113\001\002\000\004\025\271\001\002\000\006" +
    "\003\242\022\243\001\002\000\006\003\215\022\216\001" +
    "\002\000\004\004\206\001\002\000\052\003\ufff5\004\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\025\ufff5\047\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\001\002\000" +
    "\020\014\175\036\201\037\177\040\176\041\172\042\200" +
    "\043\174\001\002\000\006\003\163\022\164\001\002\000" +
    "\004\021\162\001\002\000\052\003\uffdf\004\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\025\uffdf\047\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002\000\052\003" +
    "\uffdd\004\uffdd\007\uffdd\010\uffdd\011\uffdd\025\uffdd\047\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\001\002\000\004\021\161\001\002\000\052\003\ufff6\004" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\025\ufff6\047\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002" +
    "\000\004\021\160\001\002\000\052\003\uffde\004\uffde\007" +
    "\uffde\010\uffde\011\uffde\025\uffde\047\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\001\002\000\004" +
    "\021\157\001\002\000\052\003\uffdc\004\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\025\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\006\003\137" +
    "\022\140\001\002\000\004\024\154\001\002\000\004\004" +
    "\123\001\002\000\004\021\142\001\002\000\024\004\033" +
    "\006\031\012\030\013\032\022\037\046\034\067\026\070" +
    "\041\071\040\001\002\000\036\005\046\015\050\016\045" +
    "\017\055\020\052\021\144\030\061\031\044\032\053\033" +
    "\051\034\057\035\047\044\060\045\043\001\002\000\004" +
    "\004\123\001\002\000\004\023\146\001\002\000\006\003" +
    "\147\024\150\001\002\000\004\025\153\001\002\000\042" +
    "\004\123\007\022\010\124\011\107\047\120\051\136\052" +
    "\112\053\117\056\006\057\020\060\011\061\015\063\130" +
    "\064\110\065\125\066\113\001\002\000\004\025\152\001" +
    "\002\000\052\003\uffcc\004\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\025\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\001\002\000\052\003\uffca\004\uffca\007" +
    "\uffca\010\uffca\011\uffca\025\uffca\047\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002\000\042" +
    "\004\123\007\022\010\124\011\107\047\120\051\136\052" +
    "\112\053\117\056\006\057\020\060\011\061\015\063\130" +
    "\064\110\065\125\066\113\001\002\000\004\025\156\001" +
    "\002\000\052\003\uffcb\004\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\025\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\001\002\000\052\003\ufff2\004\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\025\ufff2\047\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002\000\052" +
    "\003\ufff3\004\ufff3\007\ufff3\010\ufff3\011\ufff3\025\ufff3\047" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\001\002\000\052\003\ufff4\004\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\025\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\001\002\000\052\003\ufff0\004" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\025\ufff0\047\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001\002" +
    "\000\004\021\uffe7\001\002\000\024\004\033\006\031\012" +
    "\030\013\032\022\037\046\034\067\026\070\041\071\040" +
    "\001\002\000\004\023\171\001\002\000\040\005\046\015" +
    "\050\016\045\017\055\020\052\023\uffe5\026\167\030\061" +
    "\031\044\032\053\033\051\034\057\035\047\044\060\045" +
    "\043\001\002\000\024\004\033\006\031\012\030\013\032" +
    "\022\037\046\034\067\026\070\041\071\040\001\002\000" +
    "\004\023\uffe6\001\002\000\004\021\uffe8\001\002\000\024" +
    "\004\uffb0\006\uffb0\012\uffb0\013\uffb0\022\uffb0\046\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\001\002\000\004\021\205\001\002" +
    "\000\004\021\uffae\001\002\000\024\004\uffb4\006\uffb4\012" +
    "\uffb4\013\uffb4\022\uffb4\046\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\001\002\000\024\004\uffb1\006\uffb1\012\uffb1\013\uffb1\022" +
    "\uffb1\046\uffb1\067\uffb1\070\uffb1\071\uffb1\001\002\000\024" +
    "\004\uffb2\006\uffb2\012\uffb2\013\uffb2\022\uffb2\046\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\001\002\000\004\021\uffaf\001\002" +
    "\000\024\004\uffb3\006\uffb3\012\uffb3\013\uffb3\022\uffb3\046" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\001\002\000\024\004\033" +
    "\006\031\012\030\013\032\022\037\046\034\067\026\070" +
    "\041\071\040\001\002\000\036\005\046\015\050\016\045" +
    "\017\055\020\052\021\204\030\061\031\044\032\053\033" +
    "\051\034\057\035\047\044\060\045\043\001\002\000\056" +
    "\003\uffb6\004\uffb6\007\uffb6\010\uffb6\011\uffb6\021\uffb6\023" +
    "\uffb6\025\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\001\002\000\056\003\uffb5\004\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\021\uffb5\023\uffb5\025\uffb5\047" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\001\002\000\006\021\uffb7\026\211\001\002\000\004" +
    "\021\210\001\002\000\056\002\uffbe\003\uffbe\004\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\025\uffbe\047\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002" +
    "\000\004\004\213\001\002\000\004\021\uffb9\001\002\000" +
    "\006\021\uffb7\026\211\001\002\000\004\021\uffb8\001\002" +
    "\000\004\024\236\001\002\000\024\004\033\006\031\012" +
    "\030\013\032\022\037\046\034\067\026\070\041\071\040" +
    "\001\002\000\036\005\046\015\050\016\045\017\055\020" +
    "\052\023\220\030\061\031\044\032\053\033\051\034\057" +
    "\035\047\044\060\045\043\001\002\000\006\003\221\024" +
    "\222\001\002\000\004\025\234\001\002\000\042\004\123" +
    "\007\022\010\124\011\107\047\120\051\136\052\112\053" +
    "\117\056\006\057\020\060\011\061\015\063\130\064\110" +
    "\065\125\066\113\001\002\000\004\025\224\001\002\000" +
    "\054\003\uffcd\004\uffcd\007\uffcd\010\uffcd\011\uffcd\025\uffcd" +
    "\047\uffcd\050\225\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\006\003\227\024\230\001" +
    "\002\000\052\003\uffd2\004\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\025\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\001\002\000\004\025\233\001\002\000" +
    "\042\004\123\007\022\010\124\011\107\047\120\051\136" +
    "\052\112\053\117\056\006\057\020\060\011\061\015\063" +
    "\130\064\110\065\125\066\113\001\002\000\004\025\232" +
    "\001\002\000\052\003\uffcf\004\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\025\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\001\002\000\052\003\uffce\004\uffce" +
    "\007\uffce\010\uffce\011\uffce\025\uffce\047\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\063\uffce\064\uffce\065\uffce\066\uffce\001\002\000" +
    "\054\003\uffcd\004\uffcd\007\uffcd\010\uffcd\011\uffcd\025\uffcd" +
    "\047\uffcd\050\225\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\052\003\uffd0\004\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\025\uffd0\047\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000\042" +
    "\004\123\007\022\010\124\011\107\047\120\051\136\052" +
    "\112\053\117\056\006\057\020\060\011\061\015\063\130" +
    "\064\110\065\125\066\113\001\002\000\004\025\240\001" +
    "\002\000\054\003\uffcd\004\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\025\uffcd\047\uffcd\050\225\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd" +
    "\064\uffcd\065\uffcd\066\uffcd\001\002\000\052\003\uffd1\004" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\025\uffd1\047\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002" +
    "\000\004\024\265\001\002\000\002\001\002\000\004\023" +
    "\245\001\002\000\006\024\247\054\250\001\002\000\004" +
    "\003\263\001\002\000\004\054\250\001\002\000\002\001" +
    "\002\000\004\027\252\001\002\000\042\004\123\007\022" +
    "\010\124\011\107\047\120\051\136\052\112\053\117\056" +
    "\006\057\020\060\011\061\015\063\130\064\110\065\125" +
    "\066\113\001\002\000\012\003\uffc3\025\uffc3\054\250\055" +
    "\uffc3\001\002\000\010\003\uffc2\025\uffc2\055\uffc2\001\002" +
    "\000\006\025\uffc0\055\256\001\002\000\004\027\261\001" +
    "\002\000\004\025\260\001\002\000\052\003\uffc6\004\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\025\uffc6\047\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000" +
    "\042\004\123\007\022\010\124\011\107\047\120\051\136" +
    "\052\112\053\117\056\006\057\020\060\011\061\015\063" +
    "\130\064\110\065\125\066\113\001\002\000\004\025\uffc1" +
    "\001\002\000\004\025\264\001\002\000\052\003\uffc4\004" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\025\uffc4\047\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002" +
    "\000\004\054\250\001\002\000\006\025\uffc0\055\256\001" +
    "\002\000\004\025\270\001\002\000\052\003\uffc5\004\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\025\uffc5\047\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000" +
    "\022\002\uffd8\003\uffd8\007\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\001\002\000\012\003\uffe3\025\uffe3\054" +
    "\uffe3\055\uffe3\001\002\000\052\003\uffee\004\uffee\007\uffee" +
    "\010\uffee\011\uffee\025\uffee\047\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\063\uffee\064\uffee\065\uffee\066\uffee\001\002\000\036\005" +
    "\046\015\050\016\045\017\055\020\052\021\275\030\061" +
    "\031\044\032\053\033\051\034\057\035\047\044\060\045" +
    "\043\001\002\000\052\003\uffef\004\uffef\007\uffef\010\uffef" +
    "\011\uffef\025\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\001\002\000\004\024\307\001" +
    "\002\000\024\004\033\006\031\012\030\013\032\022\037" +
    "\046\034\067\026\070\041\071\040\001\002\000\036\005" +
    "\046\015\050\016\045\017\055\020\052\023\301\030\061" +
    "\031\044\032\053\033\051\034\057\035\047\044\060\045" +
    "\043\001\002\000\006\003\302\024\303\001\002\000\004" +
    "\025\306\001\002\000\042\004\123\007\022\010\124\011" +
    "\107\047\120\051\136\052\112\053\117\056\006\057\020" +
    "\060\011\061\015\063\130\064\110\065\125\066\113\001" +
    "\002\000\004\025\305\001\002\000\052\003\uffc9\004\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\025\uffc9\047\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000" +
    "\052\003\uffc7\004\uffc7\007\uffc7\010\uffc7\011\uffc7\025\uffc7" +
    "\047\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\001\002\000\042\004\123\007\022\010\124\011" +
    "\107\047\120\051\136\052\112\053\117\056\006\057\020" +
    "\060\011\061\015\063\130\064\110\065\125\066\113\001" +
    "\002\000\004\025\311\001\002\000\052\003\uffc8\004\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\025\uffc8\047\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002\000" +
    "\052\003\ufff1\004\ufff1\007\ufff1\010\ufff1\011\ufff1\025\ufff1" +
    "\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\001\002\000\004\021\uffeb\001\002\000\006\004" +
    "\315\023\316\001\002\000\006\023\uffe9\026\321\001\002" +
    "\000\004\021\uffec\001\002\000\004\023\320\001\002\000" +
    "\004\021\uffed\001\002\000\004\004\315\001\002\000\004" +
    "\023\uffea\001\002\000\022\002\uffd6\003\uffd6\007\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\006" +
    "\023\uffd4\026\325\001\002\000\014\023\uffd3\056\006\057" +
    "\020\060\011\061\015\001\002\000\004\023\uffd5\001\002" +
    "\000\042\004\123\007\022\010\124\011\107\047\120\051" +
    "\136\052\112\053\117\056\006\057\020\060\011\061\015" +
    "\063\130\064\110\065\125\066\113\001\002\000\004\025" +
    "\331\001\002\000\022\002\uffd7\003\uffd7\007\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\012\003" +
    "\333\021\uffb7\022\334\026\211\001\002\000\004\024\344" +
    "\001\002\000\014\023\uffd3\056\006\057\020\060\011\061" +
    "\015\001\002\000\004\023\336\001\002\000\006\003\337" +
    "\024\340\001\002\000\004\025\343\001\002\000\042\004" +
    "\123\007\022\010\124\011\107\047\120\051\136\052\112" +
    "\053\117\056\006\057\020\060\011\061\015\063\130\064" +
    "\110\065\125\066\113\001\002\000\004\025\342\001\002" +
    "\000\022\002\uffdb\003\uffdb\007\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\001\002\000\022\002\uffd9\003\uffd9" +
    "\007\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\001" +
    "\002\000\042\004\123\007\022\010\124\011\107\047\120" +
    "\051\136\052\112\053\117\056\006\057\020\060\011\061" +
    "\015\063\130\064\110\065\125\066\113\001\002\000\004" +
    "\025\346\001\002\000\022\002\uffda\003\uffda\007\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\002\003\011\020\013\004\014\015\017" +
    "\007\027\013\030\011\031\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\073\017\007\027\013\030\011\031\006\001\001\000" +
    "\004\031\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\036\034\037\035\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\072\037" +
    "\035\050\026\001\001\000\004\044\055\001\001\000\002" +
    "\001\001\000\010\036\041\037\035\050\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\055\001\001" +
    "\000\010\036\070\037\035\050\026\001\001\000\002\001" +
    "\001\000\010\036\067\037\035\050\026\001\001\000\010" +
    "\036\066\037\035\050\026\001\001\000\002\001\001\000" +
    "\010\036\065\037\035\050\026\001\001\000\002\001\001" +
    "\000\010\036\064\037\035\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\063\037\035\050\026" +
    "\001\001\000\010\036\062\037\035\050\026\001\001\000" +
    "\002\001\001\000\010\036\061\037\035\050\026\001\001" +
    "\000\002\001\001\000\004\044\055\001\001\000\004\044" +
    "\055\001\001\000\004\044\055\001\001\000\004\044\055" +
    "\001\001\000\004\044\055\001\001\000\004\044\055\001" +
    "\001\000\004\044\055\001\001\000\004\044\055\001\001" +
    "\000\002\001\001\000\004\044\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\102\031\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\131\006\133\010\114\015\115\016" +
    "\110\021\125\023\132\024\126\025\134\027\113\030\130" +
    "\031\120\033\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\273" +
    "\037\035\050\026\001\001\000\002\001\001\000\034\003" +
    "\131\006\133\010\114\015\271\016\110\021\125\023\132" +
    "\024\126\025\134\027\113\030\130\031\120\033\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\206\001\001\000\002\001\001\000\006\034" +
    "\201\035\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\140\001\001\000\002\001\001\000\010" +
    "\036\142\037\035\050\026\001\001\000\004\044\055\001" +
    "\001\000\004\033\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\131\006\133\010" +
    "\114\015\150\016\110\021\125\023\132\024\126\025\134" +
    "\027\113\030\130\031\120\033\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\131" +
    "\006\133\010\114\015\154\016\110\021\125\023\132\024" +
    "\126\025\134\027\113\030\130\031\120\033\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\164\036\165\037\035\050\026\001" +
    "\001\000\002\001\001\000\004\044\055\001\001\000\012" +
    "\005\167\036\165\037\035\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\202\037\035\050\026\001\001\000\004\044\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\216\037\035\050" +
    "\026\001\001\000\004\044\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\131\006\133\010\114\015" +
    "\222\016\110\021\125\023\132\024\126\025\134\027\113" +
    "\030\130\031\120\033\121\001\001\000\002\001\001\000" +
    "\004\022\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\131\006\133\010\114\015" +
    "\230\016\110\021\125\023\132\024\126\025\134\027\113" +
    "\030\130\031\120\033\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\234\001\001" +
    "\000\002\001\001\000\034\003\131\006\133\010\114\015" +
    "\236\016\110\021\125\023\132\024\126\025\134\027\113" +
    "\030\130\031\120\033\121\001\001\000\002\001\001\000" +
    "\004\022\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\243\001\001\000\002\001\001\000\004\026" +
    "\245\001\001\000\002\001\001\000\004\026\254\001\001" +
    "\000\004\045\250\001\001\000\002\001\001\000\034\003" +
    "\131\006\133\010\114\015\252\016\110\021\125\023\132" +
    "\024\126\025\134\027\113\030\130\031\120\033\121\001" +
    "\001\000\004\026\253\001\001\000\002\001\001\000\004" +
    "\007\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\131\006\133\010\114\015\261" +
    "\016\110\021\125\023\132\024\126\025\134\027\113\030" +
    "\130\031\120\033\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\265\001\001\000" +
    "\004\007\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\036\277\037\035\050\026\001\001\000\004\044" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\131\006\133\010\114\015\303\016\110\021\125\023" +
    "\132\024\126\025\134\027\113\030\130\031\120\033\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\131\006\133\010\114\015\307\016\110" +
    "\021\125\023\132\024\126\025\134\027\113\030\130\031" +
    "\120\033\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\325" +
    "\031\101\001\001\000\002\001\001\000\034\003\131\006" +
    "\133\010\114\015\327\016\110\021\125\023\132\024\126" +
    "\025\134\027\113\030\130\031\120\033\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\211\001\001" +
    "\000\002\001\001\000\006\020\334\031\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\131\006\133\010\114\015\340\016\110\021\125\023" +
    "\132\024\126\025\134\027\113\030\130\031\120\033\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\131\006\133\010\114\015\344\016\110" +
    "\021\125\023\132\024\126\025\134\027\113\030\130\031" +
    "\120\033\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    public void syntax_error(Symbol sym) {
        System.err.println("Error sintáctico en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void unrecovered_syntax_error(Symbol sym) {
        System.err.println("Error irreparable en línea " + (sym.left + 1) + ", columna " + (sym.right + 1) + ": " + sym.value);
    }

    public void report_error(String message) {
        System.err.println(message);
    }
        
    public Symbol getS(){
        return this.sym;
    };


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= globales 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= global_decl_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("globales",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_decl ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_decl ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_decl ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_decl ::= error ID SEMI 
            {
              Object RESULT =null;
		 report_error("debe especificar el tipo de variable."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("global_decl",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= estru_control 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= constante 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= read SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= write SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= DO SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // read ::= READ LPAREN read_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // read ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read ::= READ error 
            {
              Object RESULT =null;
		 report_error("parámetro no válido para la función 'read'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // read_parameter ::= ID COMMA read_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // read_parameter ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("read_parameter",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // write ::= WRITE LPAREN write_parameter RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // write ::= WRITE error 
            {
              Object RESULT =null;
		 report_error("parámetro no válido para la función 'write'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // write_parameter ::= expr COMMA write_parameter 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // write_parameter ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("write_parameter",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloque ::= instruccion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque ::= instruccion bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estru_control ::= if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estru_control ::= for 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estru_control ::= while 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estru_control ::= switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("estru_control",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion ::= tipo_var ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcion ::= tipo_var ID error LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("problemas con los parametros de la funcion"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= tipo_var ID LPAREN parametro_list RPAREN error RBRACKET 
            {
              Object RESULT =null;
		 report_error("problemas en el cuerpo de la funcion"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= VOID ID LPAREN parametro_list RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= VOID ID error LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("problemas con los parametros de la funcion"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= VOID ID LPAREN parametro_list RPAREN error RBRACKET 
            {
              Object RESULT =null;
		 report_error("problemas en el cuerpo de la funcion"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro_list ::= tipo_var ID COMMA parametro_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro_list ::= tipo_var ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametro_list",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if ::= IF LPAREN expr RPAREN LBRACKET bloque RBRACKET else 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if ::= IF error LBRACKET bloque RBRACKET else 
            {
              Object RESULT =null;
		 report_error("falta paréntesis en la expresión 'if'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if ::= IF LPAREN expr RPAREN error RBRACKET else 
            {
              Object RESULT =null;
		 report_error("falta llave de apertura en el bloque 'if'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else ::= ELSE LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else ::= ELSE error RBRACKET 
            {
              Object RESULT =null;
		 report_error("falta llave de apertura en el bloque 'else'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for ::= FOR error LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("error en la estructura del bucle 'for'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for ::= FOR LPAREN asignacion SEMI expr SEMI asignacion RPAREN error RBRACKET 
            {
              Object RESULT =null;
		 report_error("falta llave de apertura en el bloque 'for'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while ::= WHILE LPAREN expr RPAREN LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while ::= WHILE error LBRACKET bloque RBRACKET 
            {
              Object RESULT =null;
		 report_error("falta paréntesis en la expresión 'while'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while ::= WHILE LPAREN expr RPAREN error RBRACKET 
            {
              Object RESULT =null;
		 report_error("falta llave de apertura en el bloque 'while'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // switch ::= SWITCH LPAREN arit_exp RPAREN LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // switch ::= SWITCH error LBRACKET case_list case_end RBRACKET 
            {
              Object RESULT =null;
		 report_error("falta paréntesis en la expresión 'switch'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch ::= SWITCH LPAREN arit_exp RPAREN case_list error RBRACKET 
            {
              Object RESULT =null;
		 report_error("falta llave de apertura en el bloque 'switch'."); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // case_list ::= CASE arit_exp COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // case_list ::= CASE arit_exp COLON bloque case_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_list",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case_end ::= DEFAULT COLON bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_end ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case_end",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // constante ::= CONST tipo_var ID EQ expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constante",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable ::= tipo_var id_list SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_var ::= TYPE_INT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_var ::= TYPE_LONG 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_var ::= TYPE_SHORT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_var ::= TYPE_CHAR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo_var",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // id_list ::= ID next_id_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // next_id_list ::= COMMA ID next_id_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // next_id_list ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("next_id_list",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= ID op_asignacion expr SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= ID op_incremento SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op_asignacion ::= EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op_asignacion ::= PLUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op_asignacion ::= MINUS_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op_asignacion ::= TIMES_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op_asignacion ::= DIV_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_asignacion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_incremento ::= PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_incremento ::= MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_incremento",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr MOD expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr op_relacional expr 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= ID 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= literal 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= number 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op_relacional ::= EQ_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op_relacional ::= GT_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // op_relacional ::= GT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op_relacional ::= LT_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // op_relacional ::= LT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // op_relacional ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("op_relacional",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literal ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // literal ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // number ::= INT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
