// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/ncque/Downloads/tec/ci/Scanner/Scanner/src/main/java/com/compi/scanner/SimpleLexer.flex

/* Simple JFlex example to tokenize arithmetic expressions */

package com.compi.scanner;

import static com.compi.scanner.TokenTypes.*;

@SuppressWarnings("fallthrough")
public class SimpleLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 = "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 = "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5" +
      "\1\6\2\0\1\5\1\7\1\0\2\10\1\11\1\12" +
      "\1\10\1\13\1\14\1\15\1\16\7\17\2\20\2\10" +
      "\1\21\1\22\1\23\1\10\1\0\3\24\1\25\1\26" +
      "\1\25\5\27\1\30\13\27\1\31\2\27\1\10\1\32" +
      "\1\10\1\5\1\27\1\0\1\33\1\34\1\35\1\36" +
      "\1\37\1\40\1\41\1\42\1\43\1\27\1\44\1\45" +
      "\1\46\1\47\1\50\1\51\1\27\1\52\1\53\1\54" +
      "\1\55\1\56\1\57\1\60\1\61\1\62\1\10\1\63" +
      "\2\10\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\4\5\3\2\5\2\3" +
      "\20\6\1\3\2\4\1\0\1\5\1\4\1\7\1\2" +
      "\1\0\1\5\1\10\2\11\1\5\1\11\1\0\1\5" +
      "\6\6\1\12\4\6\1\12\13\6\1\0\1\5\1\4" +
      "\1\5\1\0\1\4\1\0\2\13\1\0\1\7\1\5" +
      "\1\11\2\0\2\14\1\11\1\15\1\5\1\15\1\16" +
      "\1\11\30\6\1\5\1\0\1\4\1\13\1\0\1\2" +
      "\1\0\3\5\16\6\1\13\1\2\1\7\2\5\11\6";

  private static int[] zzUnpackAction() {
    int[] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\64\0\u0138" +
      "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8" +
      "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478" +
      "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618" +
      "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8" +
      "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958" +
      "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8" +
      "\0\u0b2c\0\u0b60\0\u02a4\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64" +
      "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04" +
      "\0\u0e38\0\64\0\u0e6c\0\u06b4\0\u0ea0\0\u06b4\0\u0618\0\u0ed4" +
      "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\64\0\u0820\0\u100c" +
      "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac" +
      "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c" +
      "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec" +
      "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u0ea0\0\u1624\0\u0e04" +
      "\0\u0ea0\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790" +
      "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930" +
      "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u0dd0\0\64\0\u168c" +
      "\0\u0820\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0" +
      "\0\u1bd4\0\u1c08\0\u1c3c";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7" +
      "\1\4\1\10\1\11\1\7\1\12\1\13\2\14\1\15" +
      "\1\4\1\16\6\17\1\2\1\20\1\21\1\22\1\23" +
      "\1\24\1\25\1\26\1\17\1\27\1\17\1\30\4\17" +
      "\1\31\1\32\1\33\1\34\1\35\1\36\3\17\1\37" +
      "\65\0\2\3\1\0\1\3\101\0\1\7\41\0\2\40" +
      "\1\0\1\41\1\42\1\40\1\43\23\40\1\44\31\40" +
      "\7\0\1\7\12\0\1\7\53\0\1\7\7\0\1\7" +
      "\54\0\1\7\6\0\2\7\51\0\1\45\3\0\1\46" +
      "\4\0\1\7\55\0\1\47\1\0\2\50\1\51\3\0" +
      "\2\52\1\53\1\52\1\54\1\55\1\0\4\52\1\53" +
      "\5\52\1\54\12\52\1\55\2\52\15\0\1\56\1\0" +
      "\3\57\3\0\2\52\1\53\1\52\1\54\1\52\1\0" +
      "\4\52\1\53\5\52\1\54\15\52\22\0\1\4\1\7" +
      "\63\0\1\7\1\4\56\0\3\17\3\0\6\17\1\0" +
      "\30\17\17\0\3\17\3\0\6\17\1\0\22\17\1\60" +
      "\5\17\17\0\3\17\3\0\6\17\1\0\17\17\1\61" +
      "\10\17\17\0\3\17\3\0\6\17\1\0\1\62\6\17" +
      "\1\63\5\17\1\64\12\17\17\0\3\17\3\0\6\17" +
      "\1\0\4\17\1\65\10\17\1\66\12\17\17\0\3\17" +
      "\3\0\6\17\1\0\12\17\1\62\1\17\1\67\10\17" +
      "\1\70\2\17\17\0\3\17\3\0\6\17\1\0\12\17" +
      "\1\71\2\17\1\72\12\17\17\0\3\17\3\0\6\17" +
      "\1\0\15\17\1\60\12\17\17\0\3\17\3\0\6\17" +
      "\1\0\5\17\1\73\6\17\1\74\13\17\17\0\3\17" +
      "\3\0\6\17\1\0\15\17\1\75\12\17\17\0\3\17" +
      "\3\0\6\17\1\0\4\17\1\76\23\17\17\0\3\17" +
      "\3\0\6\17\1\0\7\17\1\77\1\100\10\17\1\101" +
      "\2\17\1\102\3\17\17\0\3\17\3\0\6\17\1\0" +
      "\26\17\1\103\1\17\17\0\3\17\3\0\6\17\1\0" +
      "\14\17\1\104\13\17\17\0\3\17\3\0\6\17\1\0" +
      "\15\17\1\105\12\17\17\0\3\17\3\0\6\17\1\0" +
      "\7\17\1\106\20\17\23\0\1\7\40\0\1\7\2\40" +
      "\1\0\1\40\1\107\1\40\1\43\23\40\1\44\31\40" +
      "\2\41\1\0\1\41\1\42\1\41\1\110\23\41\1\111" +
      "\31\41\2\42\1\0\3\42\1\112\23\42\1\113\31\42" +
      "\2\114\1\0\1\114\1\115\1\114\1\116\57\114\1\0" +
      "\1\114\1\115\1\114\1\117\23\114\1\40\1\114\1\40" +
      "\3\114\1\40\6\114\1\40\2\114\1\40\1\114\1\40" +
      "\7\114\2\45\1\120\1\45\1\120\4\45\1\121\52\45" +
      "\2\46\3\0\57\46\16\0\3\122\57\0\1\47\1\0" +
      "\2\50\1\51\3\0\2\52\1\123\1\52\1\54\1\52" +
      "\1\0\4\52\1\123\5\52\1\54\15\52\17\0\2\124" +
      "\1\51\5\0\1\125\10\0\1\125\42\0\3\52\3\0" +
      "\6\52\1\0\30\52\1\0\12\126\2\0\2\126\3\52" +
      "\3\126\6\127\1\126\30\127\1\126\14\0\1\47\1\0" +
      "\3\130\3\0\6\52\1\0\30\52\1\0\16\131\3\132" +
      "\3\131\3\132\3\133\1\131\6\132\22\133\1\131\16\134" +
      "\3\122\43\134\14\0\1\56\1\0\3\57\3\0\2\52" +
      "\1\135\1\52\1\54\1\52\1\0\4\52\1\135\5\52" +
      "\1\54\15\52\17\0\3\17\3\0\6\17\1\0\21\17" +
      "\1\136\6\17\17\0\3\17\3\0\6\17\1\0\4\17" +
      "\1\137\23\17\17\0\3\17\3\0\6\17\1\0\20\17" +
      "\1\140\7\17\17\0\3\17\3\0\6\17\1\0\1\72" +
      "\27\17\17\0\3\17\3\0\6\17\1\0\14\17\1\141" +
      "\13\17\17\0\3\17\3\0\6\17\1\0\5\17\1\142" +
      "\22\17\17\0\3\17\3\0\6\17\1\0\22\17\1\143" +
      "\5\17\17\0\3\17\3\0\6\17\1\0\22\17\1\144" +
      "\5\17\17\0\3\17\3\0\6\17\1\0\21\17\1\145" +
      "\6\17\17\0\3\17\3\0\6\17\1\0\15\17\1\146" +
      "\12\17\17\0\3\17\3\0\6\17\1\0\17\17\1\73" +
      "\10\17\17\0\3\17\3\0\6\17\1\0\21\17\1\73" +
      "\6\17\17\0\3\17\3\0\6\17\1\0\14\17\1\147" +
      "\13\17\17\0\3\17\3\0\6\17\1\0\6\17\1\150" +
      "\12\17\1\151\6\17\17\0\3\17\3\0\6\17\1\0" +
      "\15\17\1\152\12\17\17\0\3\17\3\0\6\17\1\0" +
      "\6\17\1\153\20\17\1\154\17\0\3\17\3\0\6\17" +
      "\1\0\1\155\16\17\1\156\10\17\17\0\3\17\3\0" +
      "\6\17\1\0\10\17\1\157\17\17\17\0\3\17\3\0" +
      "\6\17\1\0\16\17\1\160\11\17\17\0\3\17\3\0" +
      "\6\17\1\0\10\17\1\161\7\17\1\162\7\17\17\0" +
      "\3\17\3\0\6\17\1\0\10\17\1\163\1\17\1\164" +
      "\15\17\17\0\3\17\3\0\6\17\1\0\10\17\1\165" +
      "\17\17\1\0\2\107\1\0\3\107\1\166\23\107\1\167" +
      "\31\107\2\170\1\0\1\170\1\0\61\170\1\0\1\170" +
      "\1\0\1\170\1\41\23\170\1\41\1\170\1\41\3\170" +
      "\1\41\6\170\1\41\2\170\1\41\1\170\1\41\7\170" +
      "\6\0\1\42\23\0\1\42\1\0\1\42\3\0\1\42" +
      "\6\0\1\42\2\0\1\42\1\0\1\42\7\0\2\115" +
      "\1\0\3\115\1\171\55\115\11\120\1\172\52\120\2\45" +
      "\1\120\1\45\1\120\4\45\1\121\3\45\1\173\46\45" +
      "\16\0\3\122\4\0\1\112\1\125\7\0\1\112\1\125" +
      "\1\112\35\0\2\174\2\0\3\175\3\0\6\52\1\0" +
      "\30\52\17\0\3\124\5\0\1\125\10\0\1\125\36\0" +
      "\2\174\2\0\3\176\61\0\3\130\3\0\2\52\1\123" +
      "\3\52\1\0\4\52\1\123\23\52\1\0\16\131\3\0" +
      "\3\131\3\0\4\131\6\0\23\131\14\0\1\47\1\0" +
      "\3\177\3\0\3\132\1\52\1\54\1\52\1\0\6\132" +
      "\4\52\1\54\15\52\1\0\16\131\3\52\3\131\3\52" +
      "\3\133\1\131\6\52\22\133\1\131\16\134\3\0\43\134" +
      "\12\126\2\174\2\126\3\175\3\126\6\127\1\126\30\127" +
      "\1\126\16\0\3\17\3\0\6\17\1\0\15\17\1\73" +
      "\12\17\17\0\3\17\3\0\6\17\1\0\1\200\27\17" +
      "\17\0\3\17\3\0\6\17\1\0\4\17\1\73\23\17" +
      "\17\0\3\17\3\0\6\17\1\0\20\17\1\74\1\201" +
      "\6\17\17\0\3\17\3\0\6\17\1\0\1\202\27\17" +
      "\17\0\3\17\3\0\6\17\1\0\1\17\1\165\26\17" +
      "\17\0\3\17\3\0\6\17\1\0\13\17\1\73\14\17" +
      "\17\0\3\17\3\0\6\17\1\0\4\17\1\203\23\17" +
      "\17\0\3\17\3\0\6\17\1\0\1\74\27\17\17\0" +
      "\3\17\3\0\6\17\1\0\6\17\1\73\21\17\17\0" +
      "\3\17\3\0\6\17\1\0\10\17\1\204\17\17\17\0" +
      "\3\17\3\0\6\17\1\0\22\17\1\203\5\17\17\0" +
      "\3\17\3\0\6\17\1\0\17\17\1\74\10\17\17\0" +
      "\3\17\3\0\6\17\1\0\14\17\1\205\13\17\17\0" +
      "\3\17\3\0\6\17\1\0\4\17\1\206\23\17\17\0" +
      "\3\17\3\0\6\17\1\0\21\17\1\207\6\17\17\0" +
      "\3\17\3\0\6\17\1\0\22\17\1\210\5\17\17\0" +
      "\3\17\3\0\6\17\1\0\21\17\1\211\6\17\17\0" +
      "\3\17\3\0\6\17\1\0\4\17\1\212\23\17\17\0" +
      "\3\17\3\0\6\17\1\0\15\17\1\213\12\17\17\0" +
      "\3\17\3\0\6\17\1\0\10\17\1\214\17\17\17\0" +
      "\3\17\3\0\6\17\1\0\3\17\1\73\24\17\17\0" +
      "\3\17\3\0\6\17\1\0\1\215\27\17\17\0\3\17" +
      "\3\0\6\17\1\0\12\17\1\140\15\17\1\0\2\115" +
      "\1\0\3\115\1\216\23\115\1\107\1\115\1\107\3\115" +
      "\1\107\6\115\1\107\2\115\1\107\1\115\1\107\7\115" +
      "\11\120\1\172\3\120\1\217\46\120\2\220\1\0\1\220" +
      "\1\0\57\220\16\0\3\176\61\0\3\175\3\0\1\52" +
      "\1\221\4\52\1\0\3\52\1\221\1\52\1\221\22\52" +
      "\17\0\3\176\4\0\1\112\10\0\1\112\1\0\1\112" +
      "\37\0\1\47\1\0\3\177\3\0\2\132\1\222\1\52" +
      "\1\54\1\52\1\0\4\132\1\222\1\132\4\52\1\54" +
      "\15\52\17\0\3\17\3\0\6\17\1\0\11\17\1\73" +
      "\16\17\17\0\3\17\3\0\6\17\1\0\10\17\1\223" +
      "\17\17\17\0\3\17\3\0\6\17\1\0\22\17\1\224" +
      "\5\17\17\0\3\17\3\0\6\17\1\0\17\17\1\213" +
      "\10\17\17\0\3\17\3\0\6\17\1\0\20\17\1\225" +
      "\7\17\17\0\3\17\3\0\6\17\1\0\4\17\1\163" +
      "\23\17\17\0\3\17\3\0\6\17\1\0\15\17\1\226" +
      "\12\17\17\0\3\17\3\0\6\17\1\0\10\17\1\227" +
      "\17\17\17\0\3\17\3\0\6\17\1\0\2\17\1\74" +
      "\25\17\17\0\3\17\3\0\6\17\1\0\2\17\1\230" +
      "\25\17\17\0\3\17\3\0\6\17\1\0\3\17\1\231" +
      "\24\17\17\0\3\17\3\0\6\17\1\0\14\17\1\73" +
      "\13\17\17\0\3\17\3\0\6\17\1\0\6\17\1\153" +
      "\21\17\17\0\3\17\3\0\6\17\1\0\21\17\1\106" +
      "\6\17\13\0\2\174\1\47\1\0\3\177\3\0\3\132" +
      "\1\52\1\54\1\52\1\0\6\132\4\52\1\54\15\52" +
      "\17\0\3\17\3\0\6\17\1\0\14\17\1\232\13\17" +
      "\17\0\3\17\3\0\6\17\1\0\12\17\1\74\15\17" +
      "\17\0\3\17\3\0\6\17\1\0\21\17\1\233\6\17" +
      "\17\0\3\17\3\0\6\17\1\0\5\17\1\73\22\17" +
      "\17\0\3\17\3\0\6\17\1\0\2\17\1\73\25\17" +
      "\17\0\3\17\3\0\6\17\1\0\7\17\1\73\20\17" +
      "\17\0\3\17\3\0\6\17\1\0\4\17\1\226\23\17" +
      "\17\0\3\17\3\0\6\17\1\0\22\17\1\140\5\17" +
      "\17\0\3\17\3\0\6\17\1\0\4\17\1\72\23\17" +
      "\1\0";

  private static int[] zzUnpacktrans() {
    int[] result = new int[7280];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
      "Unknown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\4\1\1\11\32\1\1\0\4\1\1\0" +
      "\6\1\1\0\30\1\1\0\2\1\1\11\1\0\1\1" +
      "\1\0\2\1\1\0\3\1\2\0\1\11\40\1\1\0" +
      "\2\1\1\0\1\1\1\0\22\1\1\11\14\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the
   * {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * 
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond
   * {@link #zzEndRead}.
   *
   * <p>
   * When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will
   * have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /**
   * Number of characters from the last newline up to the start of the matched
   * text.
   */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  TokenList tokenList = TokenList.getInstance();
  ErrorList errorList = ErrorList.getInstance();

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Returns the maximum size of the scanner buffer, which limits the size of
   * tokens.
   */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /** Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
          zzBuffer, 0,
          zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
      } else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else { // There is room in the buffer for at least one more char
          int c = zzReader.read(); // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char) c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }

  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>
   * Does not close the old reader.
   *
   * <p>
   * All internal variables are reset, the old input stream <b>cannot</b> be
   * reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
    zzAtBOL = true;
    zzAtEOF = false;
    zzCurrentPos = 0;
    zzMarkedPos = 0;
    zzStartRead = 0;
    zzEndRead = 0;
    zzFinalHighSurrogate = 0;
    yyline = 0;
    yycolumn = 0;
    yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }

  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>
   * It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to
   *                 {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }

  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occurred while scanning.
   *
   * <p>
   * In a well-formed scanner (no or only correct usage of {@code yypushback(int)}
   * and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>
   * If this method is called, something is seriously wrong (e.g. a JFlex bug
   * producing a faulty
   * scanner etc.).
   *
   * <p>
   * Usual syntax/scanner level error handling should be done in error fallback
   * rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>
   * They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not
   *               be greater than
   *               {@link #yylength()}.
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of
   * input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B': // fall through
          case '\u000C': // fall through
          case '\u0085': // fall through
          case '\u2028': // fall through
          case '\u2029':
            yyline++;
            zzR = false;
            break;
          case '\r':
            yyline++;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
            }
            break;
          default:
            zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek)
          yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            errorList.insertError(ERROR, "Desconocido -> " + yytext(), yyline);
          }
          // fall through
          case 15:
            break;
          case 2: { /* ignore */
          }
          // fall through
          case 16:
            break;
          case 3: {
            tokenList.insertToken(OPERADOR, yytext(), yyline);
          }
          // fall through
          case 17:
            break;
          case 4: {
            errorList.insertError(ERROR, "String no cerrado -> " + yytext(), yyline);
          }
          // fall through
          case 18:
            break;
          case 5: {
            tokenList.insertToken(LITERAL, yytext(), yyline);
          }
          // fall through
          case 19:
            break;
          case 6: {
            tokenList.insertToken(IDENTIFICADOR, yytext(), yyline);
          }
          // fall through
          case 20:
            break;
          case 7: {
            tokenList.insertToken(ERROR, "Error: Comentario no cerrado -> " + yytext(), yyline);
          }
          // fall through
          case 21:
            break;
          case 8: {
            errorList.insertError(ERROR, "Octal mal formado -> " + yytext(), yyline);
          }
          // fall through
          case 22:
            break;
          case 9: {
            errorList.insertError(ERROR, "Identificador no puede empezar con un número ->" + yytext(), yyline);
          }
          // fall through
          case 23:
            break;
          case 10: {
            tokenList.insertToken(PALABRA_RESERVADA, yytext(), yyline);
          }
          // fall through
          case 24:
            break;
          case 11: {
            errorList.insertError(ERROR, "String no valido -> " + yytext(), yyline);
          }
          // fall through
          case 25:
            break;
          case 12: {
            errorList.insertError(ERROR, "Exponente mal formado -> " + yytext(), yyline);
          }
          // fall through
          case 26:
            break;
          case 13: {
            errorList.insertError(ERROR, "Hexadecimal mal formado -> " + yytext(), yyline);
          }
          // fall through
          case 27:
            break;
          case 14: {
            errorList.insertError(ERROR, "Flotante mal formado -> " + yytext(), yyline);
          }
          // fall through
          case 28:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

}
